
FullAttempt_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000047c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000dc  00802000  000047c8  0000485c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002523  008020dc  008020dc  00004938  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00004938  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00004968  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000003f8  00000000  00000000  000049a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000c5af  00000000  00000000  00004da0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000422c  00000000  00000000  0001134f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000047b3  00000000  00000000  0001557b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001414  00000000  00000000  00019d30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000036fc  00000000  00000000  0001b144  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00009b05  00000000  00000000  0001e840  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000004a0  00000000  00000000  00028345  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 4a 01 	jmp	0x294	; 0x294 <__ctors_end>
       4:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
       8:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
       c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      10:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      14:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      18:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      1c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      20:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      24:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      28:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      2c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      30:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      34:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      38:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      3c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      40:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      44:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      48:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      4c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      50:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      54:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      58:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      5c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      60:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      64:	0c 94 03 22 	jmp	0x4406	; 0x4406 <__vector_25>
      68:	0c 94 cc 21 	jmp	0x4398	; 0x4398 <__vector_26>
      6c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      70:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      74:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      78:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      7c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      80:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      84:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      88:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      8c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      90:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      94:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      98:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      9c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      a0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      a4:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      a8:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      ac:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      b0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      b4:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      b8:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      bc:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      c0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      c4:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      c8:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      cc:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      d0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      d4:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      d8:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      dc:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      e0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      e4:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      e8:	0c 94 37 22 	jmp	0x446e	; 0x446e <__vector_58>
      ec:	0c 94 95 21 	jmp	0x432a	; 0x432a <__vector_59>
      f0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      f4:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      f8:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
      fc:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     100:	0c 94 3b 05 	jmp	0xa76	; 0xa76 <__vector_64>
     104:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     108:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     10c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     110:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     114:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     118:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     11c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     120:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     124:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     128:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     12c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     130:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     134:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     138:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     13c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     140:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     144:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     148:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     14c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     150:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     154:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     158:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     15c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     160:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     164:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     168:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     16c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     170:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     174:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     178:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     17c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     180:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     184:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     188:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     18c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     190:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     194:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     198:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     19c:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1a0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1a4:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1a8:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1ac:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1b0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1b4:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1b8:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1bc:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1c0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1c4:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1c8:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1cc:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1d0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1d4:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1d8:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1dc:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1e0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1e4:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1e8:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1ec:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1f0:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1f4:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1f8:	0c 94 6b 01 	jmp	0x2d6	; 0x2d6 <__bad_interrupt>
     1fc:	31 1a       	sub	r3, r17
     1fe:	18 19       	sub	r17, r8
     200:	2f 19       	sub	r18, r15
     202:	29 19       	sub	r18, r9
     204:	29 19       	sub	r18, r9
     206:	29 19       	sub	r18, r9
     208:	29 19       	sub	r18, r9
     20a:	29 19       	sub	r18, r9
     20c:	29 19       	sub	r18, r9
     20e:	29 19       	sub	r18, r9
     210:	29 19       	sub	r18, r9
     212:	29 19       	sub	r18, r9
     214:	29 19       	sub	r18, r9
     216:	46 1a       	sub	r4, r22
     218:	29 19       	sub	r18, r9
     21a:	29 19       	sub	r18, r9
     21c:	29 19       	sub	r18, r9
     21e:	c1 18       	sub	r12, r1
     220:	29 19       	sub	r18, r9
     222:	2f 19       	sub	r18, r15
     224:	29 19       	sub	r18, r9
     226:	29 19       	sub	r18, r9
     228:	0a 1a       	sub	r0, r26
     22a:	b3 1c       	adc	r11, r3
     22c:	26 1b       	sub	r18, r22
     22e:	15 1c       	adc	r1, r5
     230:	c8 1b       	sub	r28, r24
     232:	e5 1b       	sub	r30, r21
     234:	05 1c       	adc	r0, r5
     236:	1c 1c       	adc	r1, r12
     238:	6c 1b       	sub	r22, r28
     23a:	83 1b       	sub	r24, r19
     23c:	7f 1c       	adc	r7, r15
     23e:	ce 1c       	adc	r12, r14
     240:	9a 1b       	sub	r25, r26
     242:	b1 1b       	sub	r27, r17

00000244 <__trampolines_start>:
     244:	0c 94 31 1a 	jmp	0x3462	; 0x3462 <f_printf+0x456>
     248:	0c 94 6c 1b 	jmp	0x36d8	; 0x36d8 <main+0x216>
     24c:	0c 94 46 1a 	jmp	0x348c	; 0x348c <f_printf+0x480>
     250:	0c 94 e5 1b 	jmp	0x37ca	; 0x37ca <main+0x308>
     254:	0c 94 b1 1b 	jmp	0x3762	; 0x3762 <main+0x2a0>
     258:	0c 94 05 1c 	jmp	0x380a	; 0x380a <main+0x348>
     25c:	0c 94 83 1b 	jmp	0x3706	; 0x3706 <main+0x244>
     260:	0c 94 c8 1b 	jmp	0x3790	; 0x3790 <main+0x2ce>
     264:	0c 94 9a 1b 	jmp	0x3734	; 0x3734 <main+0x272>
     268:	0c 94 26 1b 	jmp	0x364c	; 0x364c <main+0x18a>
     26c:	0c 94 29 19 	jmp	0x3252	; 0x3252 <f_printf+0x246>
     270:	0c 94 15 1c 	jmp	0x382a	; 0x382a <main+0x368>
     274:	0c 94 1c 1c 	jmp	0x3838	; 0x3838 <main+0x376>
     278:	0c 94 0a 1a 	jmp	0x3414	; 0x3414 <f_printf+0x408>
     27c:	0c 94 7f 1c 	jmp	0x38fe	; 0x38fe <main+0x43c>
     280:	0c 94 18 19 	jmp	0x3230	; 0x3230 <f_printf+0x224>
     284:	0c 94 2f 19 	jmp	0x325e	; 0x325e <f_printf+0x252>
     288:	0c 94 ce 1c 	jmp	0x399c	; 0x399c <main+0x4da>
     28c:	0c 94 b3 1c 	jmp	0x3966	; 0x3966 <main+0x4a4>
     290:	0c 94 c1 18 	jmp	0x3182	; 0x3182 <f_printf+0x176>

00000294 <__ctors_end>:
     294:	11 24       	eor	r1, r1
     296:	1f be       	out	0x3f, r1	; 63
     298:	cf ef       	ldi	r28, 0xFF	; 255
     29a:	cd bf       	out	0x3d, r28	; 61
     29c:	df e5       	ldi	r29, 0x5F	; 95
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	00 e0       	ldi	r16, 0x00	; 0
     2a2:	0c bf       	out	0x3c, r16	; 60

000002a4 <__do_copy_data>:
     2a4:	10 e2       	ldi	r17, 0x20	; 32
     2a6:	a0 e0       	ldi	r26, 0x00	; 0
     2a8:	b0 e2       	ldi	r27, 0x20	; 32
     2aa:	e8 ec       	ldi	r30, 0xC8	; 200
     2ac:	f7 e4       	ldi	r31, 0x47	; 71
     2ae:	00 e0       	ldi	r16, 0x00	; 0
     2b0:	0b bf       	out	0x3b, r16	; 59
     2b2:	02 c0       	rjmp	.+4      	; 0x2b8 <__do_copy_data+0x14>
     2b4:	07 90       	elpm	r0, Z+
     2b6:	0d 92       	st	X+, r0
     2b8:	ac 3d       	cpi	r26, 0xDC	; 220
     2ba:	b1 07       	cpc	r27, r17
     2bc:	d9 f7       	brne	.-10     	; 0x2b4 <__do_copy_data+0x10>

000002be <__do_clear_bss>:
     2be:	25 e4       	ldi	r18, 0x45	; 69
     2c0:	ac ed       	ldi	r26, 0xDC	; 220
     2c2:	b0 e2       	ldi	r27, 0x20	; 32
     2c4:	01 c0       	rjmp	.+2      	; 0x2c8 <.do_clear_bss_start>

000002c6 <.do_clear_bss_loop>:
     2c6:	1d 92       	st	X+, r1

000002c8 <.do_clear_bss_start>:
     2c8:	af 3f       	cpi	r26, 0xFF	; 255
     2ca:	b2 07       	cpc	r27, r18
     2cc:	e1 f7       	brne	.-8      	; 0x2c6 <.do_clear_bss_loop>
     2ce:	0e 94 61 1a 	call	0x34c2	; 0x34c2 <main>
     2d2:	0c 94 e2 23 	jmp	0x47c4	; 0x47c4 <_exit>

000002d6 <__bad_interrupt>:
     2d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000002da <ADSspi_init>:
	}
	transfer(_RDATAC); //turn read data continuous back on
	_delay_us    (5);
	ADSspi_CShigh();
	return;
}
     2da:	e0 e6       	ldi	r30, 0x60	; 96
     2dc:	f6 e0       	ldi	r31, 0x06	; 6
     2de:	80 e2       	ldi	r24, 0x20	; 32
     2e0:	86 87       	std	Z+14, r24	; 0x0e
     2e2:	90 e4       	ldi	r25, 0x40	; 64
     2e4:	92 83       	std	Z+2, r25	; 0x02
     2e6:	81 83       	std	Z+1, r24	; 0x01
     2e8:	90 e8       	ldi	r25, 0x80	; 128
     2ea:	91 83       	std	Z+1, r25	; 0x01
     2ec:	20 e1       	ldi	r18, 0x10	; 16
     2ee:	21 83       	std	Z+1, r18	; 0x01
     2f0:	86 83       	std	Z+6, r24	; 0x06
     2f2:	96 83       	std	Z+6, r25	; 0x06
     2f4:	81 e0       	ldi	r24, 0x01	; 1
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	84 e0       	ldi	r24, 0x04	; 4
     2fa:	81 83       	std	Z+1, r24	; 0x01
     2fc:	86 83       	std	Z+6, r24	; 0x06
     2fe:	e0 ec       	ldi	r30, 0xC0	; 192
     300:	f9 e0       	ldi	r31, 0x09	; 9
     302:	86 e5       	ldi	r24, 0x56	; 86
     304:	80 83       	st	Z, r24
     306:	11 82       	std	Z+1, r1	; 0x01
     308:	81 e4       	ldi	r24, 0x41	; 65
     30a:	80 93 21 43 	sts	0x4321, r24	; 0x804321 <sample_count>
     30e:	10 92 41 43 	sts	0x4341, r1	; 0x804341 <buffer_full>
     312:	10 92 17 43 	sts	0x4317, r1	; 0x804317 <ADSnewData>
     316:	08 95       	ret

00000318 <transfer>:
     318:	80 93 c3 09 	sts	0x09C3, r24	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     31c:	e0 ec       	ldi	r30, 0xC0	; 192
     31e:	f9 e0       	ldi	r31, 0x09	; 9
     320:	82 81       	ldd	r24, Z+2	; 0x02
     322:	88 23       	and	r24, r24
     324:	ec f7       	brge	.-6      	; 0x320 <transfer+0x8>
     326:	80 91 c3 09 	lds	r24, 0x09C3	; 0x8009c3 <__TEXT_REGION_LENGTH__+0x7009c3>
     32a:	08 95       	ret

0000032c <adsWakeup>:
     32c:	1f 93       	push	r17
     32e:	cf 93       	push	r28
     330:	df 93       	push	r29
     332:	c0 e6       	ldi	r28, 0x60	; 96
     334:	d6 e0       	ldi	r29, 0x06	; 6
     336:	10 e1       	ldi	r17, 0x10	; 16
     338:	1e 83       	std	Y+6, r17	; 0x06
     33a:	85 e1       	ldi	r24, 0x15	; 21
     33c:	8a 95       	dec	r24
     33e:	f1 f7       	brne	.-4      	; 0x33c <adsWakeup+0x10>
     340:	00 00       	nop
     342:	82 e0       	ldi	r24, 0x02	; 2
     344:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
     348:	85 e3       	ldi	r24, 0x35	; 53
     34a:	8a 95       	dec	r24
     34c:	f1 f7       	brne	.-4      	; 0x34a <adsWakeup+0x1e>
     34e:	00 00       	nop
     350:	1d 83       	std	Y+5, r17	; 0x05
     352:	85 e3       	ldi	r24, 0x35	; 53
     354:	8a 95       	dec	r24
     356:	f1 f7       	brne	.-4      	; 0x354 <adsWakeup+0x28>
     358:	00 00       	nop
     35a:	df 91       	pop	r29
     35c:	cf 91       	pop	r28
     35e:	1f 91       	pop	r17
     360:	08 95       	ret

00000362 <adsStandby>:
     362:	1f 93       	push	r17
     364:	cf 93       	push	r28
     366:	df 93       	push	r29
     368:	c0 e6       	ldi	r28, 0x60	; 96
     36a:	d6 e0       	ldi	r29, 0x06	; 6
     36c:	10 e1       	ldi	r17, 0x10	; 16
     36e:	1e 83       	std	Y+6, r17	; 0x06
     370:	85 e3       	ldi	r24, 0x35	; 53
     372:	8a 95       	dec	r24
     374:	f1 f7       	brne	.-4      	; 0x372 <adsStandby+0x10>
     376:	00 00       	nop
     378:	84 e0       	ldi	r24, 0x04	; 4
     37a:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
     37e:	85 e3       	ldi	r24, 0x35	; 53
     380:	8a 95       	dec	r24
     382:	f1 f7       	brne	.-4      	; 0x380 <adsStandby+0x1e>
     384:	00 00       	nop
     386:	1d 83       	std	Y+5, r17	; 0x05
     388:	df 91       	pop	r29
     38a:	cf 91       	pop	r28
     38c:	1f 91       	pop	r17
     38e:	08 95       	ret

00000390 <adsReset>:
     390:	1f 93       	push	r17
     392:	cf 93       	push	r28
     394:	df 93       	push	r29
     396:	c0 e6       	ldi	r28, 0x60	; 96
     398:	d6 e0       	ldi	r29, 0x06	; 6
     39a:	10 e1       	ldi	r17, 0x10	; 16
     39c:	1e 83       	std	Y+6, r17	; 0x06
     39e:	25 e3       	ldi	r18, 0x35	; 53
     3a0:	2a 95       	dec	r18
     3a2:	f1 f7       	brne	.-4      	; 0x3a0 <adsReset+0x10>
     3a4:	00 00       	nop
     3a6:	86 e0       	ldi	r24, 0x06	; 6
     3a8:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
     3ac:	8f ef       	ldi	r24, 0xFF	; 255
     3ae:	93 ef       	ldi	r25, 0xF3	; 243
     3b0:	21 e0       	ldi	r18, 0x01	; 1
     3b2:	81 50       	subi	r24, 0x01	; 1
     3b4:	90 40       	sbci	r25, 0x00	; 0
     3b6:	20 40       	sbci	r18, 0x00	; 0
     3b8:	e1 f7       	brne	.-8      	; 0x3b2 <adsReset+0x22>
     3ba:	00 c0       	rjmp	.+0      	; 0x3bc <adsReset+0x2c>
     3bc:	00 00       	nop
     3be:	1d 83       	std	Y+5, r17	; 0x05
     3c0:	df 91       	pop	r29
     3c2:	cf 91       	pop	r28
     3c4:	1f 91       	pop	r17
     3c6:	08 95       	ret

000003c8 <adsStart>:
     3c8:	1f 93       	push	r17
     3ca:	cf 93       	push	r28
     3cc:	df 93       	push	r29
     3ce:	c0 e6       	ldi	r28, 0x60	; 96
     3d0:	d6 e0       	ldi	r29, 0x06	; 6
     3d2:	10 e1       	ldi	r17, 0x10	; 16
     3d4:	1e 83       	std	Y+6, r17	; 0x06
     3d6:	85 e3       	ldi	r24, 0x35	; 53
     3d8:	8a 95       	dec	r24
     3da:	f1 f7       	brne	.-4      	; 0x3d8 <adsStart+0x10>
     3dc:	00 00       	nop
     3de:	88 e0       	ldi	r24, 0x08	; 8
     3e0:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
     3e4:	85 e3       	ldi	r24, 0x35	; 53
     3e6:	8a 95       	dec	r24
     3e8:	f1 f7       	brne	.-4      	; 0x3e6 <adsStart+0x1e>
     3ea:	00 00       	nop
     3ec:	1d 83       	std	Y+5, r17	; 0x05
     3ee:	df 91       	pop	r29
     3f0:	cf 91       	pop	r28
     3f2:	1f 91       	pop	r17
     3f4:	08 95       	ret

000003f6 <adsStop>:
     3f6:	1f 93       	push	r17
     3f8:	cf 93       	push	r28
     3fa:	df 93       	push	r29
     3fc:	c0 e6       	ldi	r28, 0x60	; 96
     3fe:	d6 e0       	ldi	r29, 0x06	; 6
     400:	10 e1       	ldi	r17, 0x10	; 16
     402:	1e 83       	std	Y+6, r17	; 0x06
     404:	85 e3       	ldi	r24, 0x35	; 53
     406:	8a 95       	dec	r24
     408:	f1 f7       	brne	.-4      	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     40a:	00 00       	nop
     40c:	8a e0       	ldi	r24, 0x0A	; 10
     40e:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
     412:	85 e3       	ldi	r24, 0x35	; 53
     414:	8a 95       	dec	r24
     416:	f1 f7       	brne	.-4      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
     418:	00 00       	nop
     41a:	1d 83       	std	Y+5, r17	; 0x05
     41c:	df 91       	pop	r29
     41e:	cf 91       	pop	r28
     420:	1f 91       	pop	r17
     422:	08 95       	ret

00000424 <adsRDATAC>:
     424:	1f 93       	push	r17
     426:	cf 93       	push	r28
     428:	df 93       	push	r29
     42a:	c0 e6       	ldi	r28, 0x60	; 96
     42c:	d6 e0       	ldi	r29, 0x06	; 6
     42e:	10 e1       	ldi	r17, 0x10	; 16
     430:	1e 83       	std	Y+6, r17	; 0x06
     432:	85 e3       	ldi	r24, 0x35	; 53
     434:	8a 95       	dec	r24
     436:	f1 f7       	brne	.-4      	; 0x434 <adsRDATAC+0x10>
     438:	00 00       	nop
     43a:	80 e1       	ldi	r24, 0x10	; 16
     43c:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
     440:	85 e3       	ldi	r24, 0x35	; 53
     442:	8a 95       	dec	r24
     444:	f1 f7       	brne	.-4      	; 0x442 <adsRDATAC+0x1e>
     446:	00 00       	nop
     448:	1d 83       	std	Y+5, r17	; 0x05
     44a:	df 91       	pop	r29
     44c:	cf 91       	pop	r28
     44e:	1f 91       	pop	r17
     450:	08 95       	ret

00000452 <adsGetDeviceID>:
     452:	0f 93       	push	r16
     454:	1f 93       	push	r17
     456:	cf 93       	push	r28
     458:	df 93       	push	r29
     45a:	c0 e6       	ldi	r28, 0x60	; 96
     45c:	d6 e0       	ldi	r29, 0x06	; 6
     45e:	10 e1       	ldi	r17, 0x10	; 16
     460:	1e 83       	std	Y+6, r17	; 0x06
     462:	85 e3       	ldi	r24, 0x35	; 53
     464:	8a 95       	dec	r24
     466:	f1 f7       	brne	.-4      	; 0x464 <adsGetDeviceID+0x12>
     468:	00 00       	nop
     46a:	81 e1       	ldi	r24, 0x11	; 17
     46c:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
     470:	85 e1       	ldi	r24, 0x15	; 21
     472:	8a 95       	dec	r24
     474:	f1 f7       	brne	.-4      	; 0x472 <adsGetDeviceID+0x20>
     476:	00 00       	nop
     478:	80 e2       	ldi	r24, 0x20	; 32
     47a:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
     47e:	85 e1       	ldi	r24, 0x15	; 21
     480:	8a 95       	dec	r24
     482:	f1 f7       	brne	.-4      	; 0x480 <adsGetDeviceID+0x2e>
     484:	00 00       	nop
     486:	80 e0       	ldi	r24, 0x00	; 0
     488:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
     48c:	85 e1       	ldi	r24, 0x15	; 21
     48e:	8a 95       	dec	r24
     490:	f1 f7       	brne	.-4      	; 0x48e <adsGetDeviceID+0x3c>
     492:	00 00       	nop
     494:	80 e0       	ldi	r24, 0x00	; 0
     496:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
     49a:	08 2f       	mov	r16, r24
     49c:	85 e1       	ldi	r24, 0x15	; 21
     49e:	8a 95       	dec	r24
     4a0:	f1 f7       	brne	.-4      	; 0x49e <adsGetDeviceID+0x4c>
     4a2:	00 00       	nop
     4a4:	80 e1       	ldi	r24, 0x10	; 16
     4a6:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
     4aa:	85 e3       	ldi	r24, 0x35	; 53
     4ac:	8a 95       	dec	r24
     4ae:	f1 f7       	brne	.-4      	; 0x4ac <adsGetDeviceID+0x5a>
     4b0:	00 00       	nop
     4b2:	1d 83       	std	Y+5, r17	; 0x05
     4b4:	80 2f       	mov	r24, r16
     4b6:	df 91       	pop	r29
     4b8:	cf 91       	pop	r28
     4ba:	1f 91       	pop	r17
     4bc:	0f 91       	pop	r16
     4be:	08 95       	ret

000004c0 <adsWREG>:

void adsWREG(byte _address, byte data) {
     4c0:	ff 92       	push	r15
     4c2:	0f 93       	push	r16
     4c4:	1f 93       	push	r17
     4c6:	cf 93       	push	r28
     4c8:	df 93       	push	r29
     4ca:	c8 2f       	mov	r28, r24
     4cc:	f6 2e       	mov	r15, r22
	byte opcode1 = _WREG + (_address & 0x1F); //001rrrrr; _RREG = 00100000 and _address = rrrrr
	ADSspi_CSlow();
     4ce:	00 e6       	ldi	r16, 0x60	; 96
     4d0:	16 e0       	ldi	r17, 0x06	; 6
     4d2:	d0 e1       	ldi	r29, 0x10	; 16
     4d4:	f8 01       	movw	r30, r16
     4d6:	d6 83       	std	Z+6, r29	; 0x06
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     4d8:	87 ec       	ldi	r24, 0xC7	; 199
     4da:	90 e0       	ldi	r25, 0x00	; 0
     4dc:	01 97       	sbiw	r24, 0x01	; 1
     4de:	f1 f7       	brne	.-4      	; 0x4dc <adsWREG+0x1c>
     4e0:	00 c0       	rjmp	.+0      	; 0x4e2 <adsWREG+0x22>
     4e2:	00 00       	nop
	_delay_us    (25);
	transfer(_SDATAC); //SDATAC
     4e4:	81 e1       	ldi	r24, 0x11	; 17
     4e6:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
	transfer(opcode1);
     4ea:	8c 2f       	mov	r24, r28
     4ec:	8f 71       	andi	r24, 0x1F	; 31
     4ee:	80 5c       	subi	r24, 0xC0	; 192
     4f0:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
	transfer(0x00);
     4f4:	80 e0       	ldi	r24, 0x00	; 0
     4f6:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
	transfer(data);
     4fa:	8f 2d       	mov	r24, r15
     4fc:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
	transfer(_RDATAC);
     500:	80 e1       	ldi	r24, 0x10	; 16
     502:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     506:	9f ef       	ldi	r25, 0xFF	; 255
     508:	e9 ef       	ldi	r30, 0xF9	; 249
     50a:	f0 e0       	ldi	r31, 0x00	; 0
     50c:	91 50       	subi	r25, 0x01	; 1
     50e:	e0 40       	sbci	r30, 0x00	; 0
     510:	f0 40       	sbci	r31, 0x00	; 0
     512:	e1 f7       	brne	.-8      	; 0x50c <adsWREG+0x4c>
     514:	00 c0       	rjmp	.+0      	; 0x516 <adsWREG+0x56>
     516:	00 00       	nop
	_delay_ms    (10);
	ADSspi_CShigh();
     518:	f8 01       	movw	r30, r16
     51a:	d5 83       	std	Z+5, r29	; 0x05
	return;
}
     51c:	df 91       	pop	r29
     51e:	cf 91       	pop	r28
     520:	1f 91       	pop	r17
     522:	0f 91       	pop	r16
     524:	ff 90       	pop	r15
     526:	08 95       	ret

00000528 <adsGetData>:


void adsGetData(){
     528:	0f 93       	push	r16
     52a:	1f 93       	push	r17
     52c:	cf 93       	push	r28
     52e:	df 93       	push	r29
	if(ADSnewData){
     530:	80 91 17 43 	lds	r24, 0x4317	; 0x804317 <ADSnewData>
     534:	88 23       	and	r24, r24
     536:	09 f4       	brne	.+2      	; 0x53a <adsGetData+0x12>
     538:	69 c0       	rjmp	.+210    	; 0x60c <adsGetData+0xe4>
		samples_got++;
     53a:	60 91 3b 43 	lds	r22, 0x433B	; 0x80433b <samples_got>
     53e:	70 91 3c 43 	lds	r23, 0x433C	; 0x80433c <samples_got+0x1>
     542:	80 91 3d 43 	lds	r24, 0x433D	; 0x80433d <samples_got+0x2>
     546:	90 91 3e 43 	lds	r25, 0x433E	; 0x80433e <samples_got+0x3>
     54a:	20 e0       	ldi	r18, 0x00	; 0
     54c:	30 e0       	ldi	r19, 0x00	; 0
     54e:	40 e8       	ldi	r20, 0x80	; 128
     550:	5f e3       	ldi	r21, 0x3F	; 63
     552:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__addsf3>
     556:	60 93 3b 43 	sts	0x433B, r22	; 0x80433b <samples_got>
     55a:	70 93 3c 43 	sts	0x433C, r23	; 0x80433c <samples_got+0x1>
     55e:	80 93 3d 43 	sts	0x433D, r24	; 0x80433d <samples_got+0x2>
     562:	90 93 3e 43 	sts	0x433E, r25	; 0x80433e <samples_got+0x3>
		ADSspi_CSlow();
     566:	80 e1       	ldi	r24, 0x10	; 16
     568:	80 93 66 06 	sts	0x0666, r24	; 0x800666 <__TEXT_REGION_LENGTH__+0x700666>
     56c:	cf e9       	ldi	r28, 0x9F	; 159
     56e:	d5 e4       	ldi	r29, 0x45	; 69
     570:	0a eb       	ldi	r16, 0xBA	; 186
     572:	15 e4       	ldi	r17, 0x45	; 69
		int i;
		for ( i=0; i<SAMPLE_SIZE-1;i++)
		{
			sample[i] = transfer(0x00);
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	0e 94 8c 01 	call	0x318	; 0x318 <transfer>
     57a:	89 93       	st	Y+, r24
void adsGetData(){
	if(ADSnewData){
		samples_got++;
		ADSspi_CSlow();
		int i;
		for ( i=0; i<SAMPLE_SIZE-1;i++)
     57c:	c0 17       	cp	r28, r16
     57e:	d1 07       	cpc	r29, r17
     580:	c9 f7       	brne	.-14     	; 0x574 <adsGetData+0x4c>
		{
			sample_count = 65;
		}
*/		
		
		sample[i] = trigger;
     582:	80 91 47 43 	lds	r24, 0x4347	; 0x804347 <trigger>
     586:	80 93 ba 45 	sts	0x45BA, r24	; 0x8045ba <sample+0x1b>

		if (SD_DataBuffPutSample(sample)==0) //buffer full condition
     58a:	8f e9       	ldi	r24, 0x9F	; 159
     58c:	95 e4       	ldi	r25, 0x45	; 69
     58e:	0e 94 41 03 	call	0x682	; 0x682 <SD_DataBuffPutSample>
     592:	81 11       	cpse	r24, r1
     594:	16 c0       	rjmp	.+44     	; 0x5c2 <adsGetData+0x9a>
		{
			sd_buff_miss++;
     596:	60 91 9b 45 	lds	r22, 0x459B	; 0x80459b <sd_buff_miss>
     59a:	70 91 9c 45 	lds	r23, 0x459C	; 0x80459c <sd_buff_miss+0x1>
     59e:	80 91 9d 45 	lds	r24, 0x459D	; 0x80459d <sd_buff_miss+0x2>
     5a2:	90 91 9e 45 	lds	r25, 0x459E	; 0x80459e <sd_buff_miss+0x3>
     5a6:	20 e0       	ldi	r18, 0x00	; 0
     5a8:	30 e0       	ldi	r19, 0x00	; 0
     5aa:	40 e8       	ldi	r20, 0x80	; 128
     5ac:	5f e3       	ldi	r21, 0x3F	; 63
     5ae:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__addsf3>
     5b2:	60 93 9b 45 	sts	0x459B, r22	; 0x80459b <sd_buff_miss>
     5b6:	70 93 9c 45 	sts	0x459C, r23	; 0x80459c <sd_buff_miss+0x1>
     5ba:	80 93 9d 45 	sts	0x459D, r24	; 0x80459d <sd_buff_miss+0x2>
     5be:	90 93 9e 45 	sts	0x459E, r25	; 0x80459e <sd_buff_miss+0x3>
			//uart_send_serial_str("b\n\r");
			//uart_send_char_serial('\n');
			//uart_send_char_serial('\r');
		}

		if (BL_DataBuffPutSample(sample)==0) //buffer full condition
     5c2:	8f e9       	ldi	r24, 0x9F	; 159
     5c4:	95 e4       	ldi	r25, 0x45	; 69
     5c6:	0e 94 0b 03 	call	0x616	; 0x616 <BL_DataBuffPutSample>
     5ca:	81 11       	cpse	r24, r1
     5cc:	16 c0       	rjmp	.+44     	; 0x5fa <adsGetData+0xd2>
		{
			bl_buff_miss++;
     5ce:	60 91 6b 45 	lds	r22, 0x456B	; 0x80456b <bl_buff_miss>
     5d2:	70 91 6c 45 	lds	r23, 0x456C	; 0x80456c <bl_buff_miss+0x1>
     5d6:	80 91 6d 45 	lds	r24, 0x456D	; 0x80456d <bl_buff_miss+0x2>
     5da:	90 91 6e 45 	lds	r25, 0x456E	; 0x80456e <bl_buff_miss+0x3>
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	30 e0       	ldi	r19, 0x00	; 0
     5e2:	40 e8       	ldi	r20, 0x80	; 128
     5e4:	5f e3       	ldi	r21, 0x3F	; 63
     5e6:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__addsf3>
     5ea:	60 93 6b 45 	sts	0x456B, r22	; 0x80456b <bl_buff_miss>
     5ee:	70 93 6c 45 	sts	0x456C, r23	; 0x80456c <bl_buff_miss+0x1>
     5f2:	80 93 6d 45 	sts	0x456D, r24	; 0x80456d <bl_buff_miss+0x2>
     5f6:	90 93 6e 45 	sts	0x456E, r25	; 0x80456e <bl_buff_miss+0x3>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     5fa:	85 e3       	ldi	r24, 0x35	; 53
     5fc:	8a 95       	dec	r24
     5fe:	f1 f7       	brne	.-4      	; 0x5fc <adsGetData+0xd4>
     600:	00 00       	nop
			//uart_send_char_serial('\n');
			//uart_send_char_serial('\r');
		}

		_delay_us    (5);
		ADSspi_CShigh();
     602:	80 e1       	ldi	r24, 0x10	; 16
     604:	80 93 65 06 	sts	0x0665, r24	; 0x800665 <__TEXT_REGION_LENGTH__+0x700665>
		ADSnewData = false;
     608:	10 92 17 43 	sts	0x4317, r1	; 0x804317 <ADSnewData>
		
	}
     60c:	df 91       	pop	r29
     60e:	cf 91       	pop	r28
     610:	1f 91       	pop	r17
     612:	0f 91       	pop	r16
     614:	08 95       	ret

00000616 <BL_DataBuffPutSample>:
		uart_send_char_serial('\n');
		uart_send_char_serial('\r');
	}
	
	memset(new_cmd,'\0',COMMAND_WIDTH_MAX);
	new_cmd_index = 0;
     616:	cf 93       	push	r28
     618:	df 93       	push	r29
     61a:	48 2f       	mov	r20, r24
     61c:	c0 91 df 45 	lds	r28, 0x45DF	; 0x8045df <BL_databuff_head>
     620:	d0 91 e0 45 	lds	r29, 0x45E0	; 0x8045e0 <BL_databuff_head+0x1>
     624:	21 96       	adiw	r28, 0x01	; 1
     626:	cf 73       	andi	r28, 0x3F	; 63
     628:	dd 27       	eor	r29, r29
     62a:	20 91 84 45 	lds	r18, 0x4584	; 0x804584 <BL_databuff_tail>
     62e:	30 91 85 45 	lds	r19, 0x4585	; 0x804585 <BL_databuff_tail+0x1>
     632:	81 e0       	ldi	r24, 0x01	; 1
     634:	c2 17       	cp	r28, r18
     636:	d3 07       	cpc	r29, r19
     638:	09 f4       	brne	.+2      	; 0x63c <BL_DataBuffPutSample+0x26>
     63a:	80 e0       	ldi	r24, 0x00	; 0
     63c:	c2 17       	cp	r28, r18
     63e:	d3 07       	cpc	r29, r19
     640:	e9 f0       	breq	.+58     	; 0x67c <BL_DataBuffPutSample+0x66>
     642:	a4 2f       	mov	r26, r20
     644:	b9 2f       	mov	r27, r25
     646:	20 e0       	ldi	r18, 0x00	; 0
     648:	30 e0       	ldi	r19, 0x00	; 0
     64a:	6c e1       	ldi	r22, 0x1C	; 28
     64c:	40 91 df 45 	lds	r20, 0x45DF	; 0x8045df <BL_databuff_head>
     650:	50 91 e0 45 	lds	r21, 0x45E0	; 0x8045e0 <BL_databuff_head+0x1>
     654:	9d 91       	ld	r25, X+
     656:	64 9f       	mul	r22, r20
     658:	f0 01       	movw	r30, r0
     65a:	65 9f       	mul	r22, r21
     65c:	f0 0d       	add	r31, r0
     65e:	11 24       	eor	r1, r1
     660:	ee 51       	subi	r30, 0x1E	; 30
     662:	ff 4d       	sbci	r31, 0xDF	; 223
     664:	e2 0f       	add	r30, r18
     666:	f3 1f       	adc	r31, r19
     668:	90 83       	st	Z, r25
     66a:	2f 5f       	subi	r18, 0xFF	; 255
     66c:	3f 4f       	sbci	r19, 0xFF	; 255
     66e:	2c 31       	cpi	r18, 0x1C	; 28
     670:	31 05       	cpc	r19, r1
     672:	61 f7       	brne	.-40     	; 0x64c <BL_DataBuffPutSample+0x36>
     674:	c0 93 df 45 	sts	0x45DF, r28	; 0x8045df <BL_databuff_head>
     678:	d0 93 e0 45 	sts	0x45E0, r29	; 0x8045e0 <BL_databuff_head+0x1>
     67c:	df 91       	pop	r29
     67e:	cf 91       	pop	r28
     680:	08 95       	ret

00000682 <SD_DataBuffPutSample>:
     682:	7f 92       	push	r7
     684:	8f 92       	push	r8
     686:	9f 92       	push	r9
     688:	af 92       	push	r10
     68a:	bf 92       	push	r11
     68c:	cf 92       	push	r12
     68e:	df 92       	push	r13
     690:	ef 92       	push	r14
     692:	ff 92       	push	r15
     694:	0f 93       	push	r16
     696:	1f 93       	push	r17
     698:	cf 93       	push	r28
     69a:	df 93       	push	r29
     69c:	e0 90 39 43 	lds	r14, 0x4339	; 0x804339 <SD_databuff_head>
     6a0:	f0 90 3a 43 	lds	r15, 0x433A	; 0x80433a <SD_databuff_head+0x1>
     6a4:	2f ef       	ldi	r18, 0xFF	; 255
     6a6:	e2 1a       	sub	r14, r18
     6a8:	f2 0a       	sbc	r15, r18
     6aa:	4f e3       	ldi	r20, 0x3F	; 63
     6ac:	e4 22       	and	r14, r20
     6ae:	ff 24       	eor	r15, r15
     6b0:	20 91 37 43 	lds	r18, 0x4337	; 0x804337 <SD_databuff_tail>
     6b4:	30 91 38 43 	lds	r19, 0x4338	; 0x804338 <SD_databuff_tail+0x1>
     6b8:	77 24       	eor	r7, r7
     6ba:	73 94       	inc	r7
     6bc:	e2 16       	cp	r14, r18
     6be:	f3 06       	cpc	r15, r19
     6c0:	09 f4       	brne	.+2      	; 0x6c4 <SD_DataBuffPutSample+0x42>
     6c2:	71 2c       	mov	r7, r1
     6c4:	e2 16       	cp	r14, r18
     6c6:	f3 06       	cpc	r15, r19
     6c8:	09 f4       	brne	.+2      	; 0x6cc <SD_DataBuffPutSample+0x4a>
     6ca:	aa c0       	rjmp	.+340    	; 0x820 <SD_DataBuffPutSample+0x19e>
     6cc:	6c 01       	movw	r12, r24
     6ce:	ec 01       	movw	r28, r24
     6d0:	8c 01       	movw	r16, r24
     6d2:	05 5e       	subi	r16, 0xE5	; 229
     6d4:	1f 4f       	sbci	r17, 0xFF	; 255
     6d6:	a1 2c       	mov	r10, r1
     6d8:	b1 2c       	mov	r11, r1
     6da:	0f 2e       	mov	r0, r31
     6dc:	f4 e6       	ldi	r31, 0x64	; 100
     6de:	9f 2e       	mov	r9, r31
     6e0:	f0 2d       	mov	r31, r0
     6e2:	0f 2e       	mov	r0, r31
     6e4:	fc e2       	ldi	r31, 0x2C	; 44
     6e6:	8f 2e       	mov	r8, r31
     6e8:	f0 2d       	mov	r31, r0
     6ea:	28 81       	ld	r18, Y
     6ec:	69 81       	ldd	r22, Y+1	; 0x01
     6ee:	86 2f       	mov	r24, r22
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	a0 e0       	ldi	r26, 0x00	; 0
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ba 2f       	mov	r27, r26
     6f8:	a9 2f       	mov	r26, r25
     6fa:	98 2f       	mov	r25, r24
     6fc:	88 27       	eor	r24, r24
     6fe:	a2 2b       	or	r26, r18
     700:	2a 81       	ldd	r18, Y+2	; 0x02
     702:	bc 01       	movw	r22, r24
     704:	cd 01       	movw	r24, r26
     706:	62 2b       	or	r22, r18
     708:	60 93 26 43 	sts	0x4326, r22	; 0x804326 <val>
     70c:	70 93 27 43 	sts	0x4327, r23	; 0x804327 <val+0x1>
     710:	80 93 28 43 	sts	0x4328, r24	; 0x804328 <val+0x2>
     714:	90 93 29 43 	sts	0x4329, r25	; 0x804329 <val+0x3>
     718:	2a e0       	ldi	r18, 0x0A	; 10
     71a:	4a e2       	ldi	r20, 0x2A	; 42
     71c:	53 e4       	ldi	r21, 0x43	; 67
     71e:	0e 94 a1 23 	call	0x4742	; 0x4742 <__ltoa_ncheck>
     722:	80 91 2a 43 	lds	r24, 0x432A	; 0x80432a <buffer>
     726:	81 11       	cpse	r24, r1
     728:	65 c0       	rjmp	.+202    	; 0x7f4 <SD_DataBuffPutSample+0x172>
     72a:	c5 01       	movw	r24, r10
     72c:	18 c0       	rjmp	.+48     	; 0x75e <SD_DataBuffPutSample+0xdc>
     72e:	60 91 39 43 	lds	r22, 0x4339	; 0x804339 <SD_databuff_head>
     732:	70 91 3a 43 	lds	r23, 0x433A	; 0x80433a <SD_databuff_head+0x1>
     736:	96 9e       	mul	r9, r22
     738:	90 01       	movw	r18, r0
     73a:	97 9e       	mul	r9, r23
     73c:	30 0d       	add	r19, r0
     73e:	11 24       	eor	r1, r1
     740:	2d 51       	subi	r18, 0x1D	; 29
     742:	38 4d       	sbci	r19, 0xD8	; 216
     744:	d9 01       	movw	r26, r18
     746:	a4 0f       	add	r26, r20
     748:	b5 1f       	adc	r27, r21
     74a:	bc 92       	st	X, r11
     74c:	4f 5f       	subi	r20, 0xFF	; 255
     74e:	5f 4f       	sbci	r21, 0xFF	; 255
     750:	48 17       	cp	r20, r24
     752:	59 07       	cpc	r21, r25
     754:	21 f0       	breq	.+8      	; 0x75e <SD_DataBuffPutSample+0xdc>
     756:	b1 90       	ld	r11, Z+
     758:	b1 10       	cpse	r11, r1
     75a:	e9 cf       	rjmp	.-46     	; 0x72e <SD_DataBuffPutSample+0xac>
     75c:	ca 01       	movw	r24, r20
     75e:	20 91 39 43 	lds	r18, 0x4339	; 0x804339 <SD_databuff_head>
     762:	30 91 3a 43 	lds	r19, 0x433A	; 0x80433a <SD_databuff_head+0x1>
     766:	5c 01       	movw	r10, r24
     768:	ef ef       	ldi	r30, 0xFF	; 255
     76a:	ae 1a       	sub	r10, r30
     76c:	be 0a       	sbc	r11, r30
     76e:	92 9e       	mul	r9, r18
     770:	f0 01       	movw	r30, r0
     772:	93 9e       	mul	r9, r19
     774:	f0 0d       	add	r31, r0
     776:	11 24       	eor	r1, r1
     778:	ed 51       	subi	r30, 0x1D	; 29
     77a:	f8 4d       	sbci	r31, 0xD8	; 216
     77c:	e8 0f       	add	r30, r24
     77e:	f9 1f       	adc	r31, r25
     780:	80 82       	st	Z, r8
     782:	23 96       	adiw	r28, 0x03	; 3
     784:	c0 17       	cp	r28, r16
     786:	d1 07       	cpc	r29, r17
     788:	09 f0       	breq	.+2      	; 0x78c <SD_DataBuffPutSample+0x10a>
     78a:	af cf       	rjmp	.-162    	; 0x6ea <SD_DataBuffPutSample+0x68>
     78c:	40 91 39 43 	lds	r20, 0x4339	; 0x804339 <SD_databuff_head>
     790:	50 91 3a 43 	lds	r21, 0x433A	; 0x80433a <SD_databuff_head+0x1>
     794:	f6 01       	movw	r30, r12
     796:	33 8d       	ldd	r19, Z+27	; 0x1b
     798:	24 e6       	ldi	r18, 0x64	; 100
     79a:	24 9f       	mul	r18, r20
     79c:	f0 01       	movw	r30, r0
     79e:	25 9f       	mul	r18, r21
     7a0:	f0 0d       	add	r31, r0
     7a2:	11 24       	eor	r1, r1
     7a4:	ed 51       	subi	r30, 0x1D	; 29
     7a6:	f8 4d       	sbci	r31, 0xD8	; 216
     7a8:	ea 0d       	add	r30, r10
     7aa:	fb 1d       	adc	r31, r11
     7ac:	30 83       	st	Z, r19
     7ae:	40 91 39 43 	lds	r20, 0x4339	; 0x804339 <SD_databuff_head>
     7b2:	50 91 3a 43 	lds	r21, 0x433A	; 0x80433a <SD_databuff_head+0x1>
     7b6:	24 9f       	mul	r18, r20
     7b8:	f0 01       	movw	r30, r0
     7ba:	25 9f       	mul	r18, r21
     7bc:	f0 0d       	add	r31, r0
     7be:	11 24       	eor	r1, r1
     7c0:	e8 0f       	add	r30, r24
     7c2:	f9 1f       	adc	r31, r25
     7c4:	eb 51       	subi	r30, 0x1B	; 27
     7c6:	f8 4d       	sbci	r31, 0xD8	; 216
     7c8:	3d e0       	ldi	r19, 0x0D	; 13
     7ca:	30 83       	st	Z, r19
     7cc:	40 91 39 43 	lds	r20, 0x4339	; 0x804339 <SD_databuff_head>
     7d0:	50 91 3a 43 	lds	r21, 0x433A	; 0x80433a <SD_databuff_head+0x1>
     7d4:	24 9f       	mul	r18, r20
     7d6:	f0 01       	movw	r30, r0
     7d8:	25 9f       	mul	r18, r21
     7da:	f0 0d       	add	r31, r0
     7dc:	11 24       	eor	r1, r1
     7de:	8e 0f       	add	r24, r30
     7e0:	9f 1f       	adc	r25, r31
     7e2:	fc 01       	movw	r30, r24
     7e4:	ea 51       	subi	r30, 0x1A	; 26
     7e6:	f8 4d       	sbci	r31, 0xD8	; 216
     7e8:	10 82       	st	Z, r1
     7ea:	e0 92 39 43 	sts	0x4339, r14	; 0x804339 <SD_databuff_head>
     7ee:	f0 92 3a 43 	sts	0x433A, r15	; 0x80433a <SD_databuff_head+0x1>
     7f2:	16 c0       	rjmp	.+44     	; 0x820 <SD_DataBuffPutSample+0x19e>
     7f4:	20 91 39 43 	lds	r18, 0x4339	; 0x804339 <SD_databuff_head>
     7f8:	30 91 3a 43 	lds	r19, 0x433A	; 0x80433a <SD_databuff_head+0x1>
     7fc:	92 9e       	mul	r9, r18
     7fe:	f0 01       	movw	r30, r0
     800:	93 9e       	mul	r9, r19
     802:	f0 0d       	add	r31, r0
     804:	11 24       	eor	r1, r1
     806:	ed 51       	subi	r30, 0x1D	; 29
     808:	f8 4d       	sbci	r31, 0xD8	; 216
     80a:	ea 0d       	add	r30, r10
     80c:	fb 1d       	adc	r31, r11
     80e:	80 83       	st	Z, r24
     810:	a5 01       	movw	r20, r10
     812:	4f 5f       	subi	r20, 0xFF	; 255
     814:	5f 4f       	sbci	r21, 0xFF	; 255
     816:	eb e2       	ldi	r30, 0x2B	; 43
     818:	f3 e4       	ldi	r31, 0x43	; 67
     81a:	c5 01       	movw	r24, r10
     81c:	0a 96       	adiw	r24, 0x0a	; 10
     81e:	9b cf       	rjmp	.-202    	; 0x756 <SD_DataBuffPutSample+0xd4>
     820:	87 2d       	mov	r24, r7
     822:	df 91       	pop	r29
     824:	cf 91       	pop	r28
     826:	1f 91       	pop	r17
     828:	0f 91       	pop	r16
     82a:	ff 90       	pop	r15
     82c:	ef 90       	pop	r14
     82e:	df 90       	pop	r13
     830:	cf 90       	pop	r12
     832:	bf 90       	pop	r11
     834:	af 90       	pop	r10
     836:	9f 90       	pop	r9
     838:	8f 90       	pop	r8
     83a:	7f 90       	pop	r7
     83c:	08 95       	ret

0000083e <uart_send_BT_sample>:
     83e:	cf 93       	push	r28
     840:	20 91 df 45 	lds	r18, 0x45DF	; 0x8045df <BL_databuff_head>
     844:	30 91 e0 45 	lds	r19, 0x45E0	; 0x8045e0 <BL_databuff_head+0x1>
     848:	80 91 84 45 	lds	r24, 0x4584	; 0x804584 <BL_databuff_tail>
     84c:	90 91 85 45 	lds	r25, 0x4585	; 0x804585 <BL_databuff_tail+0x1>
     850:	28 17       	cp	r18, r24
     852:	39 07       	cpc	r19, r25
     854:	61 f1       	breq	.+88     	; 0x8ae <uart_send_BT_sample+0x70>
     856:	cc e1       	ldi	r28, 0x1C	; 28
     858:	20 91 84 45 	lds	r18, 0x4584	; 0x804584 <BL_databuff_tail>
     85c:	30 91 85 45 	lds	r19, 0x4585	; 0x804585 <BL_databuff_tail+0x1>
     860:	c2 9f       	mul	r28, r18
     862:	c0 01       	movw	r24, r0
     864:	c3 9f       	mul	r28, r19
     866:	90 0d       	add	r25, r0
     868:	11 24       	eor	r1, r1
     86a:	6c e1       	ldi	r22, 0x1C	; 28
     86c:	70 e0       	ldi	r23, 0x00	; 0
     86e:	8e 51       	subi	r24, 0x1E	; 30
     870:	9f 4d       	sbci	r25, 0xDF	; 223
     872:	0e 94 7c 21 	call	0x42f8	; 0x42f8 <uart_send_BT>
     876:	8a e0       	ldi	r24, 0x0A	; 10
     878:	0e 94 8d 21 	call	0x431a	; 0x431a <uart_send_char_BT>
     87c:	8d e0       	ldi	r24, 0x0D	; 13
     87e:	0e 94 8d 21 	call	0x431a	; 0x431a <uart_send_char_BT>
     882:	80 91 84 45 	lds	r24, 0x4584	; 0x804584 <BL_databuff_tail>
     886:	90 91 85 45 	lds	r25, 0x4585	; 0x804585 <BL_databuff_tail+0x1>
     88a:	01 96       	adiw	r24, 0x01	; 1
     88c:	8f 73       	andi	r24, 0x3F	; 63
     88e:	99 27       	eor	r25, r25
     890:	80 93 84 45 	sts	0x4584, r24	; 0x804584 <BL_databuff_tail>
     894:	90 93 85 45 	sts	0x4585, r25	; 0x804585 <BL_databuff_tail+0x1>
     898:	20 91 df 45 	lds	r18, 0x45DF	; 0x8045df <BL_databuff_head>
     89c:	30 91 e0 45 	lds	r19, 0x45E0	; 0x8045e0 <BL_databuff_head+0x1>
     8a0:	80 91 84 45 	lds	r24, 0x4584	; 0x804584 <BL_databuff_tail>
     8a4:	90 91 85 45 	lds	r25, 0x4585	; 0x804585 <BL_databuff_tail+0x1>
     8a8:	28 17       	cp	r18, r24
     8aa:	39 07       	cpc	r19, r25
     8ac:	a9 f6       	brne	.-86     	; 0x858 <uart_send_BT_sample+0x1a>
     8ae:	cf 91       	pop	r28
     8b0:	08 95       	ret

000008b2 <SPI_send_SD_str>:
     8b2:	cf 93       	push	r28
     8b4:	df 93       	push	r29
     8b6:	c8 2f       	mov	r28, r24
     8b8:	d9 2f       	mov	r29, r25
     8ba:	41 e0       	ldi	r20, 0x01	; 1
     8bc:	62 e4       	ldi	r22, 0x42	; 66
     8be:	70 e2       	ldi	r23, 0x20	; 32
     8c0:	88 ee       	ldi	r24, 0xE8	; 232
     8c2:	90 e4       	ldi	r25, 0x40	; 64
     8c4:	0e 94 0c 13 	call	0x2618	; 0x2618 <f_mount>
     8c8:	81 11       	cpse	r24, r1
     8ca:	19 c0       	rjmp	.+50     	; 0x8fe <SPI_send_SD_str+0x4c>
     8cc:	42 e3       	ldi	r20, 0x32	; 50
     8ce:	65 e2       	ldi	r22, 0x25	; 37
     8d0:	70 e2       	ldi	r23, 0x20	; 32
     8d2:	89 e4       	ldi	r24, 0x49	; 73
     8d4:	93 e4       	ldi	r25, 0x43	; 67
     8d6:	0e 94 4e 13 	call	0x269c	; 0x269c <f_open>
     8da:	81 11       	cpse	r24, r1
     8dc:	10 c0       	rjmp	.+32     	; 0x8fe <SPI_send_SD_str+0x4c>
     8de:	df 93       	push	r29
     8e0:	cf 93       	push	r28
     8e2:	89 e4       	ldi	r24, 0x49	; 73
     8e4:	93 e4       	ldi	r25, 0x43	; 67
     8e6:	9f 93       	push	r25
     8e8:	8f 93       	push	r24
     8ea:	0e 94 06 18 	call	0x300c	; 0x300c <f_printf>
     8ee:	89 e4       	ldi	r24, 0x49	; 73
     8f0:	93 e4       	ldi	r25, 0x43	; 67
     8f2:	0e 94 e7 17 	call	0x2fce	; 0x2fce <f_close>
     8f6:	0f 90       	pop	r0
     8f8:	0f 90       	pop	r0
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	df 91       	pop	r29
     900:	cf 91       	pop	r28
     902:	08 95       	ret

00000904 <SD_clear>:
     904:	41 e0       	ldi	r20, 0x01	; 1
     906:	62 e4       	ldi	r22, 0x42	; 66
     908:	70 e2       	ldi	r23, 0x20	; 32
     90a:	88 ee       	ldi	r24, 0xE8	; 232
     90c:	90 e4       	ldi	r25, 0x40	; 64
     90e:	0e 94 0c 13 	call	0x2618	; 0x2618 <f_mount>
     912:	81 11       	cpse	r24, r1
     914:	1b c0       	rjmp	.+54     	; 0x94c <SD_clear+0x48>
     916:	4a e0       	ldi	r20, 0x0A	; 10
     918:	65 e2       	ldi	r22, 0x25	; 37
     91a:	70 e2       	ldi	r23, 0x20	; 32
     91c:	89 e4       	ldi	r24, 0x49	; 73
     91e:	93 e4       	ldi	r25, 0x43	; 67
     920:	0e 94 4e 13 	call	0x269c	; 0x269c <f_open>
     924:	81 11       	cpse	r24, r1
     926:	12 c0       	rjmp	.+36     	; 0x94c <SD_clear+0x48>
     928:	8e e2       	ldi	r24, 0x2E	; 46
     92a:	90 e2       	ldi	r25, 0x20	; 32
     92c:	9f 93       	push	r25
     92e:	8f 93       	push	r24
     930:	89 e4       	ldi	r24, 0x49	; 73
     932:	93 e4       	ldi	r25, 0x43	; 67
     934:	9f 93       	push	r25
     936:	8f 93       	push	r24
     938:	0e 94 06 18 	call	0x300c	; 0x300c <f_printf>
     93c:	89 e4       	ldi	r24, 0x49	; 73
     93e:	93 e4       	ldi	r25, 0x43	; 67
     940:	0e 94 e7 17 	call	0x2fce	; 0x2fce <f_close>
     944:	0f 90       	pop	r0
     946:	0f 90       	pop	r0
     948:	0f 90       	pop	r0
     94a:	0f 90       	pop	r0
     94c:	08 95       	ret

0000094e <process_bl_command>:


//process the command in the new_cmd buffer and clear the buffer
void process_bl_command(void)
{
	if (strstr(new_bl_cmd,"A") == new_bl_cmd)
     94e:	61 e4       	ldi	r22, 0x41	; 65
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	8f e6       	ldi	r24, 0x6F	; 111
     954:	95 e4       	ldi	r25, 0x45	; 69
     956:	0e 94 96 23 	call	0x472c	; 0x472c <strchr>
     95a:	8f 56       	subi	r24, 0x6F	; 111
     95c:	95 44       	sbci	r25, 0x45	; 69
     95e:	29 f4       	brne	.+10     	; 0x96a <process_bl_command+0x1c>
	{
		//uart_send_serial_str("command is idle");
		//uart_send_char_serial('\n');
		//uart_send_char_serial('\r');
		app_state = IDLE;
     960:	10 92 3f 43 	sts	0x433F, r1	; 0x80433f <app_state>
     964:	10 92 40 43 	sts	0x4340, r1	; 0x804340 <app_state+0x1>
     968:	58 c0       	rjmp	.+176    	; 0xa1a <process_bl_command+0xcc>
	}else if (strstr(new_bl_cmd,"B") == new_bl_cmd)
     96a:	62 e4       	ldi	r22, 0x42	; 66
     96c:	70 e0       	ldi	r23, 0x00	; 0
     96e:	8f e6       	ldi	r24, 0x6F	; 111
     970:	95 e4       	ldi	r25, 0x45	; 69
     972:	0e 94 96 23 	call	0x472c	; 0x472c <strchr>
     976:	8f 56       	subi	r24, 0x6F	; 111
     978:	95 44       	sbci	r25, 0x45	; 69
     97a:	39 f4       	brne	.+14     	; 0x98a <process_bl_command+0x3c>
	{
		//uart_send_serial_str("command is crm");
		//uart_send_char_serial('\n');
		//uart_send_char_serial('\r');
		app_state = CRM_SETUP;
     97c:	81 e0       	ldi	r24, 0x01	; 1
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	80 93 3f 43 	sts	0x433F, r24	; 0x80433f <app_state>
     984:	90 93 40 43 	sts	0x4340, r25	; 0x804340 <app_state+0x1>
     988:	48 c0       	rjmp	.+144    	; 0xa1a <process_bl_command+0xcc>
	}else if (strstr(new_bl_cmd,"C") == new_bl_cmd)
     98a:	63 e4       	ldi	r22, 0x43	; 67
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	8f e6       	ldi	r24, 0x6F	; 111
     990:	95 e4       	ldi	r25, 0x45	; 69
     992:	0e 94 96 23 	call	0x472c	; 0x472c <strchr>
     996:	8f 56       	subi	r24, 0x6F	; 111
     998:	95 44       	sbci	r25, 0x45	; 69
     99a:	21 f4       	brne	.+8      	; 0x9a4 <process_bl_command+0x56>
	{
		//uart_send_serial_str("leadoff setup\n\r");
		//uart_send_char_serial('\n');
		//uart_send_char_serial('\r');
		leadoff_enable = true;
     99c:	81 e0       	ldi	r24, 0x01	; 1
     99e:	80 93 48 43 	sts	0x4348, r24	; 0x804348 <leadoff_enable>
     9a2:	3b c0       	rjmp	.+118    	; 0xa1a <process_bl_command+0xcc>
	}else if (strstr(new_bl_cmd,"D") == new_bl_cmd)
     9a4:	64 e4       	ldi	r22, 0x44	; 68
     9a6:	70 e0       	ldi	r23, 0x00	; 0
     9a8:	8f e6       	ldi	r24, 0x6F	; 111
     9aa:	95 e4       	ldi	r25, 0x45	; 69
     9ac:	0e 94 96 23 	call	0x472c	; 0x472c <strchr>
     9b0:	8f 56       	subi	r24, 0x6F	; 111
     9b2:	95 44       	sbci	r25, 0x45	; 69
     9b4:	21 f4       	brne	.+8      	; 0x9be <process_bl_command+0x70>
	{
		//uart_send_serial_str("leadoff disable\n\r");
		//uart_send_char_serial('\n');
		//uart_send_char_serial('\r');
		leadoff_disable = true;
     9b6:	81 e0       	ldi	r24, 0x01	; 1
     9b8:	80 93 22 43 	sts	0x4322, r24	; 0x804322 <leadoff_disable>
     9bc:	2e c0       	rjmp	.+92     	; 0xa1a <process_bl_command+0xcc>
	}else if (strstr(new_bl_cmd,"E") == new_bl_cmd)
     9be:	65 e4       	ldi	r22, 0x45	; 69
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	8f e6       	ldi	r24, 0x6F	; 111
     9c4:	95 e4       	ldi	r25, 0x45	; 69
     9c6:	0e 94 96 23 	call	0x472c	; 0x472c <strchr>
     9ca:	8f 56       	subi	r24, 0x6F	; 111
     9cc:	95 44       	sbci	r25, 0x45	; 69
     9ce:	21 f4       	brne	.+8      	; 0x9d8 <process_bl_command+0x8a>
	{
		//uart_send_serial_str("leadoff setup\n\r");
		//uart_send_char_serial('\n');
		//uart_send_char_serial('\r');
		imp_enable = true;
     9d0:	81 e0       	ldi	r24, 0x01	; 1
     9d2:	80 93 e3 40 	sts	0x40E3, r24	; 0x8040e3 <imp_enable>
     9d6:	21 c0       	rjmp	.+66     	; 0xa1a <process_bl_command+0xcc>
	}else if (strstr(new_bl_cmd,"F") == new_bl_cmd)
     9d8:	66 e4       	ldi	r22, 0x46	; 70
     9da:	70 e0       	ldi	r23, 0x00	; 0
     9dc:	8f e6       	ldi	r24, 0x6F	; 111
     9de:	95 e4       	ldi	r25, 0x45	; 69
     9e0:	0e 94 96 23 	call	0x472c	; 0x472c <strchr>
     9e4:	8f 56       	subi	r24, 0x6F	; 111
     9e6:	95 44       	sbci	r25, 0x45	; 69
     9e8:	21 f4       	brne	.+8      	; 0x9f2 <process_bl_command+0xa4>
	{
		//uart_send_serial_str("leadoff disable\n\r");
		//uart_send_char_serial('\n');
		//uart_send_char_serial('\r');
		imp_disable = true;
     9ea:	81 e0       	ldi	r24, 0x01	; 1
     9ec:	80 93 9a 45 	sts	0x459A, r24	; 0x80459a <imp_disable>
     9f0:	14 c0       	rjmp	.+40     	; 0xa1a <process_bl_command+0xcc>
	}else
	{

		uart_send_serial_str("command ERROR");
     9f2:	84 e5       	ldi	r24, 0x54	; 84
     9f4:	90 e2       	ldi	r25, 0x20	; 32
     9f6:	0e 94 5e 21 	call	0x42bc	; 0x42bc <uart_send_serial_str>
		uart_send_char_serial('\n');
     9fa:	8a e0       	ldi	r24, 0x0A	; 10
     9fc:	0e 94 74 21 	call	0x42e8	; 0x42e8 <uart_send_char_serial>
		uart_send_char_serial('\r');
     a00:	8d e0       	ldi	r24, 0x0D	; 13
     a02:	0e 94 74 21 	call	0x42e8	; 0x42e8 <uart_send_char_serial>
		
		uart_send_serial_str(new_bl_cmd);
     a06:	8f e6       	ldi	r24, 0x6F	; 111
     a08:	95 e4       	ldi	r25, 0x45	; 69
     a0a:	0e 94 5e 21 	call	0x42bc	; 0x42bc <uart_send_serial_str>
		uart_send_char_serial('\n');
     a0e:	8a e0       	ldi	r24, 0x0A	; 10
     a10:	0e 94 74 21 	call	0x42e8	; 0x42e8 <uart_send_char_serial>
		uart_send_char_serial('\r');
     a14:	8d e0       	ldi	r24, 0x0D	; 13
     a16:	0e 94 74 21 	call	0x42e8	; 0x42e8 <uart_send_char_serial>
	}
	
	memset(new_bl_cmd,'\0',COMMAND_WIDTH_MAX);
     a1a:	84 e1       	ldi	r24, 0x14	; 20
     a1c:	ef e6       	ldi	r30, 0x6F	; 111
     a1e:	f5 e4       	ldi	r31, 0x45	; 69
     a20:	df 01       	movw	r26, r30
     a22:	1d 92       	st	X+, r1
     a24:	8a 95       	dec	r24
     a26:	e9 f7       	brne	.-6      	; 0xa22 <process_bl_command+0xd4>
	new_bl_cmd_index = 0;
     a28:	10 92 34 43 	sts	0x4334, r1	; 0x804334 <new_bl_cmd_index>
     a2c:	08 95       	ret

00000a2e <setup_ADS_dry_interrupt>:


void setup_ADS_dry_interrupt()
{
	//setup interrupt
	int_flag = false;
     a2e:	10 92 23 43 	sts	0x4323, r1	; 0x804323 <int_flag>
     a32:	10 92 24 43 	sts	0x4324, r1	; 0x804324 <int_flag+0x1>
	PORTD_DIRCLR = PIN0_bm;										//make as input pullup
     a36:	81 e0       	ldi	r24, 0x01	; 1
     a38:	80 93 62 06 	sts	0x0662, r24	; 0x800662 <__TEXT_REGION_LENGTH__+0x700662>
	PORTD_INTCTRL = PMIC_LOLVLEX_bm << PORT_INT0LVL_gp;
     a3c:	80 93 69 06 	sts	0x0669, r24	; 0x800669 <__TEXT_REGION_LENGTH__+0x700669>
	PORTD_INT0MASK = PIN0_bm;
     a40:	80 93 6a 06 	sts	0x066A, r24	; 0x80066a <__TEXT_REGION_LENGTH__+0x70066a>
	PORTD_INTFLAGS &=  PORT_INT0IF_bm;							//clear int flag
     a44:	ec e6       	ldi	r30, 0x6C	; 108
     a46:	f6 e0       	ldi	r31, 0x06	; 6
     a48:	80 81       	ld	r24, Z
     a4a:	81 70       	andi	r24, 0x01	; 1
     a4c:	80 83       	st	Z, r24
	PORTD_PIN0CTRL = PORT_OPC_PULLUP_gc|PORT_ISC_FALLING_gc;
     a4e:	8a e1       	ldi	r24, 0x1A	; 26
     a50:	80 93 70 06 	sts	0x0670, r24	; 0x800670 <__TEXT_REGION_LENGTH__+0x700670>
	drdy_count = 0;
     a54:	10 92 e4 40 	sts	0x40E4, r1	; 0x8040e4 <drdy_count>
     a58:	10 92 e5 40 	sts	0x40E5, r1	; 0x8040e5 <drdy_count+0x1>
     a5c:	10 92 e6 40 	sts	0x40E6, r1	; 0x8040e6 <drdy_count+0x2>
     a60:	10 92 e7 40 	sts	0x40E7, r1	; 0x8040e7 <drdy_count+0x3>
     a64:	08 95       	ret

00000a66 <disable_ADS_dry_inerrupt>:
	//setup interrupt end
}

void disable_ADS_dry_inerrupt()
{
	PORTD_INTCTRL = 0x00 << PORT_INT0LVL_gp;					//disable
     a66:	10 92 69 06 	sts	0x0669, r1	; 0x800669 <__TEXT_REGION_LENGTH__+0x700669>
	PORTD_INTFLAGS &=  PORT_INT0IF_bm;							//clear int flag
     a6a:	ec e6       	ldi	r30, 0x6C	; 108
     a6c:	f6 e0       	ldi	r31, 0x06	; 6
     a6e:	80 81       	ld	r24, Z
     a70:	81 70       	andi	r24, 0x01	; 1
     a72:	80 83       	st	Z, r24
     a74:	08 95       	ret

00000a76 <__vector_64>:
}


ISR(PORTD_INT0_vect){
     a76:	1f 92       	push	r1
     a78:	0f 92       	push	r0
     a7a:	0f b6       	in	r0, 0x3f	; 63
     a7c:	0f 92       	push	r0
     a7e:	11 24       	eor	r1, r1
     a80:	0b b6       	in	r0, 0x3b	; 59
     a82:	0f 92       	push	r0
     a84:	2f 93       	push	r18
     a86:	3f 93       	push	r19
     a88:	4f 93       	push	r20
     a8a:	5f 93       	push	r21
     a8c:	6f 93       	push	r22
     a8e:	7f 93       	push	r23
     a90:	8f 93       	push	r24
     a92:	9f 93       	push	r25
     a94:	af 93       	push	r26
     a96:	bf 93       	push	r27
     a98:	ef 93       	push	r30
     a9a:	ff 93       	push	r31
	//PORTD_INTFLAGS &=  PORT_INT0IF_bm; //clear interrupt
	ADSnewData = true;
     a9c:	81 e0       	ldi	r24, 0x01	; 1
     a9e:	80 93 17 43 	sts	0x4317, r24	; 0x804317 <ADSnewData>
	
	if (PORTC.IN & 0x01)
     aa2:	80 91 48 06 	lds	r24, 0x0648	; 0x800648 <__TEXT_REGION_LENGTH__+0x700648>
     aa6:	80 ff       	sbrs	r24, 0
     aa8:	04 c0       	rjmp	.+8      	; 0xab2 <__vector_64+0x3c>
	{
		trigger = '1';
     aaa:	81 e3       	ldi	r24, 0x31	; 49
     aac:	80 93 47 43 	sts	0x4347, r24	; 0x804347 <trigger>
     ab0:	03 c0       	rjmp	.+6      	; 0xab8 <__vector_64+0x42>
	} 
	else
	{
		trigger = '0';
     ab2:	80 e3       	ldi	r24, 0x30	; 48
     ab4:	80 93 47 43 	sts	0x4347, r24	; 0x804347 <trigger>
	}
	
	
	//drdy_count++;
	drdy_samples++;
     ab8:	60 91 1d 43 	lds	r22, 0x431D	; 0x80431d <drdy_samples>
     abc:	70 91 1e 43 	lds	r23, 0x431E	; 0x80431e <drdy_samples+0x1>
     ac0:	80 91 1f 43 	lds	r24, 0x431F	; 0x80431f <drdy_samples+0x2>
     ac4:	90 91 20 43 	lds	r25, 0x4320	; 0x804320 <drdy_samples+0x3>
     ac8:	20 e0       	ldi	r18, 0x00	; 0
     aca:	30 e0       	ldi	r19, 0x00	; 0
     acc:	40 e8       	ldi	r20, 0x80	; 128
     ace:	5f e3       	ldi	r21, 0x3F	; 63
     ad0:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__addsf3>
     ad4:	60 93 1d 43 	sts	0x431D, r22	; 0x80431d <drdy_samples>
     ad8:	70 93 1e 43 	sts	0x431E, r23	; 0x80431e <drdy_samples+0x1>
     adc:	80 93 1f 43 	sts	0x431F, r24	; 0x80431f <drdy_samples+0x2>
     ae0:	90 93 20 43 	sts	0x4320, r25	; 0x804320 <drdy_samples+0x3>
	//_delay_us    (20);
	adsGetData    ();
     ae4:	0e 94 94 02 	call	0x528	; 0x528 <adsGetData>
     ae8:	ff 91       	pop	r31
     aea:	ef 91       	pop	r30
     aec:	bf 91       	pop	r27
     aee:	af 91       	pop	r26
     af0:	9f 91       	pop	r25
     af2:	8f 91       	pop	r24
     af4:	7f 91       	pop	r23
     af6:	6f 91       	pop	r22
     af8:	5f 91       	pop	r21
     afa:	4f 91       	pop	r20
     afc:	3f 91       	pop	r19
     afe:	2f 91       	pop	r18
     b00:	0f 90       	pop	r0
     b02:	0b be       	out	0x3b, r0	; 59
     b04:	0f 90       	pop	r0
     b06:	0f be       	out	0x3f, r0	; 63
     b08:	0f 90       	pop	r0
     b0a:	1f 90       	pop	r1
     b0c:	18 95       	reti

00000b0e <ld_dword>:


	putc_init(&pb, fp);
	while (*str) putc_bfd(&pb, *str++);		/* Put the string */
	return putc_flush(&pb);
}
     b0e:	fc 01       	movw	r30, r24
     b10:	63 81       	ldd	r22, Z+3	; 0x03
     b12:	86 2f       	mov	r24, r22
     b14:	90 e0       	ldi	r25, 0x00	; 0
     b16:	a0 e0       	ldi	r26, 0x00	; 0
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	ba 2f       	mov	r27, r26
     b1c:	a9 2f       	mov	r26, r25
     b1e:	98 2f       	mov	r25, r24
     b20:	88 27       	eor	r24, r24
     b22:	22 81       	ldd	r18, Z+2	; 0x02
     b24:	82 2b       	or	r24, r18
     b26:	ba 2f       	mov	r27, r26
     b28:	a9 2f       	mov	r26, r25
     b2a:	98 2f       	mov	r25, r24
     b2c:	88 27       	eor	r24, r24
     b2e:	21 81       	ldd	r18, Z+1	; 0x01
     b30:	82 2b       	or	r24, r18
     b32:	ba 2f       	mov	r27, r26
     b34:	a9 2f       	mov	r26, r25
     b36:	98 2f       	mov	r25, r24
     b38:	88 27       	eor	r24, r24
     b3a:	20 81       	ld	r18, Z
     b3c:	bc 01       	movw	r22, r24
     b3e:	cd 01       	movw	r24, r26
     b40:	62 2b       	or	r22, r18
     b42:	08 95       	ret

00000b44 <mem_cpy>:
     b44:	41 15       	cp	r20, r1
     b46:	51 05       	cpc	r21, r1
     b48:	51 f0       	breq	.+20     	; 0xb5e <mem_cpy+0x1a>
     b4a:	a6 2f       	mov	r26, r22
     b4c:	b7 2f       	mov	r27, r23
     b4e:	fc 01       	movw	r30, r24
     b50:	48 0f       	add	r20, r24
     b52:	59 1f       	adc	r21, r25
     b54:	9d 91       	ld	r25, X+
     b56:	91 93       	st	Z+, r25
     b58:	e4 17       	cp	r30, r20
     b5a:	f5 07       	cpc	r31, r21
     b5c:	d9 f7       	brne	.-10     	; 0xb54 <mem_cpy+0x10>
     b5e:	08 95       	ret

00000b60 <mem_set>:
     b60:	fc 01       	movw	r30, r24
     b62:	48 0f       	add	r20, r24
     b64:	59 1f       	adc	r21, r25
     b66:	61 93       	st	Z+, r22
     b68:	e4 17       	cp	r30, r20
     b6a:	f5 07       	cpc	r31, r21
     b6c:	e1 f7       	brne	.-8      	; 0xb66 <mem_set+0x6>
     b6e:	08 95       	ret

00000b70 <mem_cmp>:
     b70:	dc 01       	movw	r26, r24
     b72:	e6 2f       	mov	r30, r22
     b74:	f7 2f       	mov	r31, r23
     b76:	8d 91       	ld	r24, X+
     b78:	21 91       	ld	r18, Z+
     b7a:	90 e0       	ldi	r25, 0x00	; 0
     b7c:	82 1b       	sub	r24, r18
     b7e:	91 09       	sbc	r25, r1
     b80:	41 50       	subi	r20, 0x01	; 1
     b82:	51 09       	sbc	r21, r1
     b84:	11 f0       	breq	.+4      	; 0xb8a <mem_cmp+0x1a>
     b86:	00 97       	sbiw	r24, 0x00	; 0
     b88:	b1 f3       	breq	.-20     	; 0xb76 <mem_cmp+0x6>
     b8a:	08 95       	ret

00000b8c <clst2sect>:
     b8c:	0f 93       	push	r16
     b8e:	1f 93       	push	r17
     b90:	fc 01       	movw	r30, r24
     b92:	9a 01       	movw	r18, r20
     b94:	ab 01       	movw	r20, r22
     b96:	22 50       	subi	r18, 0x02	; 2
     b98:	31 09       	sbc	r19, r1
     b9a:	41 09       	sbc	r20, r1
     b9c:	51 09       	sbc	r21, r1
     b9e:	83 89       	ldd	r24, Z+19	; 0x13
     ba0:	94 89       	ldd	r25, Z+20	; 0x14
     ba2:	a5 89       	ldd	r26, Z+21	; 0x15
     ba4:	b6 89       	ldd	r27, Z+22	; 0x16
     ba6:	02 97       	sbiw	r24, 0x02	; 2
     ba8:	a1 09       	sbc	r26, r1
     baa:	b1 09       	sbc	r27, r1
     bac:	28 17       	cp	r18, r24
     bae:	39 07       	cpc	r19, r25
     bb0:	4a 07       	cpc	r20, r26
     bb2:	5b 07       	cpc	r21, r27
     bb4:	68 f4       	brcc	.+26     	; 0xbd0 <clst2sect+0x44>
     bb6:	a1 85       	ldd	r26, Z+9	; 0x09
     bb8:	b2 85       	ldd	r27, Z+10	; 0x0a
     bba:	0e 94 8b 23 	call	0x4716	; 0x4716 <__muluhisi3>
     bbe:	07 a1       	ldd	r16, Z+39	; 0x27
     bc0:	10 a5       	ldd	r17, Z+40	; 0x28
     bc2:	21 a5       	ldd	r18, Z+41	; 0x29
     bc4:	32 a5       	ldd	r19, Z+42	; 0x2a
     bc6:	60 0f       	add	r22, r16
     bc8:	71 1f       	adc	r23, r17
     bca:	82 1f       	adc	r24, r18
     bcc:	93 1f       	adc	r25, r19
     bce:	03 c0       	rjmp	.+6      	; 0xbd6 <clst2sect+0x4a>
     bd0:	60 e0       	ldi	r22, 0x00	; 0
     bd2:	70 e0       	ldi	r23, 0x00	; 0
     bd4:	cb 01       	movw	r24, r22
     bd6:	1f 91       	pop	r17
     bd8:	0f 91       	pop	r16
     bda:	08 95       	ret

00000bdc <get_ldnumber>:
     bdc:	cf 93       	push	r28
     bde:	df 93       	push	r29
     be0:	ec 01       	movw	r28, r24
     be2:	a8 81       	ld	r26, Y
     be4:	b9 81       	ldd	r27, Y+1	; 0x01
     be6:	10 97       	sbiw	r26, 0x00	; 0
     be8:	f1 f0       	breq	.+60     	; 0xc26 <get_ldnumber+0x4a>
     bea:	9d 01       	movw	r18, r26
     bec:	2f 5f       	subi	r18, 0xFF	; 255
     bee:	3f 4f       	sbci	r19, 0xFF	; 255
     bf0:	f9 01       	movw	r30, r18
     bf2:	31 97       	sbiw	r30, 0x01	; 1
     bf4:	90 81       	ld	r25, Z
     bf6:	91 32       	cpi	r25, 0x21	; 33
     bf8:	18 f0       	brcs	.+6      	; 0xc00 <get_ldnumber+0x24>
     bfa:	9a 33       	cpi	r25, 0x3A	; 58
     bfc:	b9 f7       	brne	.-18     	; 0xbec <get_ldnumber+0x10>
     bfe:	02 c0       	rjmp	.+4      	; 0xc04 <get_ldnumber+0x28>
     c00:	9a 33       	cpi	r25, 0x3A	; 58
     c02:	a1 f4       	brne	.+40     	; 0xc2c <get_ldnumber+0x50>
     c04:	8c 91       	ld	r24, X
     c06:	90 ed       	ldi	r25, 0xD0	; 208
     c08:	98 0f       	add	r25, r24
     c0a:	9a 30       	cpi	r25, 0x0A	; 10
     c0c:	90 f4       	brcc	.+36     	; 0xc32 <get_ldnumber+0x56>
     c0e:	12 96       	adiw	r26, 0x02	; 2
     c10:	2a 17       	cp	r18, r26
     c12:	3b 07       	cpc	r19, r27
     c14:	89 f4       	brne	.+34     	; 0xc38 <get_ldnumber+0x5c>
     c16:	90 e0       	ldi	r25, 0x00	; 0
     c18:	c0 97       	sbiw	r24, 0x30	; 48
     c1a:	18 16       	cp	r1, r24
     c1c:	19 06       	cpc	r1, r25
     c1e:	7c f0       	brlt	.+30     	; 0xc3e <get_ldnumber+0x62>
     c20:	28 83       	st	Y, r18
     c22:	39 83       	std	Y+1, r19	; 0x01
     c24:	0e c0       	rjmp	.+28     	; 0xc42 <get_ldnumber+0x66>
     c26:	8f ef       	ldi	r24, 0xFF	; 255
     c28:	9f ef       	ldi	r25, 0xFF	; 255
     c2a:	0b c0       	rjmp	.+22     	; 0xc42 <get_ldnumber+0x66>
     c2c:	80 e0       	ldi	r24, 0x00	; 0
     c2e:	90 e0       	ldi	r25, 0x00	; 0
     c30:	08 c0       	rjmp	.+16     	; 0xc42 <get_ldnumber+0x66>
     c32:	8f ef       	ldi	r24, 0xFF	; 255
     c34:	9f ef       	ldi	r25, 0xFF	; 255
     c36:	05 c0       	rjmp	.+10     	; 0xc42 <get_ldnumber+0x66>
     c38:	8f ef       	ldi	r24, 0xFF	; 255
     c3a:	9f ef       	ldi	r25, 0xFF	; 255
     c3c:	02 c0       	rjmp	.+4      	; 0xc42 <get_ldnumber+0x66>
     c3e:	8f ef       	ldi	r24, 0xFF	; 255
     c40:	9f ef       	ldi	r25, 0xFF	; 255
     c42:	df 91       	pop	r29
     c44:	cf 91       	pop	r28
     c46:	08 95       	ret

00000c48 <validate>:
     c48:	0f 93       	push	r16
     c4a:	1f 93       	push	r17
     c4c:	cf 93       	push	r28
     c4e:	df 93       	push	r29
     c50:	ec 01       	movw	r28, r24
     c52:	8b 01       	movw	r16, r22
     c54:	89 2b       	or	r24, r25
     c56:	e1 f0       	breq	.+56     	; 0xc90 <validate+0x48>
     c58:	e8 81       	ld	r30, Y
     c5a:	f9 81       	ldd	r31, Y+1	; 0x01
     c5c:	30 97       	sbiw	r30, 0x00	; 0
     c5e:	c1 f0       	breq	.+48     	; 0xc90 <validate+0x48>
     c60:	80 81       	ld	r24, Z
     c62:	88 23       	and	r24, r24
     c64:	a9 f0       	breq	.+42     	; 0xc90 <validate+0x48>
     c66:	2a 81       	ldd	r18, Y+2	; 0x02
     c68:	3b 81       	ldd	r19, Y+3	; 0x03
     c6a:	85 81       	ldd	r24, Z+5	; 0x05
     c6c:	96 81       	ldd	r25, Z+6	; 0x06
     c6e:	28 17       	cp	r18, r24
     c70:	39 07       	cpc	r19, r25
     c72:	71 f4       	brne	.+28     	; 0xc90 <validate+0x48>
     c74:	81 81       	ldd	r24, Z+1	; 0x01
     c76:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <disk_status>
     c7a:	80 fd       	sbrc	r24, 0
     c7c:	09 c0       	rjmp	.+18     	; 0xc90 <validate+0x48>
     c7e:	04 c0       	rjmp	.+8      	; 0xc88 <validate+0x40>
     c80:	f8 01       	movw	r30, r16
     c82:	20 83       	st	Z, r18
     c84:	31 83       	std	Z+1, r19	; 0x01
     c86:	08 c0       	rjmp	.+16     	; 0xc98 <validate+0x50>
     c88:	28 81       	ld	r18, Y
     c8a:	39 81       	ldd	r19, Y+1	; 0x01
     c8c:	80 e0       	ldi	r24, 0x00	; 0
     c8e:	f8 cf       	rjmp	.-16     	; 0xc80 <validate+0x38>
     c90:	89 e0       	ldi	r24, 0x09	; 9
     c92:	20 e0       	ldi	r18, 0x00	; 0
     c94:	30 e0       	ldi	r19, 0x00	; 0
     c96:	f4 cf       	rjmp	.-24     	; 0xc80 <validate+0x38>
     c98:	df 91       	pop	r29
     c9a:	cf 91       	pop	r28
     c9c:	1f 91       	pop	r17
     c9e:	0f 91       	pop	r16
     ca0:	08 95       	ret

00000ca2 <sync_window>:
     ca2:	8f 92       	push	r8
     ca4:	9f 92       	push	r9
     ca6:	af 92       	push	r10
     ca8:	bf 92       	push	r11
     caa:	ef 92       	push	r14
     cac:	ff 92       	push	r15
     cae:	0f 93       	push	r16
     cb0:	1f 93       	push	r17
     cb2:	cf 93       	push	r28
     cb4:	df 93       	push	r29
     cb6:	fc 01       	movw	r30, r24
     cb8:	23 81       	ldd	r18, Z+3	; 0x03
     cba:	22 23       	and	r18, r18
     cbc:	d1 f1       	breq	.+116    	; 0xd32 <sync_window+0x90>
     cbe:	ec 01       	movw	r28, r24
     cc0:	7c 01       	movw	r14, r24
     cc2:	ff e2       	ldi	r31, 0x2F	; 47
     cc4:	ef 0e       	add	r14, r31
     cc6:	f1 1c       	adc	r15, r1
     cc8:	2b a5       	ldd	r18, Y+43	; 0x2b
     cca:	3c a5       	ldd	r19, Y+44	; 0x2c
     ccc:	4d a5       	ldd	r20, Y+45	; 0x2d
     cce:	5e a5       	ldd	r21, Y+46	; 0x2e
     cd0:	01 e0       	ldi	r16, 0x01	; 1
     cd2:	10 e0       	ldi	r17, 0x00	; 0
     cd4:	b7 01       	movw	r22, r14
     cd6:	89 81       	ldd	r24, Y+1	; 0x01
     cd8:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <disk_write>
     cdc:	81 11       	cpse	r24, r1
     cde:	2b c0       	rjmp	.+86     	; 0xd36 <sync_window+0x94>
     ce0:	1b 82       	std	Y+3, r1	; 0x03
     ce2:	0b a5       	ldd	r16, Y+43	; 0x2b
     ce4:	1c a5       	ldd	r17, Y+44	; 0x2c
     ce6:	2d a5       	ldd	r18, Y+45	; 0x2d
     ce8:	3e a5       	ldd	r19, Y+46	; 0x2e
     cea:	8f 89       	ldd	r24, Y+23	; 0x17
     cec:	98 8d       	ldd	r25, Y+24	; 0x18
     cee:	a9 8d       	ldd	r26, Y+25	; 0x19
     cf0:	ba 8d       	ldd	r27, Y+26	; 0x1a
     cf2:	8f 8c       	ldd	r8, Y+31	; 0x1f
     cf4:	98 a0       	ldd	r9, Y+32	; 0x20
     cf6:	a9 a0       	ldd	r10, Y+33	; 0x21
     cf8:	ba a0       	ldd	r11, Y+34	; 0x22
     cfa:	b9 01       	movw	r22, r18
     cfc:	a8 01       	movw	r20, r16
     cfe:	48 19       	sub	r20, r8
     d00:	59 09       	sbc	r21, r9
     d02:	6a 09       	sbc	r22, r10
     d04:	7b 09       	sbc	r23, r11
     d06:	48 17       	cp	r20, r24
     d08:	59 07       	cpc	r21, r25
     d0a:	6a 07       	cpc	r22, r26
     d0c:	7b 07       	cpc	r23, r27
     d0e:	a8 f4       	brcc	.+42     	; 0xd3a <sync_window+0x98>
     d10:	6a 81       	ldd	r22, Y+2	; 0x02
     d12:	62 30       	cpi	r22, 0x02	; 2
     d14:	a1 f4       	brne	.+40     	; 0xd3e <sync_window+0x9c>
     d16:	a9 01       	movw	r20, r18
     d18:	98 01       	movw	r18, r16
     d1a:	28 0f       	add	r18, r24
     d1c:	39 1f       	adc	r19, r25
     d1e:	4a 1f       	adc	r20, r26
     d20:	5b 1f       	adc	r21, r27
     d22:	01 e0       	ldi	r16, 0x01	; 1
     d24:	10 e0       	ldi	r17, 0x00	; 0
     d26:	b7 01       	movw	r22, r14
     d28:	89 81       	ldd	r24, Y+1	; 0x01
     d2a:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <disk_write>
     d2e:	80 e0       	ldi	r24, 0x00	; 0
     d30:	07 c0       	rjmp	.+14     	; 0xd40 <sync_window+0x9e>
     d32:	80 e0       	ldi	r24, 0x00	; 0
     d34:	05 c0       	rjmp	.+10     	; 0xd40 <sync_window+0x9e>
     d36:	81 e0       	ldi	r24, 0x01	; 1
     d38:	03 c0       	rjmp	.+6      	; 0xd40 <sync_window+0x9e>
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	01 c0       	rjmp	.+2      	; 0xd40 <sync_window+0x9e>
     d3e:	80 e0       	ldi	r24, 0x00	; 0
     d40:	df 91       	pop	r29
     d42:	cf 91       	pop	r28
     d44:	1f 91       	pop	r17
     d46:	0f 91       	pop	r16
     d48:	ff 90       	pop	r15
     d4a:	ef 90       	pop	r14
     d4c:	bf 90       	pop	r11
     d4e:	af 90       	pop	r10
     d50:	9f 90       	pop	r9
     d52:	8f 90       	pop	r8
     d54:	08 95       	ret

00000d56 <move_window>:
     d56:	8f 92       	push	r8
     d58:	9f 92       	push	r9
     d5a:	af 92       	push	r10
     d5c:	bf 92       	push	r11
     d5e:	ff 92       	push	r15
     d60:	0f 93       	push	r16
     d62:	1f 93       	push	r17
     d64:	cf 93       	push	r28
     d66:	df 93       	push	r29
     d68:	ec 01       	movw	r28, r24
     d6a:	4a 01       	movw	r8, r20
     d6c:	5b 01       	movw	r10, r22
     d6e:	8b a5       	ldd	r24, Y+43	; 0x2b
     d70:	9c a5       	ldd	r25, Y+44	; 0x2c
     d72:	ad a5       	ldd	r26, Y+45	; 0x2d
     d74:	be a5       	ldd	r27, Y+46	; 0x2e
     d76:	84 17       	cp	r24, r20
     d78:	95 07       	cpc	r25, r21
     d7a:	a6 07       	cpc	r26, r22
     d7c:	b7 07       	cpc	r27, r23
     d7e:	e9 f0       	breq	.+58     	; 0xdba <move_window+0x64>
     d80:	ce 01       	movw	r24, r28
     d82:	0e 94 51 06 	call	0xca2	; 0xca2 <sync_window>
     d86:	f8 2e       	mov	r15, r24
     d88:	81 11       	cpse	r24, r1
     d8a:	18 c0       	rjmp	.+48     	; 0xdbc <move_window+0x66>
     d8c:	01 e0       	ldi	r16, 0x01	; 1
     d8e:	10 e0       	ldi	r17, 0x00	; 0
     d90:	a5 01       	movw	r20, r10
     d92:	94 01       	movw	r18, r8
     d94:	be 01       	movw	r22, r28
     d96:	61 5d       	subi	r22, 0xD1	; 209
     d98:	7f 4f       	sbci	r23, 0xFF	; 255
     d9a:	89 81       	ldd	r24, Y+1	; 0x01
     d9c:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <disk_read>
     da0:	88 23       	and	r24, r24
     da2:	31 f0       	breq	.+12     	; 0xdb0 <move_window+0x5a>
     da4:	ff 24       	eor	r15, r15
     da6:	f3 94       	inc	r15
     da8:	88 24       	eor	r8, r8
     daa:	8a 94       	dec	r8
     dac:	98 2c       	mov	r9, r8
     dae:	54 01       	movw	r10, r8
     db0:	8b a6       	std	Y+43, r8	; 0x2b
     db2:	9c a6       	std	Y+44, r9	; 0x2c
     db4:	ad a6       	std	Y+45, r10	; 0x2d
     db6:	be a6       	std	Y+46, r11	; 0x2e
     db8:	01 c0       	rjmp	.+2      	; 0xdbc <move_window+0x66>
     dba:	f1 2c       	mov	r15, r1
     dbc:	8f 2d       	mov	r24, r15
     dbe:	df 91       	pop	r29
     dc0:	cf 91       	pop	r28
     dc2:	1f 91       	pop	r17
     dc4:	0f 91       	pop	r16
     dc6:	ff 90       	pop	r15
     dc8:	bf 90       	pop	r11
     dca:	af 90       	pop	r10
     dcc:	9f 90       	pop	r9
     dce:	8f 90       	pop	r8
     dd0:	08 95       	ret

00000dd2 <dir_clear>:
     dd2:	8f 92       	push	r8
     dd4:	9f 92       	push	r9
     dd6:	af 92       	push	r10
     dd8:	bf 92       	push	r11
     dda:	cf 92       	push	r12
     ddc:	df 92       	push	r13
     dde:	ef 92       	push	r14
     de0:	ff 92       	push	r15
     de2:	0f 93       	push	r16
     de4:	1f 93       	push	r17
     de6:	cf 93       	push	r28
     de8:	df 93       	push	r29
     dea:	7c 01       	movw	r14, r24
     dec:	4a 01       	movw	r8, r20
     dee:	5b 01       	movw	r10, r22
     df0:	0e 94 51 06 	call	0xca2	; 0xca2 <sync_window>
     df4:	81 11       	cpse	r24, r1
     df6:	41 c0       	rjmp	.+130    	; 0xe7a <dir_clear+0xa8>
     df8:	b5 01       	movw	r22, r10
     dfa:	a4 01       	movw	r20, r8
     dfc:	c7 01       	movw	r24, r14
     dfe:	0e 94 c6 05 	call	0xb8c	; 0xb8c <clst2sect>
     e02:	4b 01       	movw	r8, r22
     e04:	5c 01       	movw	r10, r24
     e06:	f7 01       	movw	r30, r14
     e08:	63 a7       	std	Z+43, r22	; 0x2b
     e0a:	74 a7       	std	Z+44, r23	; 0x2c
     e0c:	85 a7       	std	Z+45, r24	; 0x2d
     e0e:	96 a7       	std	Z+46, r25	; 0x2e
     e10:	67 01       	movw	r12, r14
     e12:	ff e2       	ldi	r31, 0x2F	; 47
     e14:	cf 0e       	add	r12, r31
     e16:	d1 1c       	adc	r13, r1
     e18:	40 e0       	ldi	r20, 0x00	; 0
     e1a:	52 e0       	ldi	r21, 0x02	; 2
     e1c:	60 e0       	ldi	r22, 0x00	; 0
     e1e:	70 e0       	ldi	r23, 0x00	; 0
     e20:	c6 01       	movw	r24, r12
     e22:	0e 94 b0 05 	call	0xb60	; 0xb60 <mem_set>
     e26:	f7 01       	movw	r30, r14
     e28:	81 85       	ldd	r24, Z+9	; 0x09
     e2a:	92 85       	ldd	r25, Z+10	; 0x0a
     e2c:	89 2b       	or	r24, r25
     e2e:	59 f4       	brne	.+22     	; 0xe46 <dir_clear+0x74>
     e30:	c0 e0       	ldi	r28, 0x00	; 0
     e32:	d0 e0       	ldi	r29, 0x00	; 0
     e34:	19 c0       	rjmp	.+50     	; 0xe68 <dir_clear+0x96>
     e36:	21 96       	adiw	r28, 0x01	; 1
     e38:	f7 01       	movw	r30, r14
     e3a:	81 85       	ldd	r24, Z+9	; 0x09
     e3c:	92 85       	ldd	r25, Z+10	; 0x0a
     e3e:	c8 17       	cp	r28, r24
     e40:	d9 07       	cpc	r29, r25
     e42:	18 f0       	brcs	.+6      	; 0xe4a <dir_clear+0x78>
     e44:	11 c0       	rjmp	.+34     	; 0xe68 <dir_clear+0x96>
     e46:	c0 e0       	ldi	r28, 0x00	; 0
     e48:	d0 e0       	ldi	r29, 0x00	; 0
     e4a:	01 e0       	ldi	r16, 0x01	; 1
     e4c:	10 e0       	ldi	r17, 0x00	; 0
     e4e:	a5 01       	movw	r20, r10
     e50:	94 01       	movw	r18, r8
     e52:	2c 0f       	add	r18, r28
     e54:	3d 1f       	adc	r19, r29
     e56:	41 1d       	adc	r20, r1
     e58:	51 1d       	adc	r21, r1
     e5a:	b6 01       	movw	r22, r12
     e5c:	f7 01       	movw	r30, r14
     e5e:	81 81       	ldd	r24, Z+1	; 0x01
     e60:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <disk_write>
     e64:	88 23       	and	r24, r24
     e66:	39 f3       	breq	.-50     	; 0xe36 <dir_clear+0x64>
     e68:	81 e0       	ldi	r24, 0x01	; 1
     e6a:	f7 01       	movw	r30, r14
     e6c:	21 85       	ldd	r18, Z+9	; 0x09
     e6e:	32 85       	ldd	r19, Z+10	; 0x0a
     e70:	2c 17       	cp	r18, r28
     e72:	3d 07       	cpc	r19, r29
     e74:	19 f4       	brne	.+6      	; 0xe7c <dir_clear+0xaa>
     e76:	80 e0       	ldi	r24, 0x00	; 0
     e78:	01 c0       	rjmp	.+2      	; 0xe7c <dir_clear+0xaa>
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	df 91       	pop	r29
     e7e:	cf 91       	pop	r28
     e80:	1f 91       	pop	r17
     e82:	0f 91       	pop	r16
     e84:	ff 90       	pop	r15
     e86:	ef 90       	pop	r14
     e88:	df 90       	pop	r13
     e8a:	cf 90       	pop	r12
     e8c:	bf 90       	pop	r11
     e8e:	af 90       	pop	r10
     e90:	9f 90       	pop	r9
     e92:	8f 90       	pop	r8
     e94:	08 95       	ret

00000e96 <sync_fs>:
     e96:	ef 92       	push	r14
     e98:	ff 92       	push	r15
     e9a:	0f 93       	push	r16
     e9c:	1f 93       	push	r17
     e9e:	cf 93       	push	r28
     ea0:	df 93       	push	r29
     ea2:	ec 01       	movw	r28, r24
     ea4:	0e 94 51 06 	call	0xca2	; 0xca2 <sync_window>
     ea8:	98 2f       	mov	r25, r24
     eaa:	81 11       	cpse	r24, r1
     eac:	62 c0       	rjmp	.+196    	; 0xf72 <sync_fs+0xdc>
     eae:	88 81       	ld	r24, Y
     eb0:	83 30       	cpi	r24, 0x03	; 3
     eb2:	09 f0       	breq	.+2      	; 0xeb6 <sync_fs+0x20>
     eb4:	54 c0       	rjmp	.+168    	; 0xf5e <sync_fs+0xc8>
     eb6:	8c 81       	ldd	r24, Y+4	; 0x04
     eb8:	81 30       	cpi	r24, 0x01	; 1
     eba:	09 f0       	breq	.+2      	; 0xebe <sync_fs+0x28>
     ebc:	50 c0       	rjmp	.+160    	; 0xf5e <sync_fs+0xc8>
     ebe:	40 e0       	ldi	r20, 0x00	; 0
     ec0:	52 e0       	ldi	r21, 0x02	; 2
     ec2:	60 e0       	ldi	r22, 0x00	; 0
     ec4:	70 e0       	ldi	r23, 0x00	; 0
     ec6:	7e 01       	movw	r14, r28
     ec8:	8f e2       	ldi	r24, 0x2F	; 47
     eca:	e8 0e       	add	r14, r24
     ecc:	f1 1c       	adc	r15, r1
     ece:	c7 01       	movw	r24, r14
     ed0:	0e 94 b0 05 	call	0xb60	; 0xb60 <mem_set>
     ed4:	85 e5       	ldi	r24, 0x55	; 85
     ed6:	fe 01       	movw	r30, r28
     ed8:	e3 5d       	subi	r30, 0xD3	; 211
     eda:	fd 4f       	sbci	r31, 0xFD	; 253
     edc:	80 83       	st	Z, r24
     ede:	8a ea       	ldi	r24, 0xAA	; 170
     ee0:	31 96       	adiw	r30, 0x01	; 1
     ee2:	80 83       	st	Z, r24
     ee4:	82 e5       	ldi	r24, 0x52	; 82
     ee6:	8f a7       	std	Y+47, r24	; 0x2f
     ee8:	88 ab       	std	Y+48, r24	; 0x30
     eea:	81 e6       	ldi	r24, 0x61	; 97
     eec:	89 ab       	std	Y+49, r24	; 0x31
     eee:	91 e4       	ldi	r25, 0x41	; 65
     ef0:	9a ab       	std	Y+50, r25	; 0x32
     ef2:	22 e7       	ldi	r18, 0x72	; 114
     ef4:	7b 97       	sbiw	r30, 0x1b	; 27
     ef6:	20 83       	st	Z, r18
     ef8:	31 96       	adiw	r30, 0x01	; 1
     efa:	20 83       	st	Z, r18
     efc:	31 96       	adiw	r30, 0x01	; 1
     efe:	90 83       	st	Z, r25
     f00:	31 96       	adiw	r30, 0x01	; 1
     f02:	80 83       	st	Z, r24
     f04:	3f 85       	ldd	r19, Y+15	; 0x0f
     f06:	28 89       	ldd	r18, Y+16	; 0x10
     f08:	99 89       	ldd	r25, Y+17	; 0x11
     f0a:	8a 89       	ldd	r24, Y+18	; 0x12
     f0c:	31 96       	adiw	r30, 0x01	; 1
     f0e:	30 83       	st	Z, r19
     f10:	31 96       	adiw	r30, 0x01	; 1
     f12:	20 83       	st	Z, r18
     f14:	31 96       	adiw	r30, 0x01	; 1
     f16:	90 83       	st	Z, r25
     f18:	31 96       	adiw	r30, 0x01	; 1
     f1a:	80 83       	st	Z, r24
     f1c:	3b 85       	ldd	r19, Y+11	; 0x0b
     f1e:	2c 85       	ldd	r18, Y+12	; 0x0c
     f20:	9d 85       	ldd	r25, Y+13	; 0x0d
     f22:	8e 85       	ldd	r24, Y+14	; 0x0e
     f24:	31 96       	adiw	r30, 0x01	; 1
     f26:	30 83       	st	Z, r19
     f28:	31 96       	adiw	r30, 0x01	; 1
     f2a:	20 83       	st	Z, r18
     f2c:	31 96       	adiw	r30, 0x01	; 1
     f2e:	90 83       	st	Z, r25
     f30:	31 96       	adiw	r30, 0x01	; 1
     f32:	80 83       	st	Z, r24
     f34:	8b 8d       	ldd	r24, Y+27	; 0x1b
     f36:	9c 8d       	ldd	r25, Y+28	; 0x1c
     f38:	ad 8d       	ldd	r26, Y+29	; 0x1d
     f3a:	be 8d       	ldd	r27, Y+30	; 0x1e
     f3c:	9c 01       	movw	r18, r24
     f3e:	ad 01       	movw	r20, r26
     f40:	2f 5f       	subi	r18, 0xFF	; 255
     f42:	3f 4f       	sbci	r19, 0xFF	; 255
     f44:	4f 4f       	sbci	r20, 0xFF	; 255
     f46:	5f 4f       	sbci	r21, 0xFF	; 255
     f48:	2b a7       	std	Y+43, r18	; 0x2b
     f4a:	3c a7       	std	Y+44, r19	; 0x2c
     f4c:	4d a7       	std	Y+45, r20	; 0x2d
     f4e:	5e a7       	std	Y+46, r21	; 0x2e
     f50:	01 e0       	ldi	r16, 0x01	; 1
     f52:	10 e0       	ldi	r17, 0x00	; 0
     f54:	b7 01       	movw	r22, r14
     f56:	89 81       	ldd	r24, Y+1	; 0x01
     f58:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <disk_write>
     f5c:	1c 82       	std	Y+4, r1	; 0x04
     f5e:	40 e0       	ldi	r20, 0x00	; 0
     f60:	50 e0       	ldi	r21, 0x00	; 0
     f62:	60 e0       	ldi	r22, 0x00	; 0
     f64:	89 81       	ldd	r24, Y+1	; 0x01
     f66:	0e 94 07 20 	call	0x400e	; 0x400e <disk_ioctl>
     f6a:	91 e0       	ldi	r25, 0x01	; 1
     f6c:	81 11       	cpse	r24, r1
     f6e:	01 c0       	rjmp	.+2      	; 0xf72 <sync_fs+0xdc>
     f70:	90 e0       	ldi	r25, 0x00	; 0
     f72:	89 2f       	mov	r24, r25
     f74:	df 91       	pop	r29
     f76:	cf 91       	pop	r28
     f78:	1f 91       	pop	r17
     f7a:	0f 91       	pop	r16
     f7c:	ff 90       	pop	r15
     f7e:	ef 90       	pop	r14
     f80:	08 95       	ret

00000f82 <put_fat>:
     f82:	2f 92       	push	r2
     f84:	3f 92       	push	r3
     f86:	4f 92       	push	r4
     f88:	5f 92       	push	r5
     f8a:	6f 92       	push	r6
     f8c:	7f 92       	push	r7
     f8e:	8f 92       	push	r8
     f90:	9f 92       	push	r9
     f92:	af 92       	push	r10
     f94:	bf 92       	push	r11
     f96:	cf 92       	push	r12
     f98:	df 92       	push	r13
     f9a:	ef 92       	push	r14
     f9c:	ff 92       	push	r15
     f9e:	0f 93       	push	r16
     fa0:	1f 93       	push	r17
     fa2:	cf 93       	push	r28
     fa4:	df 93       	push	r29
     fa6:	42 30       	cpi	r20, 0x02	; 2
     fa8:	51 05       	cpc	r21, r1
     faa:	61 05       	cpc	r22, r1
     fac:	71 05       	cpc	r23, r1
     fae:	08 f4       	brcc	.+2      	; 0xfb2 <put_fat+0x30>
     fb0:	d2 c0       	rjmp	.+420    	; 0x1156 <put_fat+0x1d4>
     fb2:	fc 01       	movw	r30, r24
     fb4:	c3 88       	ldd	r12, Z+19	; 0x13
     fb6:	d4 88       	ldd	r13, Z+20	; 0x14
     fb8:	e5 88       	ldd	r14, Z+21	; 0x15
     fba:	f6 88       	ldd	r15, Z+22	; 0x16
     fbc:	4c 15       	cp	r20, r12
     fbe:	5d 05       	cpc	r21, r13
     fc0:	6e 05       	cpc	r22, r14
     fc2:	7f 05       	cpc	r23, r15
     fc4:	08 f0       	brcs	.+2      	; 0xfc8 <put_fat+0x46>
     fc6:	c9 c0       	rjmp	.+402    	; 0x115a <put_fat+0x1d8>
     fc8:	28 01       	movw	r4, r16
     fca:	39 01       	movw	r6, r18
     fcc:	6a 01       	movw	r12, r20
     fce:	7b 01       	movw	r14, r22
     fd0:	ec 01       	movw	r28, r24
     fd2:	80 81       	ld	r24, Z
     fd4:	82 30       	cpi	r24, 0x02	; 2
     fd6:	09 f4       	brne	.+2      	; 0xfda <put_fat+0x58>
     fd8:	64 c0       	rjmp	.+200    	; 0x10a2 <put_fat+0x120>
     fda:	83 30       	cpi	r24, 0x03	; 3
     fdc:	09 f4       	brne	.+2      	; 0xfe0 <put_fat+0x5e>
     fde:	82 c0       	rjmp	.+260    	; 0x10e4 <put_fat+0x162>
     fe0:	81 30       	cpi	r24, 0x01	; 1
     fe2:	09 f0       	breq	.+2      	; 0xfe6 <put_fat+0x64>
     fe4:	bc c0       	rjmp	.+376    	; 0x115e <put_fat+0x1dc>
     fe6:	5a 01       	movw	r10, r20
     fe8:	b6 94       	lsr	r11
     fea:	a7 94       	ror	r10
     fec:	a4 0e       	add	r10, r20
     fee:	b5 1e       	adc	r11, r21
     ff0:	c5 01       	movw	r24, r10
     ff2:	89 2f       	mov	r24, r25
     ff4:	99 27       	eor	r25, r25
     ff6:	86 95       	lsr	r24
     ff8:	47 8d       	ldd	r20, Z+31	; 0x1f
     ffa:	50 a1       	ldd	r21, Z+32	; 0x20
     ffc:	61 a1       	ldd	r22, Z+33	; 0x21
     ffe:	72 a1       	ldd	r23, Z+34	; 0x22
    1000:	48 0f       	add	r20, r24
    1002:	59 1f       	adc	r21, r25
    1004:	61 1d       	adc	r22, r1
    1006:	71 1d       	adc	r23, r1
    1008:	cf 01       	movw	r24, r30
    100a:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    100e:	18 2f       	mov	r17, r24
    1010:	81 11       	cpse	r24, r1
    1012:	c5 c0       	rjmp	.+394    	; 0x119e <put_fat+0x21c>
    1014:	1e 01       	movw	r2, r28
    1016:	ff e2       	ldi	r31, 0x2F	; 47
    1018:	2f 0e       	add	r2, r31
    101a:	31 1c       	adc	r3, r1
    101c:	45 01       	movw	r8, r10
    101e:	2f ef       	ldi	r18, 0xFF	; 255
    1020:	82 1a       	sub	r8, r18
    1022:	92 0a       	sbc	r9, r18
    1024:	31 e0       	ldi	r19, 0x01	; 1
    1026:	b3 22       	and	r11, r19
    1028:	f1 01       	movw	r30, r2
    102a:	ea 0d       	add	r30, r10
    102c:	fb 1d       	adc	r31, r11
    102e:	c0 fe       	sbrs	r12, 0
    1030:	1e c0       	rjmp	.+60     	; 0x106e <put_fat+0xec>
    1032:	80 81       	ld	r24, Z
    1034:	28 2f       	mov	r18, r24
    1036:	2f 70       	andi	r18, 0x0F	; 15
    1038:	30 e1       	ldi	r19, 0x10	; 16
    103a:	43 9e       	mul	r4, r19
    103c:	c0 01       	movw	r24, r0
    103e:	11 24       	eor	r1, r1
    1040:	82 2b       	or	r24, r18
    1042:	80 83       	st	Z, r24
    1044:	81 e0       	ldi	r24, 0x01	; 1
    1046:	8b 83       	std	Y+3, r24	; 0x03
    1048:	4f 8d       	ldd	r20, Y+31	; 0x1f
    104a:	58 a1       	ldd	r21, Y+32	; 0x20
    104c:	69 a1       	ldd	r22, Y+33	; 0x21
    104e:	7a a1       	ldd	r23, Y+34	; 0x22
    1050:	c4 01       	movw	r24, r8
    1052:	89 2f       	mov	r24, r25
    1054:	99 27       	eor	r25, r25
    1056:	86 95       	lsr	r24
    1058:	48 0f       	add	r20, r24
    105a:	59 1f       	adc	r21, r25
    105c:	61 1d       	adc	r22, r1
    105e:	71 1d       	adc	r23, r1
    1060:	ce 01       	movw	r24, r28
    1062:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    1066:	88 23       	and	r24, r24
    1068:	09 f4       	brne	.+2      	; 0x106c <put_fat+0xea>
    106a:	7f c0       	rjmp	.+254    	; 0x116a <put_fat+0x1e8>
    106c:	7a c0       	rjmp	.+244    	; 0x1162 <put_fat+0x1e0>
    106e:	40 82       	st	Z, r4
    1070:	81 e0       	ldi	r24, 0x01	; 1
    1072:	8b 83       	std	Y+3, r24	; 0x03
    1074:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1076:	58 a1       	ldd	r21, Y+32	; 0x20
    1078:	69 a1       	ldd	r22, Y+33	; 0x21
    107a:	7a a1       	ldd	r23, Y+34	; 0x22
    107c:	c4 01       	movw	r24, r8
    107e:	89 2f       	mov	r24, r25
    1080:	99 27       	eor	r25, r25
    1082:	86 95       	lsr	r24
    1084:	48 0f       	add	r20, r24
    1086:	59 1f       	adc	r21, r25
    1088:	61 1d       	adc	r22, r1
    108a:	71 1d       	adc	r23, r1
    108c:	ce 01       	movw	r24, r28
    108e:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    1092:	88 23       	and	r24, r24
    1094:	09 f4       	brne	.+2      	; 0x1098 <put_fat+0x116>
    1096:	77 c0       	rjmp	.+238    	; 0x1186 <put_fat+0x204>
    1098:	66 c0       	rjmp	.+204    	; 0x1166 <put_fat+0x1e4>
    109a:	40 82       	st	Z, r4
    109c:	81 e0       	ldi	r24, 0x01	; 1
    109e:	8b 83       	std	Y+3, r24	; 0x03
    10a0:	7e c0       	rjmp	.+252    	; 0x119e <put_fat+0x21c>
    10a2:	45 2f       	mov	r20, r21
    10a4:	56 2f       	mov	r21, r22
    10a6:	67 2f       	mov	r22, r23
    10a8:	77 27       	eor	r23, r23
    10aa:	87 8d       	ldd	r24, Z+31	; 0x1f
    10ac:	90 a1       	ldd	r25, Z+32	; 0x20
    10ae:	a1 a1       	ldd	r26, Z+33	; 0x21
    10b0:	b2 a1       	ldd	r27, Z+34	; 0x22
    10b2:	48 0f       	add	r20, r24
    10b4:	59 1f       	adc	r21, r25
    10b6:	6a 1f       	adc	r22, r26
    10b8:	7b 1f       	adc	r23, r27
    10ba:	cf 01       	movw	r24, r30
    10bc:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    10c0:	18 2f       	mov	r17, r24
    10c2:	81 11       	cpse	r24, r1
    10c4:	6c c0       	rjmp	.+216    	; 0x119e <put_fat+0x21c>
    10c6:	fe 01       	movw	r30, r28
    10c8:	bf 96       	adiw	r30, 0x2f	; 47
    10ca:	cc 0c       	add	r12, r12
    10cc:	dd 1c       	adc	r13, r13
    10ce:	e8 94       	clt
    10d0:	c0 f8       	bld	r12, 0
    10d2:	81 e0       	ldi	r24, 0x01	; 1
    10d4:	d8 22       	and	r13, r24
    10d6:	ec 0d       	add	r30, r12
    10d8:	fd 1d       	adc	r31, r13
    10da:	40 82       	st	Z, r4
    10dc:	51 82       	std	Z+1, r5	; 0x01
    10de:	81 e0       	ldi	r24, 0x01	; 1
    10e0:	8b 83       	std	Y+3, r24	; 0x03
    10e2:	5d c0       	rjmp	.+186    	; 0x119e <put_fat+0x21c>
    10e4:	87 8d       	ldd	r24, Z+31	; 0x1f
    10e6:	90 a1       	ldd	r25, Z+32	; 0x20
    10e8:	a1 a1       	ldd	r26, Z+33	; 0x21
    10ea:	b2 a1       	ldd	r27, Z+34	; 0x22
    10ec:	68 94       	set
    10ee:	16 f8       	bld	r1, 6
    10f0:	76 95       	lsr	r23
    10f2:	67 95       	ror	r22
    10f4:	57 95       	ror	r21
    10f6:	47 95       	ror	r20
    10f8:	16 94       	lsr	r1
    10fa:	d1 f7       	brne	.-12     	; 0x10f0 <put_fat+0x16e>
    10fc:	48 0f       	add	r20, r24
    10fe:	59 1f       	adc	r21, r25
    1100:	6a 1f       	adc	r22, r26
    1102:	7b 1f       	adc	r23, r27
    1104:	cf 01       	movw	r24, r30
    1106:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    110a:	18 2f       	mov	r17, r24
    110c:	81 11       	cpse	r24, r1
    110e:	47 c0       	rjmp	.+142    	; 0x119e <put_fat+0x21c>
    1110:	ef e0       	ldi	r30, 0x0F	; 15
    1112:	7e 22       	and	r7, r30
    1114:	ce 01       	movw	r24, r28
    1116:	8f 96       	adiw	r24, 0x2f	; 47
    1118:	cc 0c       	add	r12, r12
    111a:	dd 1c       	adc	r13, r13
    111c:	cc 0c       	add	r12, r12
    111e:	dd 1c       	adc	r13, r13
    1120:	fc ef       	ldi	r31, 0xFC	; 252
    1122:	cf 22       	and	r12, r31
    1124:	f1 e0       	ldi	r31, 0x01	; 1
    1126:	df 22       	and	r13, r31
    1128:	c8 0e       	add	r12, r24
    112a:	d9 1e       	adc	r13, r25
    112c:	c6 01       	movw	r24, r12
    112e:	0e 94 87 05 	call	0xb0e	; 0xb0e <ld_dword>
    1132:	dc 01       	movw	r26, r24
    1134:	cb 01       	movw	r24, r22
    1136:	88 27       	eor	r24, r24
    1138:	99 27       	eor	r25, r25
    113a:	aa 27       	eor	r26, r26
    113c:	b0 7f       	andi	r27, 0xF0	; 240
    113e:	48 2a       	or	r4, r24
    1140:	59 2a       	or	r5, r25
    1142:	6a 2a       	or	r6, r26
    1144:	7b 2a       	or	r7, r27
    1146:	f6 01       	movw	r30, r12
    1148:	40 82       	st	Z, r4
    114a:	51 82       	std	Z+1, r5	; 0x01
    114c:	62 82       	std	Z+2, r6	; 0x02
    114e:	73 82       	std	Z+3, r7	; 0x03
    1150:	81 e0       	ldi	r24, 0x01	; 1
    1152:	8b 83       	std	Y+3, r24	; 0x03
    1154:	24 c0       	rjmp	.+72     	; 0x119e <put_fat+0x21c>
    1156:	12 e0       	ldi	r17, 0x02	; 2
    1158:	22 c0       	rjmp	.+68     	; 0x119e <put_fat+0x21c>
    115a:	12 e0       	ldi	r17, 0x02	; 2
    115c:	20 c0       	rjmp	.+64     	; 0x119e <put_fat+0x21c>
    115e:	12 e0       	ldi	r17, 0x02	; 2
    1160:	1e c0       	rjmp	.+60     	; 0x119e <put_fat+0x21c>
    1162:	18 2f       	mov	r17, r24
    1164:	1c c0       	rjmp	.+56     	; 0x119e <put_fat+0x21c>
    1166:	18 2f       	mov	r17, r24
    1168:	1a c0       	rjmp	.+52     	; 0x119e <put_fat+0x21c>
    116a:	f1 e0       	ldi	r31, 0x01	; 1
    116c:	9f 22       	and	r9, r31
    116e:	f1 01       	movw	r30, r2
    1170:	e8 0d       	add	r30, r8
    1172:	f9 1d       	adc	r31, r9
    1174:	68 94       	set
    1176:	13 f8       	bld	r1, 3
    1178:	76 94       	lsr	r7
    117a:	67 94       	ror	r6
    117c:	57 94       	ror	r5
    117e:	47 94       	ror	r4
    1180:	16 94       	lsr	r1
    1182:	d1 f7       	brne	.-12     	; 0x1178 <put_fat+0x1f6>
    1184:	8a cf       	rjmp	.-236    	; 0x109a <put_fat+0x118>
    1186:	21 e0       	ldi	r18, 0x01	; 1
    1188:	92 22       	and	r9, r18
    118a:	f1 01       	movw	r30, r2
    118c:	e8 0d       	add	r30, r8
    118e:	f9 1d       	adc	r31, r9
    1190:	90 81       	ld	r25, Z
    1192:	90 7f       	andi	r25, 0xF0	; 240
    1194:	85 2d       	mov	r24, r5
    1196:	8f 70       	andi	r24, 0x0F	; 15
    1198:	49 2e       	mov	r4, r25
    119a:	48 2a       	or	r4, r24
    119c:	7e cf       	rjmp	.-260    	; 0x109a <put_fat+0x118>
    119e:	81 2f       	mov	r24, r17
    11a0:	df 91       	pop	r29
    11a2:	cf 91       	pop	r28
    11a4:	1f 91       	pop	r17
    11a6:	0f 91       	pop	r16
    11a8:	ff 90       	pop	r15
    11aa:	ef 90       	pop	r14
    11ac:	df 90       	pop	r13
    11ae:	cf 90       	pop	r12
    11b0:	bf 90       	pop	r11
    11b2:	af 90       	pop	r10
    11b4:	9f 90       	pop	r9
    11b6:	8f 90       	pop	r8
    11b8:	7f 90       	pop	r7
    11ba:	6f 90       	pop	r6
    11bc:	5f 90       	pop	r5
    11be:	4f 90       	pop	r4
    11c0:	3f 90       	pop	r3
    11c2:	2f 90       	pop	r2
    11c4:	08 95       	ret

000011c6 <st_clust>:
    11c6:	fb 01       	movw	r30, r22
    11c8:	22 8f       	std	Z+26, r18	; 0x1a
    11ca:	33 8f       	std	Z+27, r19	; 0x1b
    11cc:	dc 01       	movw	r26, r24
    11ce:	8c 91       	ld	r24, X
    11d0:	83 30       	cpi	r24, 0x03	; 3
    11d2:	29 f4       	brne	.+10     	; 0x11de <st_clust+0x18>
    11d4:	ca 01       	movw	r24, r20
    11d6:	aa 27       	eor	r26, r26
    11d8:	bb 27       	eor	r27, r27
    11da:	84 8b       	std	Z+20, r24	; 0x14
    11dc:	95 8b       	std	Z+21, r25	; 0x15
    11de:	08 95       	ret

000011e0 <get_fat>:
    11e0:	af 92       	push	r10
    11e2:	bf 92       	push	r11
    11e4:	cf 92       	push	r12
    11e6:	df 92       	push	r13
    11e8:	ef 92       	push	r14
    11ea:	ff 92       	push	r15
    11ec:	0f 93       	push	r16
    11ee:	1f 93       	push	r17
    11f0:	cf 93       	push	r28
    11f2:	df 93       	push	r29
    11f4:	42 30       	cpi	r20, 0x02	; 2
    11f6:	51 05       	cpc	r21, r1
    11f8:	61 05       	cpc	r22, r1
    11fa:	71 05       	cpc	r23, r1
    11fc:	08 f4       	brcc	.+2      	; 0x1200 <get_fat+0x20>
    11fe:	a6 c0       	rjmp	.+332    	; 0x134c <get_fat+0x16c>
    1200:	fc 01       	movw	r30, r24
    1202:	c0 81       	ld	r28, Z
    1204:	d1 81       	ldd	r29, Z+1	; 0x01
    1206:	8b 89       	ldd	r24, Y+19	; 0x13
    1208:	9c 89       	ldd	r25, Y+20	; 0x14
    120a:	ad 89       	ldd	r26, Y+21	; 0x15
    120c:	be 89       	ldd	r27, Y+22	; 0x16
    120e:	48 17       	cp	r20, r24
    1210:	59 07       	cpc	r21, r25
    1212:	6a 07       	cpc	r22, r26
    1214:	7b 07       	cpc	r23, r27
    1216:	08 f0       	brcs	.+2      	; 0x121a <get_fat+0x3a>
    1218:	9e c0       	rjmp	.+316    	; 0x1356 <get_fat+0x176>
    121a:	6a 01       	movw	r12, r20
    121c:	7b 01       	movw	r14, r22
    121e:	88 81       	ld	r24, Y
    1220:	82 30       	cpi	r24, 0x02	; 2
    1222:	09 f4       	brne	.+2      	; 0x1226 <get_fat+0x46>
    1224:	4d c0       	rjmp	.+154    	; 0x12c0 <get_fat+0xe0>
    1226:	83 30       	cpi	r24, 0x03	; 3
    1228:	09 f4       	brne	.+2      	; 0x122c <get_fat+0x4c>
    122a:	6c c0       	rjmp	.+216    	; 0x1304 <get_fat+0x124>
    122c:	81 30       	cpi	r24, 0x01	; 1
    122e:	09 f0       	breq	.+2      	; 0x1232 <get_fat+0x52>
    1230:	97 c0       	rjmp	.+302    	; 0x1360 <get_fat+0x180>
    1232:	8a 01       	movw	r16, r20
    1234:	16 95       	lsr	r17
    1236:	07 95       	ror	r16
    1238:	04 0f       	add	r16, r20
    123a:	15 1f       	adc	r17, r21
    123c:	c8 01       	movw	r24, r16
    123e:	89 2f       	mov	r24, r25
    1240:	99 27       	eor	r25, r25
    1242:	86 95       	lsr	r24
    1244:	4f 8d       	ldd	r20, Y+31	; 0x1f
    1246:	58 a1       	ldd	r21, Y+32	; 0x20
    1248:	69 a1       	ldd	r22, Y+33	; 0x21
    124a:	7a a1       	ldd	r23, Y+34	; 0x22
    124c:	48 0f       	add	r20, r24
    124e:	59 1f       	adc	r21, r25
    1250:	61 1d       	adc	r22, r1
    1252:	71 1d       	adc	r23, r1
    1254:	ce 01       	movw	r24, r28
    1256:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    125a:	81 11       	cpse	r24, r1
    125c:	86 c0       	rjmp	.+268    	; 0x136a <get_fat+0x18a>
    125e:	58 01       	movw	r10, r16
    1260:	ff ef       	ldi	r31, 0xFF	; 255
    1262:	af 1a       	sub	r10, r31
    1264:	bf 0a       	sbc	r11, r31
    1266:	11 70       	andi	r17, 0x01	; 1
    1268:	fe 01       	movw	r30, r28
    126a:	e0 0f       	add	r30, r16
    126c:	f1 1f       	adc	r31, r17
    126e:	17 a5       	ldd	r17, Z+47	; 0x2f
    1270:	c5 01       	movw	r24, r10
    1272:	89 2f       	mov	r24, r25
    1274:	99 27       	eor	r25, r25
    1276:	86 95       	lsr	r24
    1278:	4f 8d       	ldd	r20, Y+31	; 0x1f
    127a:	58 a1       	ldd	r21, Y+32	; 0x20
    127c:	69 a1       	ldd	r22, Y+33	; 0x21
    127e:	7a a1       	ldd	r23, Y+34	; 0x22
    1280:	48 0f       	add	r20, r24
    1282:	59 1f       	adc	r21, r25
    1284:	61 1d       	adc	r22, r1
    1286:	71 1d       	adc	r23, r1
    1288:	ce 01       	movw	r24, r28
    128a:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    128e:	81 11       	cpse	r24, r1
    1290:	70 c0       	rjmp	.+224    	; 0x1372 <get_fat+0x192>
    1292:	81 e0       	ldi	r24, 0x01	; 1
    1294:	b8 22       	and	r11, r24
    1296:	ca 0d       	add	r28, r10
    1298:	db 1d       	adc	r29, r11
    129a:	8f a5       	ldd	r24, Y+47	; 0x2f
    129c:	61 2f       	mov	r22, r17
    129e:	70 e0       	ldi	r23, 0x00	; 0
    12a0:	78 2b       	or	r23, r24
    12a2:	c0 fe       	sbrs	r12, 0
    12a4:	09 c0       	rjmp	.+18     	; 0x12b8 <get_fat+0xd8>
    12a6:	72 95       	swap	r23
    12a8:	62 95       	swap	r22
    12aa:	6f 70       	andi	r22, 0x0F	; 15
    12ac:	67 27       	eor	r22, r23
    12ae:	7f 70       	andi	r23, 0x0F	; 15
    12b0:	67 27       	eor	r22, r23
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	90 e0       	ldi	r25, 0x00	; 0
    12b6:	68 c0       	rjmp	.+208    	; 0x1388 <get_fat+0x1a8>
    12b8:	7f 70       	andi	r23, 0x0F	; 15
    12ba:	80 e0       	ldi	r24, 0x00	; 0
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	64 c0       	rjmp	.+200    	; 0x1388 <get_fat+0x1a8>
    12c0:	45 2f       	mov	r20, r21
    12c2:	56 2f       	mov	r21, r22
    12c4:	67 2f       	mov	r22, r23
    12c6:	77 27       	eor	r23, r23
    12c8:	8f 8d       	ldd	r24, Y+31	; 0x1f
    12ca:	98 a1       	ldd	r25, Y+32	; 0x20
    12cc:	a9 a1       	ldd	r26, Y+33	; 0x21
    12ce:	ba a1       	ldd	r27, Y+34	; 0x22
    12d0:	48 0f       	add	r20, r24
    12d2:	59 1f       	adc	r21, r25
    12d4:	6a 1f       	adc	r22, r26
    12d6:	7b 1f       	adc	r23, r27
    12d8:	ce 01       	movw	r24, r28
    12da:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    12de:	81 11       	cpse	r24, r1
    12e0:	4c c0       	rjmp	.+152    	; 0x137a <get_fat+0x19a>
    12e2:	af 96       	adiw	r28, 0x2f	; 47
    12e4:	a6 01       	movw	r20, r12
    12e6:	44 0f       	add	r20, r20
    12e8:	55 1f       	adc	r21, r21
    12ea:	4e 7f       	andi	r20, 0xFE	; 254
    12ec:	51 70       	andi	r21, 0x01	; 1
    12ee:	c4 0f       	add	r28, r20
    12f0:	d5 1f       	adc	r29, r21
    12f2:	69 81       	ldd	r22, Y+1	; 0x01
    12f4:	70 e0       	ldi	r23, 0x00	; 0
    12f6:	76 2f       	mov	r23, r22
    12f8:	66 27       	eor	r22, r22
    12fa:	88 81       	ld	r24, Y
    12fc:	68 2b       	or	r22, r24
    12fe:	80 e0       	ldi	r24, 0x00	; 0
    1300:	90 e0       	ldi	r25, 0x00	; 0
    1302:	42 c0       	rjmp	.+132    	; 0x1388 <get_fat+0x1a8>
    1304:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1306:	98 a1       	ldd	r25, Y+32	; 0x20
    1308:	a9 a1       	ldd	r26, Y+33	; 0x21
    130a:	ba a1       	ldd	r27, Y+34	; 0x22
    130c:	68 94       	set
    130e:	16 f8       	bld	r1, 6
    1310:	76 95       	lsr	r23
    1312:	67 95       	ror	r22
    1314:	57 95       	ror	r21
    1316:	47 95       	ror	r20
    1318:	16 94       	lsr	r1
    131a:	d1 f7       	brne	.-12     	; 0x1310 <get_fat+0x130>
    131c:	48 0f       	add	r20, r24
    131e:	59 1f       	adc	r21, r25
    1320:	6a 1f       	adc	r22, r26
    1322:	7b 1f       	adc	r23, r27
    1324:	ce 01       	movw	r24, r28
    1326:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    132a:	81 11       	cpse	r24, r1
    132c:	2a c0       	rjmp	.+84     	; 0x1382 <get_fat+0x1a2>
    132e:	af 96       	adiw	r28, 0x2f	; 47
    1330:	a6 01       	movw	r20, r12
    1332:	44 0f       	add	r20, r20
    1334:	55 1f       	adc	r21, r21
    1336:	44 0f       	add	r20, r20
    1338:	55 1f       	adc	r21, r21
    133a:	ca 01       	movw	r24, r20
    133c:	8c 7f       	andi	r24, 0xFC	; 252
    133e:	91 70       	andi	r25, 0x01	; 1
    1340:	8c 0f       	add	r24, r28
    1342:	9d 1f       	adc	r25, r29
    1344:	0e 94 87 05 	call	0xb0e	; 0xb0e <ld_dword>
    1348:	9f 70       	andi	r25, 0x0F	; 15
    134a:	1e c0       	rjmp	.+60     	; 0x1388 <get_fat+0x1a8>
    134c:	61 e0       	ldi	r22, 0x01	; 1
    134e:	70 e0       	ldi	r23, 0x00	; 0
    1350:	80 e0       	ldi	r24, 0x00	; 0
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	19 c0       	rjmp	.+50     	; 0x1388 <get_fat+0x1a8>
    1356:	61 e0       	ldi	r22, 0x01	; 1
    1358:	70 e0       	ldi	r23, 0x00	; 0
    135a:	80 e0       	ldi	r24, 0x00	; 0
    135c:	90 e0       	ldi	r25, 0x00	; 0
    135e:	14 c0       	rjmp	.+40     	; 0x1388 <get_fat+0x1a8>
    1360:	61 e0       	ldi	r22, 0x01	; 1
    1362:	70 e0       	ldi	r23, 0x00	; 0
    1364:	80 e0       	ldi	r24, 0x00	; 0
    1366:	90 e0       	ldi	r25, 0x00	; 0
    1368:	0f c0       	rjmp	.+30     	; 0x1388 <get_fat+0x1a8>
    136a:	6f ef       	ldi	r22, 0xFF	; 255
    136c:	7f ef       	ldi	r23, 0xFF	; 255
    136e:	cb 01       	movw	r24, r22
    1370:	0b c0       	rjmp	.+22     	; 0x1388 <get_fat+0x1a8>
    1372:	6f ef       	ldi	r22, 0xFF	; 255
    1374:	7f ef       	ldi	r23, 0xFF	; 255
    1376:	cb 01       	movw	r24, r22
    1378:	07 c0       	rjmp	.+14     	; 0x1388 <get_fat+0x1a8>
    137a:	6f ef       	ldi	r22, 0xFF	; 255
    137c:	7f ef       	ldi	r23, 0xFF	; 255
    137e:	cb 01       	movw	r24, r22
    1380:	03 c0       	rjmp	.+6      	; 0x1388 <get_fat+0x1a8>
    1382:	6f ef       	ldi	r22, 0xFF	; 255
    1384:	7f ef       	ldi	r23, 0xFF	; 255
    1386:	cb 01       	movw	r24, r22
    1388:	df 91       	pop	r29
    138a:	cf 91       	pop	r28
    138c:	1f 91       	pop	r17
    138e:	0f 91       	pop	r16
    1390:	ff 90       	pop	r15
    1392:	ef 90       	pop	r14
    1394:	df 90       	pop	r13
    1396:	cf 90       	pop	r12
    1398:	bf 90       	pop	r11
    139a:	af 90       	pop	r10
    139c:	08 95       	ret

0000139e <dir_sdi>:
    139e:	4f 92       	push	r4
    13a0:	5f 92       	push	r5
    13a2:	6f 92       	push	r6
    13a4:	7f 92       	push	r7
    13a6:	8f 92       	push	r8
    13a8:	9f 92       	push	r9
    13aa:	af 92       	push	r10
    13ac:	bf 92       	push	r11
    13ae:	cf 92       	push	r12
    13b0:	df 92       	push	r13
    13b2:	ef 92       	push	r14
    13b4:	ff 92       	push	r15
    13b6:	0f 93       	push	r16
    13b8:	1f 93       	push	r17
    13ba:	cf 93       	push	r28
    13bc:	df 93       	push	r29
    13be:	ec 01       	movw	r28, r24
    13c0:	6a 01       	movw	r12, r20
    13c2:	7b 01       	movw	r14, r22
    13c4:	41 15       	cp	r20, r1
    13c6:	51 05       	cpc	r21, r1
    13c8:	80 e2       	ldi	r24, 0x20	; 32
    13ca:	68 07       	cpc	r22, r24
    13cc:	71 05       	cpc	r23, r1
    13ce:	08 f0       	brcs	.+2      	; 0x13d2 <dir_sdi+0x34>
    13d0:	b3 c0       	rjmp	.+358    	; 0x1538 <dir_sdi+0x19a>
    13d2:	db 01       	movw	r26, r22
    13d4:	ca 01       	movw	r24, r20
    13d6:	8f 71       	andi	r24, 0x1F	; 31
    13d8:	99 27       	eor	r25, r25
    13da:	aa 27       	eor	r26, r26
    13dc:	bb 27       	eor	r27, r27
    13de:	89 2b       	or	r24, r25
    13e0:	8a 2b       	or	r24, r26
    13e2:	8b 2b       	or	r24, r27
    13e4:	09 f0       	breq	.+2      	; 0x13e8 <dir_sdi+0x4a>
    13e6:	aa c0       	rjmp	.+340    	; 0x153c <dir_sdi+0x19e>
    13e8:	08 81       	ld	r16, Y
    13ea:	19 81       	ldd	r17, Y+1	; 0x01
    13ec:	4e 87       	std	Y+14, r20	; 0x0e
    13ee:	5f 87       	std	Y+15, r21	; 0x0f
    13f0:	68 8b       	std	Y+16, r22	; 0x10
    13f2:	79 8b       	std	Y+17, r23	; 0x11
    13f4:	8e 80       	ldd	r8, Y+6	; 0x06
    13f6:	9f 80       	ldd	r9, Y+7	; 0x07
    13f8:	a8 84       	ldd	r10, Y+8	; 0x08
    13fa:	b9 84       	ldd	r11, Y+9	; 0x09
    13fc:	81 14       	cp	r8, r1
    13fe:	91 04       	cpc	r9, r1
    1400:	a1 04       	cpc	r10, r1
    1402:	b1 04       	cpc	r11, r1
    1404:	61 f5       	brne	.+88     	; 0x145e <dir_sdi+0xc0>
    1406:	f8 01       	movw	r30, r16
    1408:	80 81       	ld	r24, Z
    140a:	83 30       	cpi	r24, 0x03	; 3
    140c:	40 f0       	brcs	.+16     	; 0x141e <dir_sdi+0x80>
    140e:	83 a1       	ldd	r24, Z+35	; 0x23
    1410:	94 a1       	ldd	r25, Z+36	; 0x24
    1412:	a5 a1       	ldd	r26, Z+37	; 0x25
    1414:	b6 a1       	ldd	r27, Z+38	; 0x26
    1416:	00 97       	sbiw	r24, 0x00	; 0
    1418:	a1 05       	cpc	r26, r1
    141a:	b1 05       	cpc	r27, r1
    141c:	f1 f4       	brne	.+60     	; 0x145a <dir_sdi+0xbc>
    141e:	f8 01       	movw	r30, r16
    1420:	87 81       	ldd	r24, Z+7	; 0x07
    1422:	90 85       	ldd	r25, Z+8	; 0x08
    1424:	a0 e0       	ldi	r26, 0x00	; 0
    1426:	b0 e0       	ldi	r27, 0x00	; 0
    1428:	b7 01       	movw	r22, r14
    142a:	a6 01       	movw	r20, r12
    142c:	68 94       	set
    142e:	14 f8       	bld	r1, 4
    1430:	76 95       	lsr	r23
    1432:	67 95       	ror	r22
    1434:	57 95       	ror	r21
    1436:	47 95       	ror	r20
    1438:	16 94       	lsr	r1
    143a:	d1 f7       	brne	.-12     	; 0x1430 <dir_sdi+0x92>
    143c:	48 17       	cp	r20, r24
    143e:	59 07       	cpc	r21, r25
    1440:	6a 07       	cpc	r22, r26
    1442:	7b 07       	cpc	r23, r27
    1444:	08 f0       	brcs	.+2      	; 0x1448 <dir_sdi+0xaa>
    1446:	7c c0       	rjmp	.+248    	; 0x1540 <dir_sdi+0x1a2>
    1448:	83 a1       	ldd	r24, Z+35	; 0x23
    144a:	94 a1       	ldd	r25, Z+36	; 0x24
    144c:	a5 a1       	ldd	r26, Z+37	; 0x25
    144e:	b6 a1       	ldd	r27, Z+38	; 0x26
    1450:	8e 8b       	std	Y+22, r24	; 0x16
    1452:	9f 8b       	std	Y+23, r25	; 0x17
    1454:	a8 8f       	std	Y+24, r26	; 0x18
    1456:	b9 8f       	std	Y+25, r27	; 0x19
    1458:	46 c0       	rjmp	.+140    	; 0x14e6 <dir_sdi+0x148>
    145a:	4c 01       	movw	r8, r24
    145c:	5d 01       	movw	r10, r26
    145e:	f8 01       	movw	r30, r16
    1460:	41 84       	ldd	r4, Z+9	; 0x09
    1462:	52 84       	ldd	r5, Z+10	; 0x0a
    1464:	61 2c       	mov	r6, r1
    1466:	71 2c       	mov	r7, r1
    1468:	03 2e       	mov	r0, r19
    146a:	39 e0       	ldi	r19, 0x09	; 9
    146c:	44 0c       	add	r4, r4
    146e:	55 1c       	adc	r5, r5
    1470:	66 1c       	adc	r6, r6
    1472:	77 1c       	adc	r7, r7
    1474:	3a 95       	dec	r19
    1476:	d1 f7       	brne	.-12     	; 0x146c <dir_sdi+0xce>
    1478:	30 2d       	mov	r19, r0
    147a:	c4 14       	cp	r12, r4
    147c:	d5 04       	cpc	r13, r5
    147e:	e6 04       	cpc	r14, r6
    1480:	f7 04       	cpc	r15, r7
    1482:	40 f1       	brcs	.+80     	; 0x14d4 <dir_sdi+0x136>
    1484:	b5 01       	movw	r22, r10
    1486:	a4 01       	movw	r20, r8
    1488:	ce 01       	movw	r24, r28
    148a:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <get_fat>
    148e:	4b 01       	movw	r8, r22
    1490:	5c 01       	movw	r10, r24
    1492:	6f 3f       	cpi	r22, 0xFF	; 255
    1494:	7f 4f       	sbci	r23, 0xFF	; 255
    1496:	8f 4f       	sbci	r24, 0xFF	; 255
    1498:	9f 4f       	sbci	r25, 0xFF	; 255
    149a:	09 f4       	brne	.+2      	; 0x149e <dir_sdi+0x100>
    149c:	53 c0       	rjmp	.+166    	; 0x1544 <dir_sdi+0x1a6>
    149e:	82 e0       	ldi	r24, 0x02	; 2
    14a0:	88 16       	cp	r8, r24
    14a2:	91 04       	cpc	r9, r1
    14a4:	a1 04       	cpc	r10, r1
    14a6:	b1 04       	cpc	r11, r1
    14a8:	08 f4       	brcc	.+2      	; 0x14ac <dir_sdi+0x10e>
    14aa:	4e c0       	rjmp	.+156    	; 0x1548 <dir_sdi+0x1aa>
    14ac:	f8 01       	movw	r30, r16
    14ae:	83 89       	ldd	r24, Z+19	; 0x13
    14b0:	94 89       	ldd	r25, Z+20	; 0x14
    14b2:	a5 89       	ldd	r26, Z+21	; 0x15
    14b4:	b6 89       	ldd	r27, Z+22	; 0x16
    14b6:	88 16       	cp	r8, r24
    14b8:	99 06       	cpc	r9, r25
    14ba:	aa 06       	cpc	r10, r26
    14bc:	bb 06       	cpc	r11, r27
    14be:	08 f0       	brcs	.+2      	; 0x14c2 <dir_sdi+0x124>
    14c0:	45 c0       	rjmp	.+138    	; 0x154c <dir_sdi+0x1ae>
    14c2:	c4 18       	sub	r12, r4
    14c4:	d5 08       	sbc	r13, r5
    14c6:	e6 08       	sbc	r14, r6
    14c8:	f7 08       	sbc	r15, r7
    14ca:	c4 14       	cp	r12, r4
    14cc:	d5 04       	cpc	r13, r5
    14ce:	e6 04       	cpc	r14, r6
    14d0:	f7 04       	cpc	r15, r7
    14d2:	c0 f6       	brcc	.-80     	; 0x1484 <dir_sdi+0xe6>
    14d4:	b5 01       	movw	r22, r10
    14d6:	a4 01       	movw	r20, r8
    14d8:	c8 01       	movw	r24, r16
    14da:	0e 94 c6 05 	call	0xb8c	; 0xb8c <clst2sect>
    14de:	6e 8b       	std	Y+22, r22	; 0x16
    14e0:	7f 8b       	std	Y+23, r23	; 0x17
    14e2:	88 8f       	std	Y+24, r24	; 0x18
    14e4:	99 8f       	std	Y+25, r25	; 0x19
    14e6:	8a 8a       	std	Y+18, r8	; 0x12
    14e8:	9b 8a       	std	Y+19, r9	; 0x13
    14ea:	ac 8a       	std	Y+20, r10	; 0x14
    14ec:	bd 8a       	std	Y+21, r11	; 0x15
    14ee:	8e 89       	ldd	r24, Y+22	; 0x16
    14f0:	9f 89       	ldd	r25, Y+23	; 0x17
    14f2:	a8 8d       	ldd	r26, Y+24	; 0x18
    14f4:	b9 8d       	ldd	r27, Y+25	; 0x19
    14f6:	00 97       	sbiw	r24, 0x00	; 0
    14f8:	a1 05       	cpc	r26, r1
    14fa:	b1 05       	cpc	r27, r1
    14fc:	49 f1       	breq	.+82     	; 0x1550 <dir_sdi+0x1b2>
    14fe:	b7 01       	movw	r22, r14
    1500:	a6 01       	movw	r20, r12
    1502:	03 2e       	mov	r0, r19
    1504:	39 e0       	ldi	r19, 0x09	; 9
    1506:	76 95       	lsr	r23
    1508:	67 95       	ror	r22
    150a:	57 95       	ror	r21
    150c:	47 95       	ror	r20
    150e:	3a 95       	dec	r19
    1510:	d1 f7       	brne	.-12     	; 0x1506 <dir_sdi+0x168>
    1512:	30 2d       	mov	r19, r0
    1514:	84 0f       	add	r24, r20
    1516:	95 1f       	adc	r25, r21
    1518:	a6 1f       	adc	r26, r22
    151a:	b7 1f       	adc	r27, r23
    151c:	8e 8b       	std	Y+22, r24	; 0x16
    151e:	9f 8b       	std	Y+23, r25	; 0x17
    1520:	a8 8f       	std	Y+24, r26	; 0x18
    1522:	b9 8f       	std	Y+25, r27	; 0x19
    1524:	01 5d       	subi	r16, 0xD1	; 209
    1526:	1f 4f       	sbci	r17, 0xFF	; 255
    1528:	f1 e0       	ldi	r31, 0x01	; 1
    152a:	df 22       	and	r13, r31
    152c:	c0 0e       	add	r12, r16
    152e:	d1 1e       	adc	r13, r17
    1530:	ca 8e       	std	Y+26, r12	; 0x1a
    1532:	db 8e       	std	Y+27, r13	; 0x1b
    1534:	80 e0       	ldi	r24, 0x00	; 0
    1536:	0d c0       	rjmp	.+26     	; 0x1552 <dir_sdi+0x1b4>
    1538:	82 e0       	ldi	r24, 0x02	; 2
    153a:	0b c0       	rjmp	.+22     	; 0x1552 <dir_sdi+0x1b4>
    153c:	82 e0       	ldi	r24, 0x02	; 2
    153e:	09 c0       	rjmp	.+18     	; 0x1552 <dir_sdi+0x1b4>
    1540:	82 e0       	ldi	r24, 0x02	; 2
    1542:	07 c0       	rjmp	.+14     	; 0x1552 <dir_sdi+0x1b4>
    1544:	81 e0       	ldi	r24, 0x01	; 1
    1546:	05 c0       	rjmp	.+10     	; 0x1552 <dir_sdi+0x1b4>
    1548:	82 e0       	ldi	r24, 0x02	; 2
    154a:	03 c0       	rjmp	.+6      	; 0x1552 <dir_sdi+0x1b4>
    154c:	82 e0       	ldi	r24, 0x02	; 2
    154e:	01 c0       	rjmp	.+2      	; 0x1552 <dir_sdi+0x1b4>
    1550:	82 e0       	ldi	r24, 0x02	; 2
    1552:	df 91       	pop	r29
    1554:	cf 91       	pop	r28
    1556:	1f 91       	pop	r17
    1558:	0f 91       	pop	r16
    155a:	ff 90       	pop	r15
    155c:	ef 90       	pop	r14
    155e:	df 90       	pop	r13
    1560:	cf 90       	pop	r12
    1562:	bf 90       	pop	r11
    1564:	af 90       	pop	r10
    1566:	9f 90       	pop	r9
    1568:	8f 90       	pop	r8
    156a:	7f 90       	pop	r7
    156c:	6f 90       	pop	r6
    156e:	5f 90       	pop	r5
    1570:	4f 90       	pop	r4
    1572:	08 95       	ret

00001574 <create_chain>:
    1574:	4f 92       	push	r4
    1576:	5f 92       	push	r5
    1578:	6f 92       	push	r6
    157a:	7f 92       	push	r7
    157c:	8f 92       	push	r8
    157e:	9f 92       	push	r9
    1580:	af 92       	push	r10
    1582:	bf 92       	push	r11
    1584:	cf 92       	push	r12
    1586:	df 92       	push	r13
    1588:	ef 92       	push	r14
    158a:	ff 92       	push	r15
    158c:	0f 93       	push	r16
    158e:	1f 93       	push	r17
    1590:	cf 93       	push	r28
    1592:	df 93       	push	r29
    1594:	8c 01       	movw	r16, r24
    1596:	2a 01       	movw	r4, r20
    1598:	3b 01       	movw	r6, r22
    159a:	fc 01       	movw	r30, r24
    159c:	c0 81       	ld	r28, Z
    159e:	d1 81       	ldd	r29, Z+1	; 0x01
    15a0:	41 15       	cp	r20, r1
    15a2:	51 05       	cpc	r21, r1
    15a4:	61 05       	cpc	r22, r1
    15a6:	71 05       	cpc	r23, r1
    15a8:	c9 f4       	brne	.+50     	; 0x15dc <create_chain+0x68>
    15aa:	8b 84       	ldd	r8, Y+11	; 0x0b
    15ac:	9c 84       	ldd	r9, Y+12	; 0x0c
    15ae:	ad 84       	ldd	r10, Y+13	; 0x0d
    15b0:	be 84       	ldd	r11, Y+14	; 0x0e
    15b2:	81 14       	cp	r8, r1
    15b4:	91 04       	cpc	r9, r1
    15b6:	a1 04       	cpc	r10, r1
    15b8:	b1 04       	cpc	r11, r1
    15ba:	09 f4       	brne	.+2      	; 0x15be <create_chain+0x4a>
    15bc:	22 c1       	rjmp	.+580    	; 0x1802 <create_chain+0x28e>
    15be:	8b 89       	ldd	r24, Y+19	; 0x13
    15c0:	9c 89       	ldd	r25, Y+20	; 0x14
    15c2:	ad 89       	ldd	r26, Y+21	; 0x15
    15c4:	be 89       	ldd	r27, Y+22	; 0x16
    15c6:	88 16       	cp	r8, r24
    15c8:	99 06       	cpc	r9, r25
    15ca:	aa 06       	cpc	r10, r26
    15cc:	bb 06       	cpc	r11, r27
    15ce:	08 f4       	brcc	.+2      	; 0x15d2 <create_chain+0x5e>
    15d0:	1c c1       	rjmp	.+568    	; 0x180a <create_chain+0x296>
    15d2:	81 2c       	mov	r8, r1
    15d4:	91 2c       	mov	r9, r1
    15d6:	54 01       	movw	r10, r8
    15d8:	83 94       	inc	r8
    15da:	17 c1       	rjmp	.+558    	; 0x180a <create_chain+0x296>
    15dc:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <get_fat>
    15e0:	62 30       	cpi	r22, 0x02	; 2
    15e2:	71 05       	cpc	r23, r1
    15e4:	81 05       	cpc	r24, r1
    15e6:	91 05       	cpc	r25, r1
    15e8:	08 f4       	brcc	.+2      	; 0x15ec <create_chain+0x78>
    15ea:	d3 c0       	rjmp	.+422    	; 0x1792 <create_chain+0x21e>
    15ec:	6f 3f       	cpi	r22, 0xFF	; 255
    15ee:	ff ef       	ldi	r31, 0xFF	; 255
    15f0:	7f 07       	cpc	r23, r31
    15f2:	8f 07       	cpc	r24, r31
    15f4:	9f 07       	cpc	r25, r31
    15f6:	09 f4       	brne	.+2      	; 0x15fa <create_chain+0x86>
    15f8:	d1 c0       	rjmp	.+418    	; 0x179c <create_chain+0x228>
    15fa:	cb 88       	ldd	r12, Y+19	; 0x13
    15fc:	dc 88       	ldd	r13, Y+20	; 0x14
    15fe:	ed 88       	ldd	r14, Y+21	; 0x15
    1600:	fe 88       	ldd	r15, Y+22	; 0x16
    1602:	6c 15       	cp	r22, r12
    1604:	7d 05       	cpc	r23, r13
    1606:	8e 05       	cpc	r24, r14
    1608:	9f 05       	cpc	r25, r15
    160a:	08 f0       	brcs	.+2      	; 0x160e <create_chain+0x9a>
    160c:	e9 c0       	rjmp	.+466    	; 0x17e0 <create_chain+0x26c>
    160e:	07 c1       	rjmp	.+526    	; 0x181e <create_chain+0x2aa>
    1610:	73 01       	movw	r14, r6
    1612:	62 01       	movw	r12, r4
    1614:	2f ef       	ldi	r18, 0xFF	; 255
    1616:	c2 1a       	sub	r12, r18
    1618:	d2 0a       	sbc	r13, r18
    161a:	e2 0a       	sbc	r14, r18
    161c:	f2 0a       	sbc	r15, r18
    161e:	8b 89       	ldd	r24, Y+19	; 0x13
    1620:	9c 89       	ldd	r25, Y+20	; 0x14
    1622:	ad 89       	ldd	r26, Y+21	; 0x15
    1624:	be 89       	ldd	r27, Y+22	; 0x16
    1626:	c8 16       	cp	r12, r24
    1628:	d9 06       	cpc	r13, r25
    162a:	ea 06       	cpc	r14, r26
    162c:	fb 06       	cpc	r15, r27
    162e:	28 f0       	brcs	.+10     	; 0x163a <create_chain+0xc6>
    1630:	c1 2c       	mov	r12, r1
    1632:	d1 2c       	mov	r13, r1
    1634:	76 01       	movw	r14, r12
    1636:	68 94       	set
    1638:	c1 f8       	bld	r12, 1
    163a:	b7 01       	movw	r22, r14
    163c:	a6 01       	movw	r20, r12
    163e:	c8 01       	movw	r24, r16
    1640:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <get_fat>
    1644:	61 30       	cpi	r22, 0x01	; 1
    1646:	71 05       	cpc	r23, r1
    1648:	81 05       	cpc	r24, r1
    164a:	91 05       	cpc	r25, r1
    164c:	09 f4       	brne	.+2      	; 0x1650 <create_chain+0xdc>
    164e:	aa c0       	rjmp	.+340    	; 0x17a4 <create_chain+0x230>
    1650:	6f 3f       	cpi	r22, 0xFF	; 255
    1652:	ef ef       	ldi	r30, 0xFF	; 255
    1654:	7e 07       	cpc	r23, r30
    1656:	8e 07       	cpc	r24, r30
    1658:	9e 07       	cpc	r25, r30
    165a:	09 f4       	brne	.+2      	; 0x165e <create_chain+0xea>
    165c:	a8 c0       	rjmp	.+336    	; 0x17ae <create_chain+0x23a>
    165e:	67 2b       	or	r22, r23
    1660:	68 2b       	or	r22, r24
    1662:	69 2b       	or	r22, r25
    1664:	b1 f0       	breq	.+44     	; 0x1692 <create_chain+0x11e>
    1666:	8b 84       	ldd	r8, Y+11	; 0x0b
    1668:	9c 84       	ldd	r9, Y+12	; 0x0c
    166a:	ad 84       	ldd	r10, Y+13	; 0x0d
    166c:	be 84       	ldd	r11, Y+14	; 0x0e
    166e:	f2 e0       	ldi	r31, 0x02	; 2
    1670:	8f 16       	cp	r8, r31
    1672:	91 04       	cpc	r9, r1
    1674:	a1 04       	cpc	r10, r1
    1676:	b1 04       	cpc	r11, r1
    1678:	08 f4       	brcc	.+2      	; 0x167c <create_chain+0x108>
    167a:	bd c0       	rjmp	.+378    	; 0x17f6 <create_chain+0x282>
    167c:	8b 89       	ldd	r24, Y+19	; 0x13
    167e:	9c 89       	ldd	r25, Y+20	; 0x14
    1680:	ad 89       	ldd	r26, Y+21	; 0x15
    1682:	be 89       	ldd	r27, Y+22	; 0x16
    1684:	88 16       	cp	r8, r24
    1686:	99 06       	cpc	r9, r25
    1688:	aa 06       	cpc	r10, r26
    168a:	bb 06       	cpc	r11, r27
    168c:	08 f0       	brcs	.+2      	; 0x1690 <create_chain+0x11c>
    168e:	b6 c0       	rjmp	.+364    	; 0x17fc <create_chain+0x288>
    1690:	07 c0       	rjmp	.+14     	; 0x16a0 <create_chain+0x12c>
    1692:	c1 14       	cp	r12, r1
    1694:	d1 04       	cpc	r13, r1
    1696:	e1 04       	cpc	r14, r1
    1698:	f1 04       	cpc	r15, r1
    169a:	d1 f5       	brne	.+116    	; 0x1710 <create_chain+0x19c>
    169c:	53 01       	movw	r10, r6
    169e:	42 01       	movw	r8, r4
    16a0:	75 01       	movw	r14, r10
    16a2:	64 01       	movw	r12, r8
    16a4:	2f ef       	ldi	r18, 0xFF	; 255
    16a6:	c2 1a       	sub	r12, r18
    16a8:	d2 0a       	sbc	r13, r18
    16aa:	e2 0a       	sbc	r14, r18
    16ac:	f2 0a       	sbc	r15, r18
    16ae:	8b 89       	ldd	r24, Y+19	; 0x13
    16b0:	9c 89       	ldd	r25, Y+20	; 0x14
    16b2:	ad 89       	ldd	r26, Y+21	; 0x15
    16b4:	be 89       	ldd	r27, Y+22	; 0x16
    16b6:	c8 16       	cp	r12, r24
    16b8:	d9 06       	cpc	r13, r25
    16ba:	ea 06       	cpc	r14, r26
    16bc:	fb 06       	cpc	r15, r27
    16be:	60 f0       	brcs	.+24     	; 0x16d8 <create_chain+0x164>
    16c0:	82 e0       	ldi	r24, 0x02	; 2
    16c2:	88 16       	cp	r8, r24
    16c4:	91 04       	cpc	r9, r1
    16c6:	a1 04       	cpc	r10, r1
    16c8:	b1 04       	cpc	r11, r1
    16ca:	08 f4       	brcc	.+2      	; 0x16ce <create_chain+0x15a>
    16cc:	74 c0       	rjmp	.+232    	; 0x17b6 <create_chain+0x242>
    16ce:	c1 2c       	mov	r12, r1
    16d0:	d1 2c       	mov	r13, r1
    16d2:	76 01       	movw	r14, r12
    16d4:	68 94       	set
    16d6:	c1 f8       	bld	r12, 1
    16d8:	b7 01       	movw	r22, r14
    16da:	a6 01       	movw	r20, r12
    16dc:	c8 01       	movw	r24, r16
    16de:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <get_fat>
    16e2:	61 15       	cp	r22, r1
    16e4:	71 05       	cpc	r23, r1
    16e6:	81 05       	cpc	r24, r1
    16e8:	91 05       	cpc	r25, r1
    16ea:	91 f0       	breq	.+36     	; 0x1710 <create_chain+0x19c>
    16ec:	61 30       	cpi	r22, 0x01	; 1
    16ee:	71 05       	cpc	r23, r1
    16f0:	81 05       	cpc	r24, r1
    16f2:	91 05       	cpc	r25, r1
    16f4:	09 f4       	brne	.+2      	; 0x16f8 <create_chain+0x184>
    16f6:	63 c0       	rjmp	.+198    	; 0x17be <create_chain+0x24a>
    16f8:	6f 3f       	cpi	r22, 0xFF	; 255
    16fa:	7f 4f       	sbci	r23, 0xFF	; 255
    16fc:	8f 4f       	sbci	r24, 0xFF	; 255
    16fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1700:	09 f4       	brne	.+2      	; 0x1704 <create_chain+0x190>
    1702:	62 c0       	rjmp	.+196    	; 0x17c8 <create_chain+0x254>
    1704:	c8 14       	cp	r12, r8
    1706:	d9 04       	cpc	r13, r9
    1708:	ea 04       	cpc	r14, r10
    170a:	fb 04       	cpc	r15, r11
    170c:	59 f6       	brne	.-106    	; 0x16a4 <create_chain+0x130>
    170e:	60 c0       	rjmp	.+192    	; 0x17d0 <create_chain+0x25c>
    1710:	0f ef       	ldi	r16, 0xFF	; 255
    1712:	1f ef       	ldi	r17, 0xFF	; 255
    1714:	98 01       	movw	r18, r16
    1716:	b7 01       	movw	r22, r14
    1718:	a6 01       	movw	r20, r12
    171a:	ce 01       	movw	r24, r28
    171c:	0e 94 c1 07 	call	0xf82	; 0xf82 <put_fat>
    1720:	81 11       	cpse	r24, r1
    1722:	30 c0       	rjmp	.+96     	; 0x1784 <create_chain+0x210>
    1724:	41 14       	cp	r4, r1
    1726:	51 04       	cpc	r5, r1
    1728:	61 04       	cpc	r6, r1
    172a:	71 04       	cpc	r7, r1
    172c:	49 f0       	breq	.+18     	; 0x1740 <create_chain+0x1cc>
    172e:	97 01       	movw	r18, r14
    1730:	86 01       	movw	r16, r12
    1732:	b3 01       	movw	r22, r6
    1734:	a2 01       	movw	r20, r4
    1736:	ce 01       	movw	r24, r28
    1738:	0e 94 c1 07 	call	0xf82	; 0xf82 <put_fat>
    173c:	81 11       	cpse	r24, r1
    173e:	22 c0       	rjmp	.+68     	; 0x1784 <create_chain+0x210>
    1740:	cb 86       	std	Y+11, r12	; 0x0b
    1742:	dc 86       	std	Y+12, r13	; 0x0c
    1744:	ed 86       	std	Y+13, r14	; 0x0d
    1746:	fe 86       	std	Y+14, r15	; 0x0e
    1748:	4f 85       	ldd	r20, Y+15	; 0x0f
    174a:	58 89       	ldd	r21, Y+16	; 0x10
    174c:	69 89       	ldd	r22, Y+17	; 0x11
    174e:	7a 89       	ldd	r23, Y+18	; 0x12
    1750:	8b 89       	ldd	r24, Y+19	; 0x13
    1752:	9c 89       	ldd	r25, Y+20	; 0x14
    1754:	ad 89       	ldd	r26, Y+21	; 0x15
    1756:	be 89       	ldd	r27, Y+22	; 0x16
    1758:	02 97       	sbiw	r24, 0x02	; 2
    175a:	a1 09       	sbc	r26, r1
    175c:	b1 09       	sbc	r27, r1
    175e:	84 17       	cp	r24, r20
    1760:	95 07       	cpc	r25, r21
    1762:	a6 07       	cpc	r26, r22
    1764:	b7 07       	cpc	r27, r23
    1766:	40 f0       	brcs	.+16     	; 0x1778 <create_chain+0x204>
    1768:	41 50       	subi	r20, 0x01	; 1
    176a:	51 09       	sbc	r21, r1
    176c:	61 09       	sbc	r22, r1
    176e:	71 09       	sbc	r23, r1
    1770:	4f 87       	std	Y+15, r20	; 0x0f
    1772:	58 8b       	std	Y+16, r21	; 0x10
    1774:	69 8b       	std	Y+17, r22	; 0x11
    1776:	7a 8b       	std	Y+18, r23	; 0x12
    1778:	8c 81       	ldd	r24, Y+4	; 0x04
    177a:	81 60       	ori	r24, 0x01	; 1
    177c:	8c 83       	std	Y+4, r24	; 0x04
    177e:	c7 01       	movw	r24, r14
    1780:	b6 01       	movw	r22, r12
    1782:	4d c0       	rjmp	.+154    	; 0x181e <create_chain+0x2aa>
    1784:	81 30       	cpi	r24, 0x01	; 1
    1786:	41 f1       	breq	.+80     	; 0x17d8 <create_chain+0x264>
    1788:	61 e0       	ldi	r22, 0x01	; 1
    178a:	70 e0       	ldi	r23, 0x00	; 0
    178c:	80 e0       	ldi	r24, 0x00	; 0
    178e:	90 e0       	ldi	r25, 0x00	; 0
    1790:	46 c0       	rjmp	.+140    	; 0x181e <create_chain+0x2aa>
    1792:	61 e0       	ldi	r22, 0x01	; 1
    1794:	70 e0       	ldi	r23, 0x00	; 0
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	41 c0       	rjmp	.+130    	; 0x181e <create_chain+0x2aa>
    179c:	6f ef       	ldi	r22, 0xFF	; 255
    179e:	7f ef       	ldi	r23, 0xFF	; 255
    17a0:	cb 01       	movw	r24, r22
    17a2:	3d c0       	rjmp	.+122    	; 0x181e <create_chain+0x2aa>
    17a4:	61 e0       	ldi	r22, 0x01	; 1
    17a6:	70 e0       	ldi	r23, 0x00	; 0
    17a8:	80 e0       	ldi	r24, 0x00	; 0
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	38 c0       	rjmp	.+112    	; 0x181e <create_chain+0x2aa>
    17ae:	6f ef       	ldi	r22, 0xFF	; 255
    17b0:	7f ef       	ldi	r23, 0xFF	; 255
    17b2:	cb 01       	movw	r24, r22
    17b4:	34 c0       	rjmp	.+104    	; 0x181e <create_chain+0x2aa>
    17b6:	60 e0       	ldi	r22, 0x00	; 0
    17b8:	70 e0       	ldi	r23, 0x00	; 0
    17ba:	cb 01       	movw	r24, r22
    17bc:	30 c0       	rjmp	.+96     	; 0x181e <create_chain+0x2aa>
    17be:	61 e0       	ldi	r22, 0x01	; 1
    17c0:	70 e0       	ldi	r23, 0x00	; 0
    17c2:	80 e0       	ldi	r24, 0x00	; 0
    17c4:	90 e0       	ldi	r25, 0x00	; 0
    17c6:	2b c0       	rjmp	.+86     	; 0x181e <create_chain+0x2aa>
    17c8:	6f ef       	ldi	r22, 0xFF	; 255
    17ca:	7f ef       	ldi	r23, 0xFF	; 255
    17cc:	cb 01       	movw	r24, r22
    17ce:	27 c0       	rjmp	.+78     	; 0x181e <create_chain+0x2aa>
    17d0:	60 e0       	ldi	r22, 0x00	; 0
    17d2:	70 e0       	ldi	r23, 0x00	; 0
    17d4:	cb 01       	movw	r24, r22
    17d6:	23 c0       	rjmp	.+70     	; 0x181e <create_chain+0x2aa>
    17d8:	6f ef       	ldi	r22, 0xFF	; 255
    17da:	7f ef       	ldi	r23, 0xFF	; 255
    17dc:	cb 01       	movw	r24, r22
    17de:	1f c0       	rjmp	.+62     	; 0x181e <create_chain+0x2aa>
    17e0:	6f 85       	ldd	r22, Y+15	; 0x0f
    17e2:	78 89       	ldd	r23, Y+16	; 0x10
    17e4:	89 89       	ldd	r24, Y+17	; 0x11
    17e6:	9a 89       	ldd	r25, Y+18	; 0x12
    17e8:	61 15       	cp	r22, r1
    17ea:	71 05       	cpc	r23, r1
    17ec:	81 05       	cpc	r24, r1
    17ee:	91 05       	cpc	r25, r1
    17f0:	09 f0       	breq	.+2      	; 0x17f4 <create_chain+0x280>
    17f2:	0e cf       	rjmp	.-484    	; 0x1610 <create_chain+0x9c>
    17f4:	14 c0       	rjmp	.+40     	; 0x181e <create_chain+0x2aa>
    17f6:	53 01       	movw	r10, r6
    17f8:	42 01       	movw	r8, r4
    17fa:	52 cf       	rjmp	.-348    	; 0x16a0 <create_chain+0x12c>
    17fc:	53 01       	movw	r10, r6
    17fe:	42 01       	movw	r8, r4
    1800:	4f cf       	rjmp	.-354    	; 0x16a0 <create_chain+0x12c>
    1802:	81 2c       	mov	r8, r1
    1804:	91 2c       	mov	r9, r1
    1806:	54 01       	movw	r10, r8
    1808:	83 94       	inc	r8
    180a:	6f 85       	ldd	r22, Y+15	; 0x0f
    180c:	78 89       	ldd	r23, Y+16	; 0x10
    180e:	89 89       	ldd	r24, Y+17	; 0x11
    1810:	9a 89       	ldd	r25, Y+18	; 0x12
    1812:	61 15       	cp	r22, r1
    1814:	71 05       	cpc	r23, r1
    1816:	81 05       	cpc	r24, r1
    1818:	91 05       	cpc	r25, r1
    181a:	09 f0       	breq	.+2      	; 0x181e <create_chain+0x2aa>
    181c:	41 cf       	rjmp	.-382    	; 0x16a0 <create_chain+0x12c>
    181e:	df 91       	pop	r29
    1820:	cf 91       	pop	r28
    1822:	1f 91       	pop	r17
    1824:	0f 91       	pop	r16
    1826:	ff 90       	pop	r15
    1828:	ef 90       	pop	r14
    182a:	df 90       	pop	r13
    182c:	cf 90       	pop	r12
    182e:	bf 90       	pop	r11
    1830:	af 90       	pop	r10
    1832:	9f 90       	pop	r9
    1834:	8f 90       	pop	r8
    1836:	7f 90       	pop	r7
    1838:	6f 90       	pop	r6
    183a:	5f 90       	pop	r5
    183c:	4f 90       	pop	r4
    183e:	08 95       	ret

00001840 <remove_chain>:
    1840:	4f 92       	push	r4
    1842:	5f 92       	push	r5
    1844:	6f 92       	push	r6
    1846:	7f 92       	push	r7
    1848:	af 92       	push	r10
    184a:	bf 92       	push	r11
    184c:	cf 92       	push	r12
    184e:	df 92       	push	r13
    1850:	ef 92       	push	r14
    1852:	ff 92       	push	r15
    1854:	0f 93       	push	r16
    1856:	1f 93       	push	r17
    1858:	cf 93       	push	r28
    185a:	df 93       	push	r29
    185c:	5c 01       	movw	r10, r24
    185e:	6a 01       	movw	r12, r20
    1860:	7b 01       	movw	r14, r22
    1862:	b9 01       	movw	r22, r18
    1864:	a8 01       	movw	r20, r16
    1866:	22 e0       	ldi	r18, 0x02	; 2
    1868:	c2 16       	cp	r12, r18
    186a:	d1 04       	cpc	r13, r1
    186c:	e1 04       	cpc	r14, r1
    186e:	f1 04       	cpc	r15, r1
    1870:	08 f4       	brcc	.+2      	; 0x1874 <remove_chain+0x34>
    1872:	63 c0       	rjmp	.+198    	; 0x193a <remove_chain+0xfa>
    1874:	fc 01       	movw	r30, r24
    1876:	c0 81       	ld	r28, Z
    1878:	d1 81       	ldd	r29, Z+1	; 0x01
    187a:	8b 89       	ldd	r24, Y+19	; 0x13
    187c:	9c 89       	ldd	r25, Y+20	; 0x14
    187e:	ad 89       	ldd	r26, Y+21	; 0x15
    1880:	be 89       	ldd	r27, Y+22	; 0x16
    1882:	c8 16       	cp	r12, r24
    1884:	d9 06       	cpc	r13, r25
    1886:	ea 06       	cpc	r14, r26
    1888:	fb 06       	cpc	r15, r27
    188a:	08 f0       	brcs	.+2      	; 0x188e <remove_chain+0x4e>
    188c:	58 c0       	rjmp	.+176    	; 0x193e <remove_chain+0xfe>
    188e:	41 15       	cp	r20, r1
    1890:	51 05       	cpc	r21, r1
    1892:	61 05       	cpc	r22, r1
    1894:	71 05       	cpc	r23, r1
    1896:	41 f0       	breq	.+16     	; 0x18a8 <remove_chain+0x68>
    1898:	0f ef       	ldi	r16, 0xFF	; 255
    189a:	1f ef       	ldi	r17, 0xFF	; 255
    189c:	98 01       	movw	r18, r16
    189e:	ce 01       	movw	r24, r28
    18a0:	0e 94 c1 07 	call	0xf82	; 0xf82 <put_fat>
    18a4:	81 11       	cpse	r24, r1
    18a6:	52 c0       	rjmp	.+164    	; 0x194c <remove_chain+0x10c>
    18a8:	b7 01       	movw	r22, r14
    18aa:	a6 01       	movw	r20, r12
    18ac:	c5 01       	movw	r24, r10
    18ae:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <get_fat>
    18b2:	2b 01       	movw	r4, r22
    18b4:	3c 01       	movw	r6, r24
    18b6:	61 15       	cp	r22, r1
    18b8:	71 05       	cpc	r23, r1
    18ba:	81 05       	cpc	r24, r1
    18bc:	91 05       	cpc	r25, r1
    18be:	09 f4       	brne	.+2      	; 0x18c2 <remove_chain+0x82>
    18c0:	40 c0       	rjmp	.+128    	; 0x1942 <remove_chain+0x102>
    18c2:	61 30       	cpi	r22, 0x01	; 1
    18c4:	71 05       	cpc	r23, r1
    18c6:	81 05       	cpc	r24, r1
    18c8:	91 05       	cpc	r25, r1
    18ca:	e9 f1       	breq	.+122    	; 0x1946 <remove_chain+0x106>
    18cc:	6f 3f       	cpi	r22, 0xFF	; 255
    18ce:	7f 4f       	sbci	r23, 0xFF	; 255
    18d0:	8f 4f       	sbci	r24, 0xFF	; 255
    18d2:	9f 4f       	sbci	r25, 0xFF	; 255
    18d4:	d1 f1       	breq	.+116    	; 0x194a <remove_chain+0x10a>
    18d6:	00 e0       	ldi	r16, 0x00	; 0
    18d8:	10 e0       	ldi	r17, 0x00	; 0
    18da:	98 01       	movw	r18, r16
    18dc:	b7 01       	movw	r22, r14
    18de:	a6 01       	movw	r20, r12
    18e0:	ce 01       	movw	r24, r28
    18e2:	0e 94 c1 07 	call	0xf82	; 0xf82 <put_fat>
    18e6:	81 11       	cpse	r24, r1
    18e8:	31 c0       	rjmp	.+98     	; 0x194c <remove_chain+0x10c>
    18ea:	8f 85       	ldd	r24, Y+15	; 0x0f
    18ec:	98 89       	ldd	r25, Y+16	; 0x10
    18ee:	a9 89       	ldd	r26, Y+17	; 0x11
    18f0:	ba 89       	ldd	r27, Y+18	; 0x12
    18f2:	4b 89       	ldd	r20, Y+19	; 0x13
    18f4:	5c 89       	ldd	r21, Y+20	; 0x14
    18f6:	6d 89       	ldd	r22, Y+21	; 0x15
    18f8:	7e 89       	ldd	r23, Y+22	; 0x16
    18fa:	6a 01       	movw	r12, r20
    18fc:	7b 01       	movw	r14, r22
    18fe:	e2 e0       	ldi	r30, 0x02	; 2
    1900:	ce 1a       	sub	r12, r30
    1902:	d1 08       	sbc	r13, r1
    1904:	e1 08       	sbc	r14, r1
    1906:	f1 08       	sbc	r15, r1
    1908:	8c 15       	cp	r24, r12
    190a:	9d 05       	cpc	r25, r13
    190c:	ae 05       	cpc	r26, r14
    190e:	bf 05       	cpc	r27, r15
    1910:	50 f4       	brcc	.+20     	; 0x1926 <remove_chain+0xe6>
    1912:	01 96       	adiw	r24, 0x01	; 1
    1914:	a1 1d       	adc	r26, r1
    1916:	b1 1d       	adc	r27, r1
    1918:	8f 87       	std	Y+15, r24	; 0x0f
    191a:	98 8b       	std	Y+16, r25	; 0x10
    191c:	a9 8b       	std	Y+17, r26	; 0x11
    191e:	ba 8b       	std	Y+18, r27	; 0x12
    1920:	8c 81       	ldd	r24, Y+4	; 0x04
    1922:	81 60       	ori	r24, 0x01	; 1
    1924:	8c 83       	std	Y+4, r24	; 0x04
    1926:	73 01       	movw	r14, r6
    1928:	62 01       	movw	r12, r4
    192a:	44 16       	cp	r4, r20
    192c:	55 06       	cpc	r5, r21
    192e:	66 06       	cpc	r6, r22
    1930:	77 06       	cpc	r7, r23
    1932:	08 f4       	brcc	.+2      	; 0x1936 <remove_chain+0xf6>
    1934:	b9 cf       	rjmp	.-142    	; 0x18a8 <remove_chain+0x68>
    1936:	80 e0       	ldi	r24, 0x00	; 0
    1938:	09 c0       	rjmp	.+18     	; 0x194c <remove_chain+0x10c>
    193a:	82 e0       	ldi	r24, 0x02	; 2
    193c:	07 c0       	rjmp	.+14     	; 0x194c <remove_chain+0x10c>
    193e:	82 e0       	ldi	r24, 0x02	; 2
    1940:	05 c0       	rjmp	.+10     	; 0x194c <remove_chain+0x10c>
    1942:	80 e0       	ldi	r24, 0x00	; 0
    1944:	03 c0       	rjmp	.+6      	; 0x194c <remove_chain+0x10c>
    1946:	82 e0       	ldi	r24, 0x02	; 2
    1948:	01 c0       	rjmp	.+2      	; 0x194c <remove_chain+0x10c>
    194a:	81 e0       	ldi	r24, 0x01	; 1
    194c:	df 91       	pop	r29
    194e:	cf 91       	pop	r28
    1950:	1f 91       	pop	r17
    1952:	0f 91       	pop	r16
    1954:	ff 90       	pop	r15
    1956:	ef 90       	pop	r14
    1958:	df 90       	pop	r13
    195a:	cf 90       	pop	r12
    195c:	bf 90       	pop	r11
    195e:	af 90       	pop	r10
    1960:	7f 90       	pop	r7
    1962:	6f 90       	pop	r6
    1964:	5f 90       	pop	r5
    1966:	4f 90       	pop	r4
    1968:	08 95       	ret

0000196a <dir_next>:
    196a:	4f 92       	push	r4
    196c:	5f 92       	push	r5
    196e:	6f 92       	push	r6
    1970:	7f 92       	push	r7
    1972:	af 92       	push	r10
    1974:	bf 92       	push	r11
    1976:	cf 92       	push	r12
    1978:	df 92       	push	r13
    197a:	ef 92       	push	r14
    197c:	ff 92       	push	r15
    197e:	0f 93       	push	r16
    1980:	1f 93       	push	r17
    1982:	cf 93       	push	r28
    1984:	df 93       	push	r29
    1986:	8b 01       	movw	r16, r22
    1988:	fc 01       	movw	r30, r24
    198a:	c6 84       	ldd	r12, Z+14	; 0x0e
    198c:	d7 84       	ldd	r13, Z+15	; 0x0f
    198e:	e0 88       	ldd	r14, Z+16	; 0x10
    1990:	f1 88       	ldd	r15, Z+17	; 0x11
    1992:	f0 e2       	ldi	r31, 0x20	; 32
    1994:	cf 0e       	add	r12, r31
    1996:	d1 1c       	adc	r13, r1
    1998:	e1 1c       	adc	r14, r1
    199a:	f1 1c       	adc	r15, r1
    199c:	c1 14       	cp	r12, r1
    199e:	d1 04       	cpc	r13, r1
    19a0:	20 e2       	ldi	r18, 0x20	; 32
    19a2:	e2 06       	cpc	r14, r18
    19a4:	f1 04       	cpc	r15, r1
    19a6:	38 f0       	brcs	.+14     	; 0x19b6 <dir_next+0x4c>
    19a8:	fc 01       	movw	r30, r24
    19aa:	16 8a       	std	Z+22, r1	; 0x16
    19ac:	17 8a       	std	Z+23, r1	; 0x17
    19ae:	10 8e       	std	Z+24, r1	; 0x18
    19b0:	11 8e       	std	Z+25, r1	; 0x19
    19b2:	84 e0       	ldi	r24, 0x04	; 4
    19b4:	ca c0       	rjmp	.+404    	; 0x1b4a <dir_next+0x1e0>
    19b6:	fc 01       	movw	r30, r24
    19b8:	46 89       	ldd	r20, Z+22	; 0x16
    19ba:	57 89       	ldd	r21, Z+23	; 0x17
    19bc:	60 8d       	ldd	r22, Z+24	; 0x18
    19be:	71 8d       	ldd	r23, Z+25	; 0x19
    19c0:	41 15       	cp	r20, r1
    19c2:	51 05       	cpc	r21, r1
    19c4:	61 05       	cpc	r22, r1
    19c6:	71 05       	cpc	r23, r1
    19c8:	09 f4       	brne	.+2      	; 0x19cc <dir_next+0x62>
    19ca:	b2 c0       	rjmp	.+356    	; 0x1b30 <dir_next+0x1c6>
    19cc:	ec 01       	movw	r28, r24
    19ce:	a0 80       	ld	r10, Z
    19d0:	b1 80       	ldd	r11, Z+1	; 0x01
    19d2:	d7 01       	movw	r26, r14
    19d4:	c6 01       	movw	r24, r12
    19d6:	91 70       	andi	r25, 0x01	; 1
    19d8:	aa 27       	eor	r26, r26
    19da:	bb 27       	eor	r27, r27
    19dc:	89 2b       	or	r24, r25
    19de:	8a 2b       	or	r24, r26
    19e0:	8b 2b       	or	r24, r27
    19e2:	09 f0       	breq	.+2      	; 0x19e6 <dir_next+0x7c>
    19e4:	96 c0       	rjmp	.+300    	; 0x1b12 <dir_next+0x1a8>
    19e6:	4f 5f       	subi	r20, 0xFF	; 255
    19e8:	5f 4f       	sbci	r21, 0xFF	; 255
    19ea:	6f 4f       	sbci	r22, 0xFF	; 255
    19ec:	7f 4f       	sbci	r23, 0xFF	; 255
    19ee:	46 8b       	std	Z+22, r20	; 0x16
    19f0:	57 8b       	std	Z+23, r21	; 0x17
    19f2:	60 8f       	std	Z+24, r22	; 0x18
    19f4:	71 8f       	std	Z+25, r23	; 0x19
    19f6:	42 89       	ldd	r20, Z+18	; 0x12
    19f8:	53 89       	ldd	r21, Z+19	; 0x13
    19fa:	64 89       	ldd	r22, Z+20	; 0x14
    19fc:	75 89       	ldd	r23, Z+21	; 0x15
    19fe:	41 15       	cp	r20, r1
    1a00:	51 05       	cpc	r21, r1
    1a02:	61 05       	cpc	r22, r1
    1a04:	71 05       	cpc	r23, r1
    1a06:	d9 f4       	brne	.+54     	; 0x1a3e <dir_next+0xd4>
    1a08:	f5 01       	movw	r30, r10
    1a0a:	87 81       	ldd	r24, Z+7	; 0x07
    1a0c:	90 85       	ldd	r25, Z+8	; 0x08
    1a0e:	a0 e0       	ldi	r26, 0x00	; 0
    1a10:	b0 e0       	ldi	r27, 0x00	; 0
    1a12:	b7 01       	movw	r22, r14
    1a14:	a6 01       	movw	r20, r12
    1a16:	68 94       	set
    1a18:	14 f8       	bld	r1, 4
    1a1a:	76 95       	lsr	r23
    1a1c:	67 95       	ror	r22
    1a1e:	57 95       	ror	r21
    1a20:	47 95       	ror	r20
    1a22:	16 94       	lsr	r1
    1a24:	d1 f7       	brne	.-12     	; 0x1a1a <dir_next+0xb0>
    1a26:	48 17       	cp	r20, r24
    1a28:	59 07       	cpc	r21, r25
    1a2a:	6a 07       	cpc	r22, r26
    1a2c:	7b 07       	cpc	r23, r27
    1a2e:	08 f4       	brcc	.+2      	; 0x1a32 <dir_next+0xc8>
    1a30:	70 c0       	rjmp	.+224    	; 0x1b12 <dir_next+0x1a8>
    1a32:	1e 8a       	std	Y+22, r1	; 0x16
    1a34:	1f 8a       	std	Y+23, r1	; 0x17
    1a36:	18 8e       	std	Y+24, r1	; 0x18
    1a38:	19 8e       	std	Y+25, r1	; 0x19
    1a3a:	84 e0       	ldi	r24, 0x04	; 4
    1a3c:	86 c0       	rjmp	.+268    	; 0x1b4a <dir_next+0x1e0>
    1a3e:	f5 01       	movw	r30, r10
    1a40:	81 85       	ldd	r24, Z+9	; 0x09
    1a42:	92 85       	ldd	r25, Z+10	; 0x0a
    1a44:	01 97       	sbiw	r24, 0x01	; 1
    1a46:	a0 e0       	ldi	r26, 0x00	; 0
    1a48:	b0 e0       	ldi	r27, 0x00	; 0
    1a4a:	26 01       	movw	r4, r12
    1a4c:	37 01       	movw	r6, r14
    1a4e:	03 2e       	mov	r0, r19
    1a50:	39 e0       	ldi	r19, 0x09	; 9
    1a52:	76 94       	lsr	r7
    1a54:	67 94       	ror	r6
    1a56:	57 94       	ror	r5
    1a58:	47 94       	ror	r4
    1a5a:	3a 95       	dec	r19
    1a5c:	d1 f7       	brne	.-12     	; 0x1a52 <dir_next+0xe8>
    1a5e:	30 2d       	mov	r19, r0
    1a60:	84 21       	and	r24, r4
    1a62:	95 21       	and	r25, r5
    1a64:	a6 21       	and	r26, r6
    1a66:	b7 21       	and	r27, r7
    1a68:	89 2b       	or	r24, r25
    1a6a:	8a 2b       	or	r24, r26
    1a6c:	8b 2b       	or	r24, r27
    1a6e:	09 f0       	breq	.+2      	; 0x1a72 <dir_next+0x108>
    1a70:	50 c0       	rjmp	.+160    	; 0x1b12 <dir_next+0x1a8>
    1a72:	ce 01       	movw	r24, r28
    1a74:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <get_fat>
    1a78:	2b 01       	movw	r4, r22
    1a7a:	3c 01       	movw	r6, r24
    1a7c:	62 30       	cpi	r22, 0x02	; 2
    1a7e:	71 05       	cpc	r23, r1
    1a80:	81 05       	cpc	r24, r1
    1a82:	91 05       	cpc	r25, r1
    1a84:	08 f4       	brcc	.+2      	; 0x1a88 <dir_next+0x11e>
    1a86:	56 c0       	rjmp	.+172    	; 0x1b34 <dir_next+0x1ca>
    1a88:	6f 3f       	cpi	r22, 0xFF	; 255
    1a8a:	7f 4f       	sbci	r23, 0xFF	; 255
    1a8c:	8f 4f       	sbci	r24, 0xFF	; 255
    1a8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <dir_next+0x12a>
    1a92:	52 c0       	rjmp	.+164    	; 0x1b38 <dir_next+0x1ce>
    1a94:	f5 01       	movw	r30, r10
    1a96:	83 89       	ldd	r24, Z+19	; 0x13
    1a98:	94 89       	ldd	r25, Z+20	; 0x14
    1a9a:	a5 89       	ldd	r26, Z+21	; 0x15
    1a9c:	b6 89       	ldd	r27, Z+22	; 0x16
    1a9e:	48 16       	cp	r4, r24
    1aa0:	59 06       	cpc	r5, r25
    1aa2:	6a 06       	cpc	r6, r26
    1aa4:	7b 06       	cpc	r7, r27
    1aa6:	40 f1       	brcs	.+80     	; 0x1af8 <dir_next+0x18e>
    1aa8:	01 2b       	or	r16, r17
    1aaa:	31 f4       	brne	.+12     	; 0x1ab8 <dir_next+0x14e>
    1aac:	1e 8a       	std	Y+22, r1	; 0x16
    1aae:	1f 8a       	std	Y+23, r1	; 0x17
    1ab0:	18 8e       	std	Y+24, r1	; 0x18
    1ab2:	19 8e       	std	Y+25, r1	; 0x19
    1ab4:	84 e0       	ldi	r24, 0x04	; 4
    1ab6:	49 c0       	rjmp	.+146    	; 0x1b4a <dir_next+0x1e0>
    1ab8:	4a 89       	ldd	r20, Y+18	; 0x12
    1aba:	5b 89       	ldd	r21, Y+19	; 0x13
    1abc:	6c 89       	ldd	r22, Y+20	; 0x14
    1abe:	7d 89       	ldd	r23, Y+21	; 0x15
    1ac0:	ce 01       	movw	r24, r28
    1ac2:	0e 94 ba 0a 	call	0x1574	; 0x1574 <create_chain>
    1ac6:	2b 01       	movw	r4, r22
    1ac8:	3c 01       	movw	r6, r24
    1aca:	61 15       	cp	r22, r1
    1acc:	71 05       	cpc	r23, r1
    1ace:	81 05       	cpc	r24, r1
    1ad0:	91 05       	cpc	r25, r1
    1ad2:	a1 f1       	breq	.+104    	; 0x1b3c <dir_next+0x1d2>
    1ad4:	61 30       	cpi	r22, 0x01	; 1
    1ad6:	71 05       	cpc	r23, r1
    1ad8:	81 05       	cpc	r24, r1
    1ada:	91 05       	cpc	r25, r1
    1adc:	89 f1       	breq	.+98     	; 0x1b40 <dir_next+0x1d6>
    1ade:	6f 3f       	cpi	r22, 0xFF	; 255
    1ae0:	2f ef       	ldi	r18, 0xFF	; 255
    1ae2:	72 07       	cpc	r23, r18
    1ae4:	82 07       	cpc	r24, r18
    1ae6:	92 07       	cpc	r25, r18
    1ae8:	69 f1       	breq	.+90     	; 0x1b44 <dir_next+0x1da>
    1aea:	ab 01       	movw	r20, r22
    1aec:	bc 01       	movw	r22, r24
    1aee:	c5 01       	movw	r24, r10
    1af0:	0e 94 e9 06 	call	0xdd2	; 0xdd2 <dir_clear>
    1af4:	81 11       	cpse	r24, r1
    1af6:	28 c0       	rjmp	.+80     	; 0x1b48 <dir_next+0x1de>
    1af8:	4a 8a       	std	Y+18, r4	; 0x12
    1afa:	5b 8a       	std	Y+19, r5	; 0x13
    1afc:	6c 8a       	std	Y+20, r6	; 0x14
    1afe:	7d 8a       	std	Y+21, r7	; 0x15
    1b00:	b3 01       	movw	r22, r6
    1b02:	a2 01       	movw	r20, r4
    1b04:	c5 01       	movw	r24, r10
    1b06:	0e 94 c6 05 	call	0xb8c	; 0xb8c <clst2sect>
    1b0a:	6e 8b       	std	Y+22, r22	; 0x16
    1b0c:	7f 8b       	std	Y+23, r23	; 0x17
    1b0e:	88 8f       	std	Y+24, r24	; 0x18
    1b10:	99 8f       	std	Y+25, r25	; 0x19
    1b12:	ce 86       	std	Y+14, r12	; 0x0e
    1b14:	df 86       	std	Y+15, r13	; 0x0f
    1b16:	e8 8a       	std	Y+16, r14	; 0x10
    1b18:	f9 8a       	std	Y+17, r15	; 0x11
    1b1a:	8f e2       	ldi	r24, 0x2F	; 47
    1b1c:	a8 0e       	add	r10, r24
    1b1e:	b1 1c       	adc	r11, r1
    1b20:	e1 e0       	ldi	r30, 0x01	; 1
    1b22:	de 22       	and	r13, r30
    1b24:	ca 0c       	add	r12, r10
    1b26:	db 1c       	adc	r13, r11
    1b28:	ca 8e       	std	Y+26, r12	; 0x1a
    1b2a:	db 8e       	std	Y+27, r13	; 0x1b
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	0d c0       	rjmp	.+26     	; 0x1b4a <dir_next+0x1e0>
    1b30:	84 e0       	ldi	r24, 0x04	; 4
    1b32:	0b c0       	rjmp	.+22     	; 0x1b4a <dir_next+0x1e0>
    1b34:	82 e0       	ldi	r24, 0x02	; 2
    1b36:	09 c0       	rjmp	.+18     	; 0x1b4a <dir_next+0x1e0>
    1b38:	81 e0       	ldi	r24, 0x01	; 1
    1b3a:	07 c0       	rjmp	.+14     	; 0x1b4a <dir_next+0x1e0>
    1b3c:	87 e0       	ldi	r24, 0x07	; 7
    1b3e:	05 c0       	rjmp	.+10     	; 0x1b4a <dir_next+0x1e0>
    1b40:	82 e0       	ldi	r24, 0x02	; 2
    1b42:	03 c0       	rjmp	.+6      	; 0x1b4a <dir_next+0x1e0>
    1b44:	81 e0       	ldi	r24, 0x01	; 1
    1b46:	01 c0       	rjmp	.+2      	; 0x1b4a <dir_next+0x1e0>
    1b48:	81 e0       	ldi	r24, 0x01	; 1
    1b4a:	df 91       	pop	r29
    1b4c:	cf 91       	pop	r28
    1b4e:	1f 91       	pop	r17
    1b50:	0f 91       	pop	r16
    1b52:	ff 90       	pop	r15
    1b54:	ef 90       	pop	r14
    1b56:	df 90       	pop	r13
    1b58:	cf 90       	pop	r12
    1b5a:	bf 90       	pop	r11
    1b5c:	af 90       	pop	r10
    1b5e:	7f 90       	pop	r7
    1b60:	6f 90       	pop	r6
    1b62:	5f 90       	pop	r5
    1b64:	4f 90       	pop	r4
    1b66:	08 95       	ret

00001b68 <dir_register>:
    1b68:	ef 92       	push	r14
    1b6a:	ff 92       	push	r15
    1b6c:	0f 93       	push	r16
    1b6e:	1f 93       	push	r17
    1b70:	cf 93       	push	r28
    1b72:	8c 01       	movw	r16, r24
    1b74:	dc 01       	movw	r26, r24
    1b76:	ed 90       	ld	r14, X+
    1b78:	fc 90       	ld	r15, X
    1b7a:	40 e0       	ldi	r20, 0x00	; 0
    1b7c:	50 e0       	ldi	r21, 0x00	; 0
    1b7e:	ba 01       	movw	r22, r20
    1b80:	0e 94 cf 09 	call	0x139e	; 0x139e <dir_sdi>
    1b84:	c8 2f       	mov	r28, r24
    1b86:	81 11       	cpse	r24, r1
    1b88:	1d c0       	rjmp	.+58     	; 0x1bc4 <dir_register+0x5c>
    1b8a:	f8 01       	movw	r30, r16
    1b8c:	46 89       	ldd	r20, Z+22	; 0x16
    1b8e:	57 89       	ldd	r21, Z+23	; 0x17
    1b90:	60 8d       	ldd	r22, Z+24	; 0x18
    1b92:	71 8d       	ldd	r23, Z+25	; 0x19
    1b94:	c7 01       	movw	r24, r14
    1b96:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    1b9a:	c8 2f       	mov	r28, r24
    1b9c:	81 11       	cpse	r24, r1
    1b9e:	12 c0       	rjmp	.+36     	; 0x1bc4 <dir_register+0x5c>
    1ba0:	d8 01       	movw	r26, r16
    1ba2:	5a 96       	adiw	r26, 0x1a	; 26
    1ba4:	ed 91       	ld	r30, X+
    1ba6:	fc 91       	ld	r31, X
    1ba8:	5b 97       	sbiw	r26, 0x1b	; 27
    1baa:	80 81       	ld	r24, Z
    1bac:	85 3e       	cpi	r24, 0xE5	; 229
    1bae:	71 f0       	breq	.+28     	; 0x1bcc <dir_register+0x64>
    1bb0:	88 23       	and	r24, r24
    1bb2:	61 f0       	breq	.+24     	; 0x1bcc <dir_register+0x64>
    1bb4:	61 e0       	ldi	r22, 0x01	; 1
    1bb6:	70 e0       	ldi	r23, 0x00	; 0
    1bb8:	c8 01       	movw	r24, r16
    1bba:	0e 94 b5 0c 	call	0x196a	; 0x196a <dir_next>
    1bbe:	c8 2f       	mov	r28, r24
    1bc0:	88 23       	and	r24, r24
    1bc2:	19 f3       	breq	.-58     	; 0x1b8a <dir_register+0x22>
    1bc4:	c4 30       	cpi	r28, 0x04	; 4
    1bc6:	39 f1       	breq	.+78     	; 0x1c16 <dir_register+0xae>
    1bc8:	c1 11       	cpse	r28, r1
    1bca:	26 c0       	rjmp	.+76     	; 0x1c18 <dir_register+0xb0>
    1bcc:	f8 01       	movw	r30, r16
    1bce:	46 89       	ldd	r20, Z+22	; 0x16
    1bd0:	57 89       	ldd	r21, Z+23	; 0x17
    1bd2:	60 8d       	ldd	r22, Z+24	; 0x18
    1bd4:	71 8d       	ldd	r23, Z+25	; 0x19
    1bd6:	c7 01       	movw	r24, r14
    1bd8:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    1bdc:	c8 2f       	mov	r28, r24
    1bde:	81 11       	cpse	r24, r1
    1be0:	1b c0       	rjmp	.+54     	; 0x1c18 <dir_register+0xb0>
    1be2:	40 e2       	ldi	r20, 0x20	; 32
    1be4:	50 e0       	ldi	r21, 0x00	; 0
    1be6:	60 e0       	ldi	r22, 0x00	; 0
    1be8:	70 e0       	ldi	r23, 0x00	; 0
    1bea:	d8 01       	movw	r26, r16
    1bec:	5a 96       	adiw	r26, 0x1a	; 26
    1bee:	8d 91       	ld	r24, X+
    1bf0:	9c 91       	ld	r25, X
    1bf2:	5b 97       	sbiw	r26, 0x1b	; 27
    1bf4:	0e 94 b0 05 	call	0xb60	; 0xb60 <mem_set>
    1bf8:	b8 01       	movw	r22, r16
    1bfa:	64 5e       	subi	r22, 0xE4	; 228
    1bfc:	7f 4f       	sbci	r23, 0xFF	; 255
    1bfe:	4b e0       	ldi	r20, 0x0B	; 11
    1c00:	50 e0       	ldi	r21, 0x00	; 0
    1c02:	f8 01       	movw	r30, r16
    1c04:	82 8d       	ldd	r24, Z+26	; 0x1a
    1c06:	93 8d       	ldd	r25, Z+27	; 0x1b
    1c08:	0e 94 a2 05 	call	0xb44	; 0xb44 <mem_cpy>
    1c0c:	81 e0       	ldi	r24, 0x01	; 1
    1c0e:	d7 01       	movw	r26, r14
    1c10:	13 96       	adiw	r26, 0x03	; 3
    1c12:	8c 93       	st	X, r24
    1c14:	01 c0       	rjmp	.+2      	; 0x1c18 <dir_register+0xb0>
    1c16:	c7 e0       	ldi	r28, 0x07	; 7
    1c18:	8c 2f       	mov	r24, r28
    1c1a:	cf 91       	pop	r28
    1c1c:	1f 91       	pop	r17
    1c1e:	0f 91       	pop	r16
    1c20:	ff 90       	pop	r15
    1c22:	ef 90       	pop	r14
    1c24:	08 95       	ret

00001c26 <check_fs>:
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	ec 01       	movw	r28, r24
    1c2c:	1b 82       	std	Y+3, r1	; 0x03
    1c2e:	8f ef       	ldi	r24, 0xFF	; 255
    1c30:	9f ef       	ldi	r25, 0xFF	; 255
    1c32:	dc 01       	movw	r26, r24
    1c34:	8b a7       	std	Y+43, r24	; 0x2b
    1c36:	9c a7       	std	Y+44, r25	; 0x2c
    1c38:	ad a7       	std	Y+45, r26	; 0x2d
    1c3a:	be a7       	std	Y+46, r27	; 0x2e
    1c3c:	ce 01       	movw	r24, r28
    1c3e:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    1c42:	81 11       	cpse	r24, r1
    1c44:	2b c0       	rjmp	.+86     	; 0x1c9c <check_fs+0x76>
    1c46:	fe 01       	movw	r30, r28
    1c48:	e2 5d       	subi	r30, 0xD2	; 210
    1c4a:	fd 4f       	sbci	r31, 0xFD	; 253
    1c4c:	80 81       	ld	r24, Z
    1c4e:	90 e0       	ldi	r25, 0x00	; 0
    1c50:	98 2f       	mov	r25, r24
    1c52:	88 27       	eor	r24, r24
    1c54:	31 97       	sbiw	r30, 0x01	; 1
    1c56:	20 81       	ld	r18, Z
    1c58:	82 2b       	or	r24, r18
    1c5a:	85 35       	cpi	r24, 0x55	; 85
    1c5c:	9a 4a       	sbci	r25, 0xAA	; 170
    1c5e:	01 f5       	brne	.+64     	; 0x1ca0 <check_fs+0x7a>
    1c60:	8f a5       	ldd	r24, Y+47	; 0x2f
    1c62:	8b 3e       	cpi	r24, 0xEB	; 235
    1c64:	19 f0       	breq	.+6      	; 0x1c6c <check_fs+0x46>
    1c66:	88 5e       	subi	r24, 0xE8	; 232
    1c68:	82 30       	cpi	r24, 0x02	; 2
    1c6a:	e0 f4       	brcc	.+56     	; 0x1ca4 <check_fs+0x7e>
    1c6c:	43 e0       	ldi	r20, 0x03	; 3
    1c6e:	50 e0       	ldi	r21, 0x00	; 0
    1c70:	62 e6       	ldi	r22, 0x62	; 98
    1c72:	70 e2       	ldi	r23, 0x20	; 32
    1c74:	ce 01       	movw	r24, r28
    1c76:	8b 59       	subi	r24, 0x9B	; 155
    1c78:	9f 4f       	sbci	r25, 0xFF	; 255
    1c7a:	0e 94 b8 05 	call	0xb70	; 0xb70 <mem_cmp>
    1c7e:	89 2b       	or	r24, r25
    1c80:	99 f0       	breq	.+38     	; 0x1ca8 <check_fs+0x82>
    1c82:	45 e0       	ldi	r20, 0x05	; 5
    1c84:	50 e0       	ldi	r21, 0x00	; 0
    1c86:	66 e6       	ldi	r22, 0x66	; 102
    1c88:	70 e2       	ldi	r23, 0x20	; 32
    1c8a:	ce 01       	movw	r24, r28
    1c8c:	8f 57       	subi	r24, 0x7F	; 127
    1c8e:	9f 4f       	sbci	r25, 0xFF	; 255
    1c90:	0e 94 b8 05 	call	0xb70	; 0xb70 <mem_cmp>
    1c94:	89 2b       	or	r24, r25
    1c96:	51 f0       	breq	.+20     	; 0x1cac <check_fs+0x86>
    1c98:	82 e0       	ldi	r24, 0x02	; 2
    1c9a:	09 c0       	rjmp	.+18     	; 0x1cae <check_fs+0x88>
    1c9c:	84 e0       	ldi	r24, 0x04	; 4
    1c9e:	07 c0       	rjmp	.+14     	; 0x1cae <check_fs+0x88>
    1ca0:	83 e0       	ldi	r24, 0x03	; 3
    1ca2:	05 c0       	rjmp	.+10     	; 0x1cae <check_fs+0x88>
    1ca4:	82 e0       	ldi	r24, 0x02	; 2
    1ca6:	03 c0       	rjmp	.+6      	; 0x1cae <check_fs+0x88>
    1ca8:	80 e0       	ldi	r24, 0x00	; 0
    1caa:	01 c0       	rjmp	.+2      	; 0x1cae <check_fs+0x88>
    1cac:	80 e0       	ldi	r24, 0x00	; 0
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	08 95       	ret

00001cb4 <find_volume>:
    1cb4:	2f 92       	push	r2
    1cb6:	3f 92       	push	r3
    1cb8:	4f 92       	push	r4
    1cba:	5f 92       	push	r5
    1cbc:	6f 92       	push	r6
    1cbe:	7f 92       	push	r7
    1cc0:	8f 92       	push	r8
    1cc2:	9f 92       	push	r9
    1cc4:	af 92       	push	r10
    1cc6:	bf 92       	push	r11
    1cc8:	cf 92       	push	r12
    1cca:	df 92       	push	r13
    1ccc:	ef 92       	push	r14
    1cce:	ff 92       	push	r15
    1cd0:	0f 93       	push	r16
    1cd2:	1f 93       	push	r17
    1cd4:	cf 93       	push	r28
    1cd6:	df 93       	push	r29
    1cd8:	cd b7       	in	r28, 0x3d	; 61
    1cda:	de b7       	in	r29, 0x3e	; 62
    1cdc:	6e 97       	sbiw	r28, 0x1e	; 30
    1cde:	cd bf       	out	0x3d, r28	; 61
    1ce0:	de bf       	out	0x3e, r29	; 62
    1ce2:	6b 01       	movw	r12, r22
    1ce4:	b4 2e       	mov	r11, r20
    1ce6:	db 01       	movw	r26, r22
    1ce8:	1d 92       	st	X+, r1
    1cea:	1c 92       	st	X, r1
    1cec:	0e 94 ee 05 	call	0xbdc	; 0xbdc <get_ldnumber>
    1cf0:	7c 01       	movw	r14, r24
    1cf2:	99 23       	and	r25, r25
    1cf4:	0c f4       	brge	.+2      	; 0x1cf8 <find_volume+0x44>
    1cf6:	3d c2       	rjmp	.+1146   	; 0x2172 <find_volume+0x4be>
    1cf8:	fc 01       	movw	r30, r24
    1cfa:	ee 0f       	add	r30, r30
    1cfc:	ff 1f       	adc	r31, r31
    1cfe:	e2 52       	subi	r30, 0x22	; 34
    1d00:	ff 4d       	sbci	r31, 0xDF	; 223
    1d02:	00 81       	ld	r16, Z
    1d04:	11 81       	ldd	r17, Z+1	; 0x01
    1d06:	01 15       	cp	r16, r1
    1d08:	11 05       	cpc	r17, r1
    1d0a:	09 f4       	brne	.+2      	; 0x1d0e <find_volume+0x5a>
    1d0c:	34 c2       	rjmp	.+1128   	; 0x2176 <find_volume+0x4c2>
    1d0e:	f6 01       	movw	r30, r12
    1d10:	00 83       	st	Z, r16
    1d12:	11 83       	std	Z+1, r17	; 0x01
    1d14:	fb 2d       	mov	r31, r11
    1d16:	fe 7f       	andi	r31, 0xFE	; 254
    1d18:	bf 2e       	mov	r11, r31
    1d1a:	d8 01       	movw	r26, r16
    1d1c:	8c 91       	ld	r24, X
    1d1e:	88 23       	and	r24, r24
    1d20:	69 f0       	breq	.+26     	; 0x1d3c <find_volume+0x88>
    1d22:	11 96       	adiw	r26, 0x01	; 1
    1d24:	8c 91       	ld	r24, X
    1d26:	0e 94 74 1e 	call	0x3ce8	; 0x3ce8 <disk_status>
    1d2a:	80 fd       	sbrc	r24, 0
    1d2c:	07 c0       	rjmp	.+14     	; 0x1d3c <find_volume+0x88>
    1d2e:	bb 20       	and	r11, r11
    1d30:	09 f4       	brne	.+2      	; 0x1d34 <find_volume+0x80>
    1d32:	23 c2       	rjmp	.+1094   	; 0x217a <find_volume+0x4c6>
    1d34:	82 ff       	sbrs	r24, 2
    1d36:	23 c2       	rjmp	.+1094   	; 0x217e <find_volume+0x4ca>
    1d38:	8a e0       	ldi	r24, 0x0A	; 10
    1d3a:	d4 c2       	rjmp	.+1448   	; 0x22e4 <find_volume+0x630>
    1d3c:	f8 01       	movw	r30, r16
    1d3e:	10 82       	st	Z, r1
    1d40:	e1 82       	std	Z+1, r14	; 0x01
    1d42:	8e 2d       	mov	r24, r14
    1d44:	0e 94 7b 1e 	call	0x3cf6	; 0x3cf6 <disk_initialize>
    1d48:	80 fd       	sbrc	r24, 0
    1d4a:	1b c2       	rjmp	.+1078   	; 0x2182 <find_volume+0x4ce>
    1d4c:	bb 20       	and	r11, r11
    1d4e:	09 f4       	brne	.+2      	; 0x1d52 <find_volume+0x9e>
    1d50:	3e c2       	rjmp	.+1148   	; 0x21ce <find_volume+0x51a>
    1d52:	82 fd       	sbrc	r24, 2
    1d54:	18 c2       	rjmp	.+1072   	; 0x2186 <find_volume+0x4d2>
    1d56:	3b c2       	rjmp	.+1142   	; 0x21ce <find_volume+0x51a>
    1d58:	f7 01       	movw	r30, r14
    1d5a:	34 97       	sbiw	r30, 0x04	; 4
    1d5c:	80 81       	ld	r24, Z
    1d5e:	88 23       	and	r24, r24
    1d60:	21 f0       	breq	.+8      	; 0x1d6a <find_volume+0xb6>
    1d62:	c7 01       	movw	r24, r14
    1d64:	0e 94 87 05 	call	0xb0e	; 0xb0e <ld_dword>
    1d68:	03 c0       	rjmp	.+6      	; 0x1d70 <find_volume+0xbc>
    1d6a:	60 e0       	ldi	r22, 0x00	; 0
    1d6c:	70 e0       	ldi	r23, 0x00	; 0
    1d6e:	cb 01       	movw	r24, r22
    1d70:	d6 01       	movw	r26, r12
    1d72:	6d 93       	st	X+, r22
    1d74:	7d 93       	st	X+, r23
    1d76:	8d 93       	st	X+, r24
    1d78:	9d 93       	st	X+, r25
    1d7a:	6d 01       	movw	r12, r26
    1d7c:	b0 e1       	ldi	r27, 0x10	; 16
    1d7e:	eb 0e       	add	r14, r27
    1d80:	f1 1c       	adc	r15, r1
    1d82:	e8 14       	cp	r14, r8
    1d84:	f9 04       	cpc	r15, r9
    1d86:	41 f7       	brne	.-48     	; 0x1d58 <find_volume+0xa4>
    1d88:	4e 01       	movw	r8, r28
    1d8a:	e1 e1       	ldi	r30, 0x11	; 17
    1d8c:	8e 0e       	add	r8, r30
    1d8e:	91 1c       	adc	r9, r1
    1d90:	d5 01       	movw	r26, r10
    1d92:	cd 90       	ld	r12, X+
    1d94:	dd 90       	ld	r13, X+
    1d96:	ed 90       	ld	r14, X+
    1d98:	fd 90       	ld	r15, X+
    1d9a:	5d 01       	movw	r10, r26
    1d9c:	c1 14       	cp	r12, r1
    1d9e:	d1 04       	cpc	r13, r1
    1da0:	e1 04       	cpc	r14, r1
    1da2:	f1 04       	cpc	r15, r1
    1da4:	41 f0       	breq	.+16     	; 0x1db6 <find_volume+0x102>
    1da6:	b7 01       	movw	r22, r14
    1da8:	a6 01       	movw	r20, r12
    1daa:	c8 01       	movw	r24, r16
    1dac:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <check_fs>
    1db0:	82 30       	cpi	r24, 0x02	; 2
    1db2:	10 f4       	brcc	.+4      	; 0x1db8 <find_volume+0x104>
    1db4:	25 c2       	rjmp	.+1098   	; 0x2200 <find_volume+0x54c>
    1db6:	83 e0       	ldi	r24, 0x03	; 3
    1db8:	a8 14       	cp	r10, r8
    1dba:	b9 04       	cpc	r11, r9
    1dbc:	49 f7       	brne	.-46     	; 0x1d90 <find_volume+0xdc>
    1dbe:	03 c0       	rjmp	.+6      	; 0x1dc6 <find_volume+0x112>
    1dc0:	c1 2c       	mov	r12, r1
    1dc2:	d1 2c       	mov	r13, r1
    1dc4:	76 01       	movw	r14, r12
    1dc6:	84 30       	cpi	r24, 0x04	; 4
    1dc8:	09 f4       	brne	.+2      	; 0x1dcc <find_volume+0x118>
    1dca:	df c1       	rjmp	.+958    	; 0x218a <find_volume+0x4d6>
    1dcc:	82 30       	cpi	r24, 0x02	; 2
    1dce:	08 f0       	brcs	.+2      	; 0x1dd2 <find_volume+0x11e>
    1dd0:	de c1       	rjmp	.+956    	; 0x218e <find_volume+0x4da>
    1dd2:	f8 01       	movw	r30, r16
    1dd4:	83 ad       	ldd	r24, Z+59	; 0x3b
    1dd6:	90 e0       	ldi	r25, 0x00	; 0
    1dd8:	98 2f       	mov	r25, r24
    1dda:	88 27       	eor	r24, r24
    1ddc:	22 ad       	ldd	r18, Z+58	; 0x3a
    1dde:	82 2b       	or	r24, r18
    1de0:	81 15       	cp	r24, r1
    1de2:	92 40       	sbci	r25, 0x02	; 2
    1de4:	09 f0       	breq	.+2      	; 0x1de8 <find_volume+0x134>
    1de6:	d5 c1       	rjmp	.+938    	; 0x2192 <find_volume+0x4de>
    1de8:	f8 01       	movw	r30, r16
    1dea:	ea 5b       	subi	r30, 0xBA	; 186
    1dec:	ff 4f       	sbci	r31, 0xFF	; 255
    1dee:	40 80       	ld	r4, Z
    1df0:	51 2c       	mov	r5, r1
    1df2:	54 2c       	mov	r5, r4
    1df4:	44 24       	eor	r4, r4
    1df6:	31 97       	sbiw	r30, 0x01	; 1
    1df8:	80 81       	ld	r24, Z
    1dfa:	48 2a       	or	r4, r24
    1dfc:	61 2c       	mov	r6, r1
    1dfe:	71 2c       	mov	r7, r1
    1e00:	41 14       	cp	r4, r1
    1e02:	51 04       	cpc	r5, r1
    1e04:	61 04       	cpc	r6, r1
    1e06:	71 04       	cpc	r7, r1
    1e08:	39 f4       	brne	.+14     	; 0x1e18 <find_volume+0x164>
    1e0a:	c8 01       	movw	r24, r16
    1e0c:	8d 5a       	subi	r24, 0xAD	; 173
    1e0e:	9f 4f       	sbci	r25, 0xFF	; 255
    1e10:	0e 94 87 05 	call	0xb0e	; 0xb0e <ld_dword>
    1e14:	2b 01       	movw	r4, r22
    1e16:	3c 01       	movw	r6, r24
    1e18:	d8 01       	movw	r26, r16
    1e1a:	57 96       	adiw	r26, 0x17	; 23
    1e1c:	4d 92       	st	X+, r4
    1e1e:	5d 92       	st	X+, r5
    1e20:	6d 92       	st	X+, r6
    1e22:	7c 92       	st	X, r7
    1e24:	5a 97       	sbiw	r26, 0x1a	; 26
    1e26:	df 96       	adiw	r26, 0x3f	; 63
    1e28:	bc 91       	ld	r27, X
    1e2a:	b9 8b       	std	Y+17, r27	; 0x11
    1e2c:	f8 01       	movw	r30, r16
    1e2e:	b2 83       	std	Z+2, r27	; 0x02
    1e30:	8b 2f       	mov	r24, r27
    1e32:	81 50       	subi	r24, 0x01	; 1
    1e34:	82 30       	cpi	r24, 0x02	; 2
    1e36:	08 f0       	brcs	.+2      	; 0x1e3a <find_volume+0x186>
    1e38:	ae c1       	rjmp	.+860    	; 0x2196 <find_volume+0x4e2>
    1e3a:	34 ad       	ldd	r19, Z+60	; 0x3c
    1e3c:	3e 8f       	std	Y+30, r19	; 0x1e
    1e3e:	83 2f       	mov	r24, r19
    1e40:	90 e0       	ldi	r25, 0x00	; 0
    1e42:	81 87       	std	Z+9, r24	; 0x09
    1e44:	92 87       	std	Z+10, r25	; 0x0a
    1e46:	00 97       	sbiw	r24, 0x00	; 0
    1e48:	09 f4       	brne	.+2      	; 0x1e4c <find_volume+0x198>
    1e4a:	a7 c1       	rjmp	.+846    	; 0x219a <find_volume+0x4e6>
    1e4c:	9c 01       	movw	r18, r24
    1e4e:	21 50       	subi	r18, 0x01	; 1
    1e50:	31 09       	sbc	r19, r1
    1e52:	82 23       	and	r24, r18
    1e54:	93 23       	and	r25, r19
    1e56:	89 2b       	or	r24, r25
    1e58:	09 f0       	breq	.+2      	; 0x1e5c <find_volume+0x1a8>
    1e5a:	a1 c1       	rjmp	.+834    	; 0x219e <find_volume+0x4ea>
    1e5c:	ef 5b       	subi	r30, 0xBF	; 191
    1e5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e60:	80 81       	ld	r24, Z
    1e62:	90 e0       	ldi	r25, 0x00	; 0
    1e64:	98 2f       	mov	r25, r24
    1e66:	88 27       	eor	r24, r24
    1e68:	31 97       	sbiw	r30, 0x01	; 1
    1e6a:	20 81       	ld	r18, Z
    1e6c:	1c 01       	movw	r2, r24
    1e6e:	22 2a       	or	r2, r18
    1e70:	d8 01       	movw	r26, r16
    1e72:	17 96       	adiw	r26, 0x07	; 7
    1e74:	2d 92       	st	X+, r2
    1e76:	3c 92       	st	X, r3
    1e78:	18 97       	sbiw	r26, 0x08	; 8
    1e7a:	c1 01       	movw	r24, r2
    1e7c:	8f 70       	andi	r24, 0x0F	; 15
    1e7e:	99 27       	eor	r25, r25
    1e80:	89 2b       	or	r24, r25
    1e82:	09 f0       	breq	.+2      	; 0x1e86 <find_volume+0x1d2>
    1e84:	8e c1       	rjmp	.+796    	; 0x21a2 <find_volume+0x4ee>
    1e86:	33 96       	adiw	r30, 0x03	; 3
    1e88:	80 80       	ld	r8, Z
    1e8a:	91 2c       	mov	r9, r1
    1e8c:	98 2c       	mov	r9, r8
    1e8e:	88 24       	eor	r8, r8
    1e90:	31 97       	sbiw	r30, 0x01	; 1
    1e92:	80 81       	ld	r24, Z
    1e94:	88 2a       	or	r8, r24
    1e96:	a1 2c       	mov	r10, r1
    1e98:	b1 2c       	mov	r11, r1
    1e9a:	81 14       	cp	r8, r1
    1e9c:	91 04       	cpc	r9, r1
    1e9e:	a1 04       	cpc	r10, r1
    1ea0:	b1 04       	cpc	r11, r1
    1ea2:	39 f4       	brne	.+14     	; 0x1eb2 <find_volume+0x1fe>
    1ea4:	c8 01       	movw	r24, r16
    1ea6:	81 5b       	subi	r24, 0xB1	; 177
    1ea8:	9f 4f       	sbci	r25, 0xFF	; 255
    1eaa:	0e 94 87 05 	call	0xb0e	; 0xb0e <ld_dword>
    1eae:	4b 01       	movw	r8, r22
    1eb0:	5c 01       	movw	r10, r24
    1eb2:	d8 01       	movw	r26, r16
    1eb4:	de 96       	adiw	r26, 0x3e	; 62
    1eb6:	ec 91       	ld	r30, X
    1eb8:	de 97       	sbiw	r26, 0x3e	; 62
    1eba:	f0 e0       	ldi	r31, 0x00	; 0
    1ebc:	fe 2f       	mov	r31, r30
    1ebe:	ee 27       	eor	r30, r30
    1ec0:	dd 96       	adiw	r26, 0x3d	; 61
    1ec2:	8c 91       	ld	r24, X
    1ec4:	e8 2b       	or	r30, r24
    1ec6:	30 97       	sbiw	r30, 0x00	; 0
    1ec8:	09 f4       	brne	.+2      	; 0x1ecc <find_volume+0x218>
    1eca:	6d c1       	rjmp	.+730    	; 0x21a6 <find_volume+0x4f2>
    1ecc:	29 89       	ldd	r18, Y+17	; 0x11
    1ece:	a2 2f       	mov	r26, r18
    1ed0:	b0 e0       	ldi	r27, 0x00	; 0
    1ed2:	a3 01       	movw	r20, r6
    1ed4:	92 01       	movw	r18, r4
    1ed6:	0e 94 8b 23 	call	0x4716	; 0x4716 <__muluhisi3>
    1eda:	6a 8f       	std	Y+26, r22	; 0x1a
    1edc:	7b 8f       	std	Y+27, r23	; 0x1b
    1ede:	8c 8f       	std	Y+28, r24	; 0x1c
    1ee0:	9d 8f       	std	Y+29, r25	; 0x1d
    1ee2:	cf 01       	movw	r24, r30
    1ee4:	a0 e0       	ldi	r26, 0x00	; 0
    1ee6:	b0 e0       	ldi	r27, 0x00	; 0
    1ee8:	8e 8b       	std	Y+22, r24	; 0x16
    1eea:	9f 8b       	std	Y+23, r25	; 0x17
    1eec:	a8 8f       	std	Y+24, r26	; 0x18
    1eee:	b9 8f       	std	Y+25, r27	; 0x19
    1ef0:	c1 01       	movw	r24, r2
    1ef2:	92 95       	swap	r25
    1ef4:	82 95       	swap	r24
    1ef6:	8f 70       	andi	r24, 0x0F	; 15
    1ef8:	89 27       	eor	r24, r25
    1efa:	9f 70       	andi	r25, 0x0F	; 15
    1efc:	89 27       	eor	r24, r25
    1efe:	2e 89       	ldd	r18, Y+22	; 0x16
    1f00:	3f 89       	ldd	r19, Y+23	; 0x17
    1f02:	48 8d       	ldd	r20, Y+24	; 0x18
    1f04:	59 8d       	ldd	r21, Y+25	; 0x19
    1f06:	28 0f       	add	r18, r24
    1f08:	39 1f       	adc	r19, r25
    1f0a:	41 1d       	adc	r20, r1
    1f0c:	51 1d       	adc	r21, r1
    1f0e:	da 01       	movw	r26, r20
    1f10:	c9 01       	movw	r24, r18
    1f12:	2a 8d       	ldd	r18, Y+26	; 0x1a
    1f14:	3b 8d       	ldd	r19, Y+27	; 0x1b
    1f16:	4c 8d       	ldd	r20, Y+28	; 0x1c
    1f18:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1f1a:	28 0f       	add	r18, r24
    1f1c:	39 1f       	adc	r19, r25
    1f1e:	4a 1f       	adc	r20, r26
    1f20:	5b 1f       	adc	r21, r27
    1f22:	2a 8b       	std	Y+18, r18	; 0x12
    1f24:	3b 8b       	std	Y+19, r19	; 0x13
    1f26:	4c 8b       	std	Y+20, r20	; 0x14
    1f28:	5d 8b       	std	Y+21, r21	; 0x15
    1f2a:	82 16       	cp	r8, r18
    1f2c:	93 06       	cpc	r9, r19
    1f2e:	a4 06       	cpc	r10, r20
    1f30:	b5 06       	cpc	r11, r21
    1f32:	08 f4       	brcc	.+2      	; 0x1f36 <find_volume+0x282>
    1f34:	3a c1       	rjmp	.+628    	; 0x21aa <find_volume+0x4f6>
    1f36:	c5 01       	movw	r24, r10
    1f38:	b4 01       	movw	r22, r8
    1f3a:	62 1b       	sub	r22, r18
    1f3c:	73 0b       	sbc	r23, r19
    1f3e:	84 0b       	sbc	r24, r20
    1f40:	95 0b       	sbc	r25, r21
    1f42:	ae 8d       	ldd	r26, Y+30	; 0x1e
    1f44:	2a 2f       	mov	r18, r26
    1f46:	30 e0       	ldi	r19, 0x00	; 0
    1f48:	40 e0       	ldi	r20, 0x00	; 0
    1f4a:	50 e0       	ldi	r21, 0x00	; 0
    1f4c:	0e 94 52 23 	call	0x46a4	; 0x46a4 <__udivmodsi4>
    1f50:	da 01       	movw	r26, r20
    1f52:	c9 01       	movw	r24, r18
    1f54:	21 15       	cp	r18, r1
    1f56:	31 05       	cpc	r19, r1
    1f58:	41 05       	cpc	r20, r1
    1f5a:	51 05       	cpc	r21, r1
    1f5c:	09 f4       	brne	.+2      	; 0x1f60 <find_volume+0x2ac>
    1f5e:	27 c1       	rjmp	.+590    	; 0x21ae <find_volume+0x4fa>
    1f60:	26 3f       	cpi	r18, 0xF6	; 246
    1f62:	ef ef       	ldi	r30, 0xFF	; 255
    1f64:	3e 07       	cpc	r19, r30
    1f66:	4e 07       	cpc	r20, r30
    1f68:	ef e0       	ldi	r30, 0x0F	; 15
    1f6a:	5e 07       	cpc	r21, r30
    1f6c:	18 f4       	brcc	.+6      	; 0x1f74 <find_volume+0x2c0>
    1f6e:	f3 e0       	ldi	r31, 0x03	; 3
    1f70:	f9 8b       	std	Y+17, r31	; 0x11
    1f72:	01 c0       	rjmp	.+2      	; 0x1f76 <find_volume+0x2c2>
    1f74:	19 8a       	std	Y+17, r1	; 0x11
    1f76:	86 3f       	cpi	r24, 0xF6	; 246
    1f78:	6f ef       	ldi	r22, 0xFF	; 255
    1f7a:	96 07       	cpc	r25, r22
    1f7c:	a1 05       	cpc	r26, r1
    1f7e:	b1 05       	cpc	r27, r1
    1f80:	10 f4       	brcc	.+4      	; 0x1f86 <find_volume+0x2d2>
    1f82:	e2 e0       	ldi	r30, 0x02	; 2
    1f84:	e9 8b       	std	Y+17, r30	; 0x11
    1f86:	86 3f       	cpi	r24, 0xF6	; 246
    1f88:	9f 40       	sbci	r25, 0x0F	; 15
    1f8a:	a1 05       	cpc	r26, r1
    1f8c:	b1 05       	cpc	r27, r1
    1f8e:	08 f4       	brcc	.+2      	; 0x1f92 <find_volume+0x2de>
    1f90:	7b c1       	rjmp	.+758    	; 0x2288 <find_volume+0x5d4>
    1f92:	69 89       	ldd	r22, Y+17	; 0x11
    1f94:	66 23       	and	r22, r22
    1f96:	09 f4       	brne	.+2      	; 0x1f9a <find_volume+0x2e6>
    1f98:	0c c1       	rjmp	.+536    	; 0x21b2 <find_volume+0x4fe>
    1f9a:	49 01       	movw	r8, r18
    1f9c:	5a 01       	movw	r10, r20
    1f9e:	82 e0       	ldi	r24, 0x02	; 2
    1fa0:	88 0e       	add	r8, r24
    1fa2:	91 1c       	adc	r9, r1
    1fa4:	a1 1c       	adc	r10, r1
    1fa6:	b1 1c       	adc	r11, r1
    1fa8:	d8 01       	movw	r26, r16
    1faa:	53 96       	adiw	r26, 0x13	; 19
    1fac:	8d 92       	st	X+, r8
    1fae:	9d 92       	st	X+, r9
    1fb0:	ad 92       	st	X+, r10
    1fb2:	bc 92       	st	X, r11
    1fb4:	56 97       	sbiw	r26, 0x16	; 22
    1fb6:	f8 01       	movw	r30, r16
    1fb8:	c3 8e       	std	Z+27, r12	; 0x1b
    1fba:	d4 8e       	std	Z+28, r13	; 0x1c
    1fbc:	e5 8e       	std	Z+29, r14	; 0x1d
    1fbe:	f6 8e       	std	Z+30, r15	; 0x1e
    1fc0:	8e 89       	ldd	r24, Y+22	; 0x16
    1fc2:	9f 89       	ldd	r25, Y+23	; 0x17
    1fc4:	a8 8d       	ldd	r26, Y+24	; 0x18
    1fc6:	b9 8d       	ldd	r27, Y+25	; 0x19
    1fc8:	8c 0d       	add	r24, r12
    1fca:	9d 1d       	adc	r25, r13
    1fcc:	ae 1d       	adc	r26, r14
    1fce:	bf 1d       	adc	r27, r15
    1fd0:	87 8f       	std	Z+31, r24	; 0x1f
    1fd2:	90 a3       	std	Z+32, r25	; 0x20
    1fd4:	a1 a3       	std	Z+33, r26	; 0x21
    1fd6:	b2 a3       	std	Z+34, r27	; 0x22
    1fd8:	4a 89       	ldd	r20, Y+18	; 0x12
    1fda:	5b 89       	ldd	r21, Y+19	; 0x13
    1fdc:	6c 89       	ldd	r22, Y+20	; 0x14
    1fde:	7d 89       	ldd	r23, Y+21	; 0x15
    1fe0:	4c 0d       	add	r20, r12
    1fe2:	5d 1d       	adc	r21, r13
    1fe4:	6e 1d       	adc	r22, r14
    1fe6:	7f 1d       	adc	r23, r15
    1fe8:	47 a3       	std	Z+39, r20	; 0x27
    1fea:	50 a7       	std	Z+40, r21	; 0x28
    1fec:	61 a7       	std	Z+41, r22	; 0x29
    1fee:	72 a7       	std	Z+42, r23	; 0x2a
    1ff0:	f9 89       	ldd	r31, Y+17	; 0x11
    1ff2:	f3 30       	cpi	r31, 0x03	; 3
    1ff4:	d1 f5       	brne	.+116    	; 0x206a <find_volume+0x3b6>
    1ff6:	f8 01       	movw	r30, r16
    1ff8:	e6 5a       	subi	r30, 0xA6	; 166
    1ffa:	ff 4f       	sbci	r31, 0xFF	; 255
    1ffc:	80 81       	ld	r24, Z
    1ffe:	90 e0       	ldi	r25, 0x00	; 0
    2000:	98 2f       	mov	r25, r24
    2002:	88 27       	eor	r24, r24
    2004:	31 97       	sbiw	r30, 0x01	; 1
    2006:	20 81       	ld	r18, Z
    2008:	82 2b       	or	r24, r18
    200a:	89 2b       	or	r24, r25
    200c:	09 f0       	breq	.+2      	; 0x2010 <find_volume+0x35c>
    200e:	d3 c0       	rjmp	.+422    	; 0x21b6 <find_volume+0x502>
    2010:	23 28       	or	r2, r3
    2012:	09 f0       	breq	.+2      	; 0x2016 <find_volume+0x362>
    2014:	d2 c0       	rjmp	.+420    	; 0x21ba <find_volume+0x506>
    2016:	c8 01       	movw	r24, r16
    2018:	85 5a       	subi	r24, 0xA5	; 165
    201a:	9f 4f       	sbci	r25, 0xFF	; 255
    201c:	0e 94 87 05 	call	0xb0e	; 0xb0e <ld_dword>
    2020:	d8 01       	movw	r26, r16
    2022:	93 96       	adiw	r26, 0x23	; 35
    2024:	6d 93       	st	X+, r22
    2026:	7d 93       	st	X+, r23
    2028:	8d 93       	st	X+, r24
    202a:	9c 93       	st	X, r25
    202c:	96 97       	sbiw	r26, 0x26	; 38
    202e:	88 0c       	add	r8, r8
    2030:	99 1c       	adc	r9, r9
    2032:	aa 1c       	adc	r10, r10
    2034:	bb 1c       	adc	r11, r11
    2036:	88 0c       	add	r8, r8
    2038:	99 1c       	adc	r9, r9
    203a:	aa 1c       	adc	r10, r10
    203c:	bb 1c       	adc	r11, r11
    203e:	bf ef       	ldi	r27, 0xFF	; 255
    2040:	8b 0e       	add	r8, r27
    2042:	b1 e0       	ldi	r27, 0x01	; 1
    2044:	9b 1e       	adc	r9, r27
    2046:	a1 1c       	adc	r10, r1
    2048:	b1 1c       	adc	r11, r1
    204a:	07 2e       	mov	r0, r23
    204c:	79 e0       	ldi	r23, 0x09	; 9
    204e:	b6 94       	lsr	r11
    2050:	a7 94       	ror	r10
    2052:	97 94       	ror	r9
    2054:	87 94       	ror	r8
    2056:	7a 95       	dec	r23
    2058:	d1 f7       	brne	.-12     	; 0x204e <find_volume+0x39a>
    205a:	70 2d       	mov	r23, r0
    205c:	48 14       	cp	r4, r8
    205e:	59 04       	cpc	r5, r9
    2060:	6a 04       	cpc	r6, r10
    2062:	7b 04       	cpc	r7, r11
    2064:	08 f4       	brcc	.+2      	; 0x2068 <find_volume+0x3b4>
    2066:	ab c0       	rjmp	.+342    	; 0x21be <find_volume+0x50a>
    2068:	f4 c0       	rjmp	.+488    	; 0x2252 <find_volume+0x59e>
    206a:	23 28       	or	r2, r3
    206c:	09 f4       	brne	.+2      	; 0x2070 <find_volume+0x3bc>
    206e:	a9 c0       	rjmp	.+338    	; 0x21c2 <find_volume+0x50e>
    2070:	2a 8d       	ldd	r18, Y+26	; 0x1a
    2072:	3b 8d       	ldd	r19, Y+27	; 0x1b
    2074:	4c 8d       	ldd	r20, Y+28	; 0x1c
    2076:	5d 8d       	ldd	r21, Y+29	; 0x1d
    2078:	82 0f       	add	r24, r18
    207a:	93 1f       	adc	r25, r19
    207c:	a4 1f       	adc	r26, r20
    207e:	b5 1f       	adc	r27, r21
    2080:	f8 01       	movw	r30, r16
    2082:	83 a3       	std	Z+35, r24	; 0x23
    2084:	94 a3       	std	Z+36, r25	; 0x24
    2086:	a5 a3       	std	Z+37, r26	; 0x25
    2088:	b6 a3       	std	Z+38, r27	; 0x26
    208a:	f9 89       	ldd	r31, Y+17	; 0x11
    208c:	f2 30       	cpi	r31, 0x02	; 2
    208e:	29 f4       	brne	.+10     	; 0x209a <find_volume+0x3e6>
    2090:	88 0c       	add	r8, r8
    2092:	99 1c       	adc	r9, r9
    2094:	aa 1c       	adc	r10, r10
    2096:	bb 1c       	adc	r11, r11
    2098:	c6 c0       	rjmp	.+396    	; 0x2226 <find_volume+0x572>
    209a:	a3 e0       	ldi	r26, 0x03	; 3
    209c:	b0 e0       	ldi	r27, 0x00	; 0
    209e:	a5 01       	movw	r20, r10
    20a0:	94 01       	movw	r18, r8
    20a2:	0e 94 8b 23 	call	0x4716	; 0x4716 <__muluhisi3>
    20a6:	dc 01       	movw	r26, r24
    20a8:	cb 01       	movw	r24, r22
    20aa:	b6 95       	lsr	r27
    20ac:	a7 95       	ror	r26
    20ae:	97 95       	ror	r25
    20b0:	87 95       	ror	r24
    20b2:	21 e0       	ldi	r18, 0x01	; 1
    20b4:	82 22       	and	r8, r18
    20b6:	99 24       	eor	r9, r9
    20b8:	aa 24       	eor	r10, r10
    20ba:	bb 24       	eor	r11, r11
    20bc:	88 0e       	add	r8, r24
    20be:	99 1e       	adc	r9, r25
    20c0:	aa 1e       	adc	r10, r26
    20c2:	bb 1e       	adc	r11, r27
    20c4:	b0 c0       	rjmp	.+352    	; 0x2226 <find_volume+0x572>
    20c6:	b7 01       	movw	r22, r14
    20c8:	a6 01       	movw	r20, r12
    20ca:	4f 5f       	subi	r20, 0xFF	; 255
    20cc:	5f 4f       	sbci	r21, 0xFF	; 255
    20ce:	6f 4f       	sbci	r22, 0xFF	; 255
    20d0:	7f 4f       	sbci	r23, 0xFF	; 255
    20d2:	c8 01       	movw	r24, r16
    20d4:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    20d8:	81 11       	cpse	r24, r1
    20da:	39 c0       	rjmp	.+114    	; 0x214e <find_volume+0x49a>
    20dc:	d8 01       	movw	r26, r16
    20de:	14 96       	adiw	r26, 0x04	; 4
    20e0:	1c 92       	st	X, r1
    20e2:	f8 01       	movw	r30, r16
    20e4:	e2 5d       	subi	r30, 0xD2	; 210
    20e6:	fd 4f       	sbci	r31, 0xFD	; 253
    20e8:	80 81       	ld	r24, Z
    20ea:	90 e0       	ldi	r25, 0x00	; 0
    20ec:	98 2f       	mov	r25, r24
    20ee:	88 27       	eor	r24, r24
    20f0:	31 97       	sbiw	r30, 0x01	; 1
    20f2:	20 81       	ld	r18, Z
    20f4:	82 2b       	or	r24, r18
    20f6:	85 35       	cpi	r24, 0x55	; 85
    20f8:	9a 4a       	sbci	r25, 0xAA	; 170
    20fa:	49 f5       	brne	.+82     	; 0x214e <find_volume+0x49a>
    20fc:	c8 01       	movw	r24, r16
    20fe:	8f 96       	adiw	r24, 0x2f	; 47
    2100:	0e 94 87 05 	call	0xb0e	; 0xb0e <ld_dword>
    2104:	62 35       	cpi	r22, 0x52	; 82
    2106:	72 45       	sbci	r23, 0x52	; 82
    2108:	81 46       	sbci	r24, 0x61	; 97
    210a:	91 44       	sbci	r25, 0x41	; 65
    210c:	01 f5       	brne	.+64     	; 0x214e <find_volume+0x49a>
    210e:	c8 01       	movw	r24, r16
    2110:	8d 5e       	subi	r24, 0xED	; 237
    2112:	9d 4f       	sbci	r25, 0xFD	; 253
    2114:	0e 94 87 05 	call	0xb0e	; 0xb0e <ld_dword>
    2118:	62 37       	cpi	r22, 0x72	; 114
    211a:	72 47       	sbci	r23, 0x72	; 114
    211c:	81 44       	sbci	r24, 0x41	; 65
    211e:	91 46       	sbci	r25, 0x61	; 97
    2120:	b1 f4       	brne	.+44     	; 0x214e <find_volume+0x49a>
    2122:	c8 01       	movw	r24, r16
    2124:	89 5e       	subi	r24, 0xE9	; 233
    2126:	9d 4f       	sbci	r25, 0xFD	; 253
    2128:	0e 94 87 05 	call	0xb0e	; 0xb0e <ld_dword>
    212c:	d8 01       	movw	r26, r16
    212e:	1f 96       	adiw	r26, 0x0f	; 15
    2130:	6d 93       	st	X+, r22
    2132:	7d 93       	st	X+, r23
    2134:	8d 93       	st	X+, r24
    2136:	9c 93       	st	X, r25
    2138:	52 97       	sbiw	r26, 0x12	; 18
    213a:	c8 01       	movw	r24, r16
    213c:	85 5e       	subi	r24, 0xE5	; 229
    213e:	9d 4f       	sbci	r25, 0xFD	; 253
    2140:	0e 94 87 05 	call	0xb0e	; 0xb0e <ld_dword>
    2144:	f8 01       	movw	r30, r16
    2146:	63 87       	std	Z+11, r22	; 0x0b
    2148:	74 87       	std	Z+12, r23	; 0x0c
    214a:	85 87       	std	Z+13, r24	; 0x0d
    214c:	96 87       	std	Z+14, r25	; 0x0e
    214e:	e9 89       	ldd	r30, Y+17	; 0x11
    2150:	d8 01       	movw	r26, r16
    2152:	ec 93       	st	X, r30
    2154:	80 91 dc 20 	lds	r24, 0x20DC	; 0x8020dc <__data_end>
    2158:	90 91 dd 20 	lds	r25, 0x20DD	; 0x8020dd <__data_end+0x1>
    215c:	01 96       	adiw	r24, 0x01	; 1
    215e:	80 93 dc 20 	sts	0x20DC, r24	; 0x8020dc <__data_end>
    2162:	90 93 dd 20 	sts	0x20DD, r25	; 0x8020dd <__data_end+0x1>
    2166:	15 96       	adiw	r26, 0x05	; 5
    2168:	8d 93       	st	X+, r24
    216a:	9c 93       	st	X, r25
    216c:	16 97       	sbiw	r26, 0x06	; 6
    216e:	80 e0       	ldi	r24, 0x00	; 0
    2170:	b9 c0       	rjmp	.+370    	; 0x22e4 <find_volume+0x630>
    2172:	8b e0       	ldi	r24, 0x0B	; 11
    2174:	b7 c0       	rjmp	.+366    	; 0x22e4 <find_volume+0x630>
    2176:	8c e0       	ldi	r24, 0x0C	; 12
    2178:	b5 c0       	rjmp	.+362    	; 0x22e4 <find_volume+0x630>
    217a:	80 e0       	ldi	r24, 0x00	; 0
    217c:	b3 c0       	rjmp	.+358    	; 0x22e4 <find_volume+0x630>
    217e:	80 e0       	ldi	r24, 0x00	; 0
    2180:	b1 c0       	rjmp	.+354    	; 0x22e4 <find_volume+0x630>
    2182:	83 e0       	ldi	r24, 0x03	; 3
    2184:	af c0       	rjmp	.+350    	; 0x22e4 <find_volume+0x630>
    2186:	8a e0       	ldi	r24, 0x0A	; 10
    2188:	ad c0       	rjmp	.+346    	; 0x22e4 <find_volume+0x630>
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	ab c0       	rjmp	.+342    	; 0x22e4 <find_volume+0x630>
    218e:	8d e0       	ldi	r24, 0x0D	; 13
    2190:	a9 c0       	rjmp	.+338    	; 0x22e4 <find_volume+0x630>
    2192:	8d e0       	ldi	r24, 0x0D	; 13
    2194:	a7 c0       	rjmp	.+334    	; 0x22e4 <find_volume+0x630>
    2196:	8d e0       	ldi	r24, 0x0D	; 13
    2198:	a5 c0       	rjmp	.+330    	; 0x22e4 <find_volume+0x630>
    219a:	8d e0       	ldi	r24, 0x0D	; 13
    219c:	a3 c0       	rjmp	.+326    	; 0x22e4 <find_volume+0x630>
    219e:	8d e0       	ldi	r24, 0x0D	; 13
    21a0:	a1 c0       	rjmp	.+322    	; 0x22e4 <find_volume+0x630>
    21a2:	8d e0       	ldi	r24, 0x0D	; 13
    21a4:	9f c0       	rjmp	.+318    	; 0x22e4 <find_volume+0x630>
    21a6:	8d e0       	ldi	r24, 0x0D	; 13
    21a8:	9d c0       	rjmp	.+314    	; 0x22e4 <find_volume+0x630>
    21aa:	8d e0       	ldi	r24, 0x0D	; 13
    21ac:	9b c0       	rjmp	.+310    	; 0x22e4 <find_volume+0x630>
    21ae:	8d e0       	ldi	r24, 0x0D	; 13
    21b0:	99 c0       	rjmp	.+306    	; 0x22e4 <find_volume+0x630>
    21b2:	8d e0       	ldi	r24, 0x0D	; 13
    21b4:	97 c0       	rjmp	.+302    	; 0x22e4 <find_volume+0x630>
    21b6:	8d e0       	ldi	r24, 0x0D	; 13
    21b8:	95 c0       	rjmp	.+298    	; 0x22e4 <find_volume+0x630>
    21ba:	8d e0       	ldi	r24, 0x0D	; 13
    21bc:	93 c0       	rjmp	.+294    	; 0x22e4 <find_volume+0x630>
    21be:	8d e0       	ldi	r24, 0x0D	; 13
    21c0:	91 c0       	rjmp	.+290    	; 0x22e4 <find_volume+0x630>
    21c2:	8d e0       	ldi	r24, 0x0D	; 13
    21c4:	8f c0       	rjmp	.+286    	; 0x22e4 <find_volume+0x630>
    21c6:	81 e0       	ldi	r24, 0x01	; 1
    21c8:	8d c0       	rjmp	.+282    	; 0x22e4 <find_volume+0x630>
    21ca:	8d e0       	ldi	r24, 0x0D	; 13
    21cc:	8b c0       	rjmp	.+278    	; 0x22e4 <find_volume+0x630>
    21ce:	40 e0       	ldi	r20, 0x00	; 0
    21d0:	50 e0       	ldi	r21, 0x00	; 0
    21d2:	ba 01       	movw	r22, r20
    21d4:	c8 01       	movw	r24, r16
    21d6:	0e 94 13 0e 	call	0x1c26	; 0x1c26 <check_fs>
    21da:	82 30       	cpi	r24, 0x02	; 2
    21dc:	09 f0       	breq	.+2      	; 0x21e0 <find_volume+0x52c>
    21de:	f0 cd       	rjmp	.-1056   	; 0x1dc0 <find_volume+0x10c>
    21e0:	9e 01       	movw	r18, r28
    21e2:	2f 5f       	subi	r18, 0xFF	; 255
    21e4:	3f 4f       	sbci	r19, 0xFF	; 255
    21e6:	59 01       	movw	r10, r18
    21e8:	78 01       	movw	r14, r16
    21ea:	3b e0       	ldi	r19, 0x0B	; 11
    21ec:	e3 1a       	sub	r14, r19
    21ee:	3e ef       	ldi	r19, 0xFE	; 254
    21f0:	f3 0a       	sbc	r15, r19
    21f2:	48 01       	movw	r8, r16
    21f4:	4b ec       	ldi	r20, 0xCB	; 203
    21f6:	84 1a       	sub	r8, r20
    21f8:	4d ef       	ldi	r20, 0xFD	; 253
    21fa:	94 0a       	sbc	r9, r20
    21fc:	65 01       	movw	r12, r10
    21fe:	ac cd       	rjmp	.-1192   	; 0x1d58 <find_volume+0xa4>
    2200:	84 30       	cpi	r24, 0x04	; 4
    2202:	09 f0       	breq	.+2      	; 0x2206 <find_volume+0x552>
    2204:	e6 cd       	rjmp	.-1076   	; 0x1dd2 <find_volume+0x11e>
    2206:	df cf       	rjmp	.-66     	; 0x21c6 <find_volume+0x512>
    2208:	8f ef       	ldi	r24, 0xFF	; 255
    220a:	9f ef       	ldi	r25, 0xFF	; 255
    220c:	dc 01       	movw	r26, r24
    220e:	f8 01       	movw	r30, r16
    2210:	87 87       	std	Z+15, r24	; 0x0f
    2212:	90 8b       	std	Z+16, r25	; 0x10
    2214:	a1 8b       	std	Z+17, r26	; 0x11
    2216:	b2 8b       	std	Z+18, r27	; 0x12
    2218:	83 87       	std	Z+11, r24	; 0x0b
    221a:	94 87       	std	Z+12, r25	; 0x0c
    221c:	a5 87       	std	Z+13, r26	; 0x0d
    221e:	b6 87       	std	Z+14, r27	; 0x0e
    2220:	80 e8       	ldi	r24, 0x80	; 128
    2222:	84 83       	std	Z+4, r24	; 0x04
    2224:	94 cf       	rjmp	.-216    	; 0x214e <find_volume+0x49a>
    2226:	ff ef       	ldi	r31, 0xFF	; 255
    2228:	8f 0e       	add	r8, r31
    222a:	f1 e0       	ldi	r31, 0x01	; 1
    222c:	9f 1e       	adc	r9, r31
    222e:	a1 1c       	adc	r10, r1
    2230:	b1 1c       	adc	r11, r1
    2232:	07 2e       	mov	r0, r23
    2234:	79 e0       	ldi	r23, 0x09	; 9
    2236:	b6 94       	lsr	r11
    2238:	a7 94       	ror	r10
    223a:	97 94       	ror	r9
    223c:	87 94       	ror	r8
    223e:	7a 95       	dec	r23
    2240:	d1 f7       	brne	.-12     	; 0x2236 <find_volume+0x582>
    2242:	70 2d       	mov	r23, r0
    2244:	48 14       	cp	r4, r8
    2246:	59 04       	cpc	r5, r9
    2248:	6a 04       	cpc	r6, r10
    224a:	7b 04       	cpc	r7, r11
    224c:	08 f4       	brcc	.+2      	; 0x2250 <find_volume+0x59c>
    224e:	bd cf       	rjmp	.-134    	; 0x21ca <find_volume+0x516>
    2250:	db cf       	rjmp	.-74     	; 0x2208 <find_volume+0x554>
    2252:	8f ef       	ldi	r24, 0xFF	; 255
    2254:	9f ef       	ldi	r25, 0xFF	; 255
    2256:	dc 01       	movw	r26, r24
    2258:	f8 01       	movw	r30, r16
    225a:	87 87       	std	Z+15, r24	; 0x0f
    225c:	90 8b       	std	Z+16, r25	; 0x10
    225e:	a1 8b       	std	Z+17, r26	; 0x11
    2260:	b2 8b       	std	Z+18, r27	; 0x12
    2262:	83 87       	std	Z+11, r24	; 0x0b
    2264:	94 87       	std	Z+12, r25	; 0x0c
    2266:	a5 87       	std	Z+13, r26	; 0x0d
    2268:	b6 87       	std	Z+14, r27	; 0x0e
    226a:	80 e8       	ldi	r24, 0x80	; 128
    226c:	84 83       	std	Z+4, r24	; 0x04
    226e:	e0 5a       	subi	r30, 0xA0	; 160
    2270:	ff 4f       	sbci	r31, 0xFF	; 255
    2272:	80 81       	ld	r24, Z
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	98 2f       	mov	r25, r24
    2278:	88 27       	eor	r24, r24
    227a:	31 97       	sbiw	r30, 0x01	; 1
    227c:	20 81       	ld	r18, Z
    227e:	82 2b       	or	r24, r18
    2280:	01 97       	sbiw	r24, 0x01	; 1
    2282:	09 f0       	breq	.+2      	; 0x2286 <find_volume+0x5d2>
    2284:	64 cf       	rjmp	.-312    	; 0x214e <find_volume+0x49a>
    2286:	1f cf       	rjmp	.-450    	; 0x20c6 <find_volume+0x412>
    2288:	49 01       	movw	r8, r18
    228a:	5a 01       	movw	r10, r20
    228c:	f2 e0       	ldi	r31, 0x02	; 2
    228e:	8f 0e       	add	r8, r31
    2290:	91 1c       	adc	r9, r1
    2292:	a1 1c       	adc	r10, r1
    2294:	b1 1c       	adc	r11, r1
    2296:	d8 01       	movw	r26, r16
    2298:	53 96       	adiw	r26, 0x13	; 19
    229a:	8d 92       	st	X+, r8
    229c:	9d 92       	st	X+, r9
    229e:	ad 92       	st	X+, r10
    22a0:	bc 92       	st	X, r11
    22a2:	56 97       	sbiw	r26, 0x16	; 22
    22a4:	f8 01       	movw	r30, r16
    22a6:	c3 8e       	std	Z+27, r12	; 0x1b
    22a8:	d4 8e       	std	Z+28, r13	; 0x1c
    22aa:	e5 8e       	std	Z+29, r14	; 0x1d
    22ac:	f6 8e       	std	Z+30, r15	; 0x1e
    22ae:	8e 89       	ldd	r24, Y+22	; 0x16
    22b0:	9f 89       	ldd	r25, Y+23	; 0x17
    22b2:	a8 8d       	ldd	r26, Y+24	; 0x18
    22b4:	b9 8d       	ldd	r27, Y+25	; 0x19
    22b6:	8c 0d       	add	r24, r12
    22b8:	9d 1d       	adc	r25, r13
    22ba:	ae 1d       	adc	r26, r14
    22bc:	bf 1d       	adc	r27, r15
    22be:	87 8f       	std	Z+31, r24	; 0x1f
    22c0:	90 a3       	std	Z+32, r25	; 0x20
    22c2:	a1 a3       	std	Z+33, r26	; 0x21
    22c4:	b2 a3       	std	Z+34, r27	; 0x22
    22c6:	2a 89       	ldd	r18, Y+18	; 0x12
    22c8:	3b 89       	ldd	r19, Y+19	; 0x13
    22ca:	4c 89       	ldd	r20, Y+20	; 0x14
    22cc:	5d 89       	ldd	r21, Y+21	; 0x15
    22ce:	c2 0e       	add	r12, r18
    22d0:	d3 1e       	adc	r13, r19
    22d2:	e4 1e       	adc	r14, r20
    22d4:	f5 1e       	adc	r15, r21
    22d6:	c7 a2       	std	Z+39, r12	; 0x27
    22d8:	d0 a6       	std	Z+40, r13	; 0x28
    22da:	e1 a6       	std	Z+41, r14	; 0x29
    22dc:	f2 a6       	std	Z+42, r15	; 0x2a
    22de:	f1 e0       	ldi	r31, 0x01	; 1
    22e0:	f9 8b       	std	Y+17, r31	; 0x11
    22e2:	c3 ce       	rjmp	.-634    	; 0x206a <find_volume+0x3b6>
    22e4:	6e 96       	adiw	r28, 0x1e	; 30
    22e6:	cd bf       	out	0x3d, r28	; 61
    22e8:	de bf       	out	0x3e, r29	; 62
    22ea:	df 91       	pop	r29
    22ec:	cf 91       	pop	r28
    22ee:	1f 91       	pop	r17
    22f0:	0f 91       	pop	r16
    22f2:	ff 90       	pop	r15
    22f4:	ef 90       	pop	r14
    22f6:	df 90       	pop	r13
    22f8:	cf 90       	pop	r12
    22fa:	bf 90       	pop	r11
    22fc:	af 90       	pop	r10
    22fe:	9f 90       	pop	r9
    2300:	8f 90       	pop	r8
    2302:	7f 90       	pop	r7
    2304:	6f 90       	pop	r6
    2306:	5f 90       	pop	r5
    2308:	4f 90       	pop	r4
    230a:	3f 90       	pop	r3
    230c:	2f 90       	pop	r2
    230e:	08 95       	ret

00002310 <ld_clust>:
    2310:	0f 93       	push	r16
    2312:	1f 93       	push	r17
    2314:	dc 01       	movw	r26, r24
    2316:	fb 01       	movw	r30, r22
    2318:	93 8d       	ldd	r25, Z+27	; 0x1b
    231a:	69 2f       	mov	r22, r25
    231c:	70 e0       	ldi	r23, 0x00	; 0
    231e:	76 2f       	mov	r23, r22
    2320:	66 27       	eor	r22, r22
    2322:	82 8d       	ldd	r24, Z+26	; 0x1a
    2324:	68 2b       	or	r22, r24
    2326:	80 e0       	ldi	r24, 0x00	; 0
    2328:	90 e0       	ldi	r25, 0x00	; 0
    232a:	2c 91       	ld	r18, X
    232c:	23 30       	cpi	r18, 0x03	; 3
    232e:	79 f4       	brne	.+30     	; 0x234e <ld_clust+0x3e>
    2330:	05 89       	ldd	r16, Z+21	; 0x15
    2332:	10 e0       	ldi	r17, 0x00	; 0
    2334:	10 2f       	mov	r17, r16
    2336:	00 27       	eor	r16, r16
    2338:	24 89       	ldd	r18, Z+20	; 0x14
    233a:	02 2b       	or	r16, r18
    233c:	20 e0       	ldi	r18, 0x00	; 0
    233e:	30 e0       	ldi	r19, 0x00	; 0
    2340:	98 01       	movw	r18, r16
    2342:	11 27       	eor	r17, r17
    2344:	00 27       	eor	r16, r16
    2346:	60 2b       	or	r22, r16
    2348:	71 2b       	or	r23, r17
    234a:	82 2b       	or	r24, r18
    234c:	93 2b       	or	r25, r19
    234e:	1f 91       	pop	r17
    2350:	0f 91       	pop	r16
    2352:	08 95       	ret

00002354 <follow_path>:
    2354:	5f 92       	push	r5
    2356:	6f 92       	push	r6
    2358:	7f 92       	push	r7
    235a:	8f 92       	push	r8
    235c:	9f 92       	push	r9
    235e:	af 92       	push	r10
    2360:	bf 92       	push	r11
    2362:	cf 92       	push	r12
    2364:	df 92       	push	r13
    2366:	ef 92       	push	r14
    2368:	ff 92       	push	r15
    236a:	0f 93       	push	r16
    236c:	1f 93       	push	r17
    236e:	cf 93       	push	r28
    2370:	df 93       	push	r29
    2372:	ec 01       	movw	r28, r24
    2374:	88 80       	ld	r8, Y
    2376:	99 80       	ldd	r9, Y+1	; 0x01
    2378:	e6 2f       	mov	r30, r22
    237a:	f7 2f       	mov	r31, r23
    237c:	7f 01       	movw	r14, r30
    237e:	81 91       	ld	r24, Z+
    2380:	8f 32       	cpi	r24, 0x2F	; 47
    2382:	e1 f3       	breq	.-8      	; 0x237c <follow_path+0x28>
    2384:	8c 35       	cpi	r24, 0x5C	; 92
    2386:	d1 f3       	breq	.-12     	; 0x237c <follow_path+0x28>
    2388:	1e 82       	std	Y+6, r1	; 0x06
    238a:	1f 82       	std	Y+7, r1	; 0x07
    238c:	18 86       	std	Y+8, r1	; 0x08
    238e:	19 86       	std	Y+9, r1	; 0x09
    2390:	f7 01       	movw	r30, r14
    2392:	80 81       	ld	r24, Z
    2394:	80 32       	cpi	r24, 0x20	; 32
    2396:	50 f4       	brcc	.+20     	; 0x23ac <follow_path+0x58>
    2398:	80 e8       	ldi	r24, 0x80	; 128
    239a:	8f a3       	std	Y+39, r24	; 0x27
    239c:	40 e0       	ldi	r20, 0x00	; 0
    239e:	50 e0       	ldi	r21, 0x00	; 0
    23a0:	ba 01       	movw	r22, r20
    23a2:	ce 01       	movw	r24, r28
    23a4:	0e 94 cf 09 	call	0x139e	; 0x139e <dir_sdi>
    23a8:	78 2e       	mov	r7, r24
    23aa:	25 c1       	rjmp	.+586    	; 0x25f6 <follow_path+0x2a2>
    23ac:	8e 01       	movw	r16, r28
    23ae:	04 5e       	subi	r16, 0xE4	; 228
    23b0:	1f 4f       	sbci	r17, 0xFF	; 255
    23b2:	0f 2e       	mov	r0, r31
    23b4:	f5 e0       	ldi	r31, 0x05	; 5
    23b6:	5f 2e       	mov	r5, r31
    23b8:	f0 2d       	mov	r31, r0
    23ba:	64 01       	movw	r12, r8
    23bc:	ff e2       	ldi	r31, 0x2F	; 47
    23be:	cf 0e       	add	r12, r31
    23c0:	d1 1c       	adc	r13, r1
    23c2:	4b e0       	ldi	r20, 0x0B	; 11
    23c4:	50 e0       	ldi	r21, 0x00	; 0
    23c6:	60 e2       	ldi	r22, 0x20	; 32
    23c8:	70 e0       	ldi	r23, 0x00	; 0
    23ca:	c8 01       	movw	r24, r16
    23cc:	0e 94 b0 05 	call	0xb60	; 0xb60 <mem_set>
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	50 e0       	ldi	r21, 0x00	; 0
    23d4:	80 e0       	ldi	r24, 0x00	; 0
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	68 e0       	ldi	r22, 0x08	; 8
    23da:	70 e0       	ldi	r23, 0x00	; 0
    23dc:	01 c0       	rjmp	.+2      	; 0x23e0 <follow_path+0x8c>
    23de:	c9 01       	movw	r24, r18
    23e0:	9c 01       	movw	r18, r24
    23e2:	2f 5f       	subi	r18, 0xFF	; 255
    23e4:	3f 4f       	sbci	r19, 0xFF	; 255
    23e6:	f7 01       	movw	r30, r14
    23e8:	e8 0f       	add	r30, r24
    23ea:	f9 1f       	adc	r31, r25
    23ec:	b0 81       	ld	r27, Z
    23ee:	b1 32       	cpi	r27, 0x21	; 33
    23f0:	08 f4       	brcc	.+2      	; 0x23f4 <follow_path+0xa0>
    23f2:	52 c0       	rjmp	.+164    	; 0x2498 <follow_path+0x144>
    23f4:	bf 32       	cpi	r27, 0x2F	; 47
    23f6:	11 f0       	breq	.+4      	; 0x23fc <follow_path+0xa8>
    23f8:	bc 35       	cpi	r27, 0x5C	; 92
    23fa:	61 f4       	brne	.+24     	; 0x2414 <follow_path+0xc0>
    23fc:	f7 01       	movw	r30, r14
    23fe:	e2 0f       	add	r30, r18
    2400:	f3 1f       	adc	r31, r19
    2402:	02 c0       	rjmp	.+4      	; 0x2408 <follow_path+0xb4>
    2404:	2f 5f       	subi	r18, 0xFF	; 255
    2406:	3f 4f       	sbci	r19, 0xFF	; 255
    2408:	81 91       	ld	r24, Z+
    240a:	8f 32       	cpi	r24, 0x2F	; 47
    240c:	d9 f3       	breq	.-10     	; 0x2404 <follow_path+0xb0>
    240e:	8c 35       	cpi	r24, 0x5C	; 92
    2410:	c9 f3       	breq	.-14     	; 0x2404 <follow_path+0xb0>
    2412:	42 c0       	rjmp	.+132    	; 0x2498 <follow_path+0x144>
    2414:	be 32       	cpi	r27, 0x2E	; 46
    2416:	09 f4       	brne	.+2      	; 0x241a <follow_path+0xc6>
    2418:	da c0       	rjmp	.+436    	; 0x25ce <follow_path+0x27a>
    241a:	46 17       	cp	r20, r22
    241c:	57 07       	cpc	r21, r23
    241e:	08 f0       	brcs	.+2      	; 0x2422 <follow_path+0xce>
    2420:	94 c0       	rjmp	.+296    	; 0x254a <follow_path+0x1f6>
    2422:	b1 38       	cpi	r27, 0x81	; 129
    2424:	08 f4       	brcc	.+2      	; 0x2428 <follow_path+0xd4>
    2426:	b3 c0       	rjmp	.+358    	; 0x258e <follow_path+0x23a>
    2428:	b0 3a       	cpi	r27, 0xA0	; 160
    242a:	08 f4       	brcc	.+2      	; 0x242e <follow_path+0xda>
    242c:	d8 c0       	rjmp	.+432    	; 0x25de <follow_path+0x28a>
    242e:	e0 e2       	ldi	r30, 0x20	; 32
    2430:	eb 0f       	add	r30, r27
    2432:	ed 31       	cpi	r30, 0x1D	; 29
    2434:	08 f4       	brcc	.+2      	; 0x2438 <follow_path+0xe4>
    2436:	d3 c0       	rjmp	.+422    	; 0x25de <follow_path+0x28a>
    2438:	aa c0       	rjmp	.+340    	; 0x258e <follow_path+0x23a>
    243a:	20 e8       	ldi	r18, 0x80	; 128
    243c:	2a 0f       	add	r18, r26
    243e:	2d 37       	cpi	r18, 0x7D	; 125
    2440:	08 f4       	brcc	.+2      	; 0x2444 <follow_path+0xf0>
    2442:	ae c0       	rjmp	.+348    	; 0x25a0 <follow_path+0x24c>
    2444:	af 37       	cpi	r26, 0x7F	; 127
    2446:	08 f4       	brcc	.+2      	; 0x244a <follow_path+0xf6>
    2448:	ab c0       	rjmp	.+342    	; 0x25a0 <follow_path+0x24c>
    244a:	0f 2e       	mov	r0, r31
    244c:	f6 e0       	ldi	r31, 0x06	; 6
    244e:	7f 2e       	mov	r7, r31
    2450:	f0 2d       	mov	r31, r0
    2452:	d1 c0       	rjmp	.+418    	; 0x25f6 <follow_path+0x2a2>
    2454:	f8 01       	movw	r30, r16
    2456:	e4 0f       	add	r30, r20
    2458:	f5 1f       	adc	r31, r21
    245a:	b0 83       	st	Z, r27
    245c:	fa 01       	movw	r30, r20
    245e:	31 96       	adiw	r30, 0x01	; 1
    2460:	e0 0f       	add	r30, r16
    2462:	f1 1f       	adc	r31, r17
    2464:	4e 5f       	subi	r20, 0xFE	; 254
    2466:	5f 4f       	sbci	r21, 0xFF	; 255
    2468:	a0 83       	st	Z, r26
    246a:	9c 01       	movw	r18, r24
    246c:	b8 cf       	rjmp	.-144    	; 0x23de <follow_path+0x8a>
    246e:	81 91       	ld	r24, Z+
    2470:	88 23       	and	r24, r24
    2472:	09 f4       	brne	.+2      	; 0x2476 <follow_path+0x122>
    2474:	9d c0       	rjmp	.+314    	; 0x25b0 <follow_path+0x25c>
    2476:	90 e0       	ldi	r25, 0x00	; 0
    2478:	a8 16       	cp	r10, r24
    247a:	b9 06       	cpc	r11, r25
    247c:	c1 f7       	brne	.-16     	; 0x246e <follow_path+0x11a>
    247e:	0f 2e       	mov	r0, r31
    2480:	f6 e0       	ldi	r31, 0x06	; 6
    2482:	7f 2e       	mov	r7, r31
    2484:	f0 2d       	mov	r31, r0
    2486:	b7 c0       	rjmp	.+366    	; 0x25f6 <follow_path+0x2a2>
    2488:	b0 52       	subi	r27, 0x20	; 32
    248a:	f8 01       	movw	r30, r16
    248c:	e4 0f       	add	r30, r20
    248e:	f5 1f       	adc	r31, r21
    2490:	b0 83       	st	Z, r27
    2492:	4f 5f       	subi	r20, 0xFF	; 255
    2494:	5f 4f       	sbci	r21, 0xFF	; 255
    2496:	a3 cf       	rjmp	.-186    	; 0x23de <follow_path+0x8a>
    2498:	e2 0e       	add	r14, r18
    249a:	f3 1e       	adc	r15, r19
    249c:	45 2b       	or	r20, r21
    249e:	09 f4       	brne	.+2      	; 0x24a2 <follow_path+0x14e>
    24a0:	59 c0       	rjmp	.+178    	; 0x2554 <follow_path+0x200>
    24a2:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24a4:	85 3e       	cpi	r24, 0xE5	; 229
    24a6:	09 f4       	brne	.+2      	; 0x24aa <follow_path+0x156>
    24a8:	5c 8e       	std	Y+28, r5	; 0x1c
    24aa:	b1 32       	cpi	r27, 0x21	; 33
    24ac:	10 f0       	brcs	.+4      	; 0x24b2 <follow_path+0x15e>
    24ae:	80 e0       	ldi	r24, 0x00	; 0
    24b0:	01 c0       	rjmp	.+2      	; 0x24b4 <follow_path+0x160>
    24b2:	84 e0       	ldi	r24, 0x04	; 4
    24b4:	8f a3       	std	Y+39, r24	; 0x27
    24b6:	a8 80       	ld	r10, Y
    24b8:	b9 80       	ldd	r11, Y+1	; 0x01
    24ba:	40 e0       	ldi	r20, 0x00	; 0
    24bc:	50 e0       	ldi	r21, 0x00	; 0
    24be:	ba 01       	movw	r22, r20
    24c0:	ce 01       	movw	r24, r28
    24c2:	0e 94 cf 09 	call	0x139e	; 0x139e <dir_sdi>
    24c6:	78 2e       	mov	r7, r24
    24c8:	81 11       	cpse	r24, r1
    24ca:	7c c0       	rjmp	.+248    	; 0x25c4 <follow_path+0x270>
    24cc:	4e 89       	ldd	r20, Y+22	; 0x16
    24ce:	5f 89       	ldd	r21, Y+23	; 0x17
    24d0:	68 8d       	ldd	r22, Y+24	; 0x18
    24d2:	79 8d       	ldd	r23, Y+25	; 0x19
    24d4:	c5 01       	movw	r24, r10
    24d6:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    24da:	78 2e       	mov	r7, r24
    24dc:	81 11       	cpse	r24, r1
    24de:	72 c0       	rjmp	.+228    	; 0x25c4 <follow_path+0x270>
    24e0:	ea 8d       	ldd	r30, Y+26	; 0x1a
    24e2:	fb 8d       	ldd	r31, Y+27	; 0x1b
    24e4:	80 81       	ld	r24, Z
    24e6:	88 23       	and	r24, r24
    24e8:	c9 f0       	breq	.+50     	; 0x251c <follow_path+0x1c8>
    24ea:	63 84       	ldd	r6, Z+11	; 0x0b
    24ec:	86 2d       	mov	r24, r6
    24ee:	8f 73       	andi	r24, 0x3F	; 63
    24f0:	8c 83       	std	Y+4, r24	; 0x04
    24f2:	83 85       	ldd	r24, Z+11	; 0x0b
    24f4:	83 fd       	sbrc	r24, 3
    24f6:	09 c0       	rjmp	.+18     	; 0x250a <follow_path+0x1b6>
    24f8:	4b e0       	ldi	r20, 0x0B	; 11
    24fa:	50 e0       	ldi	r21, 0x00	; 0
    24fc:	b8 01       	movw	r22, r16
    24fe:	cf 01       	movw	r24, r30
    2500:	0e 94 b8 05 	call	0xb70	; 0xb70 <mem_cmp>
    2504:	89 2b       	or	r24, r25
    2506:	09 f4       	brne	.+2      	; 0x250a <follow_path+0x1b6>
    2508:	59 c0       	rjmp	.+178    	; 0x25bc <follow_path+0x268>
    250a:	60 e0       	ldi	r22, 0x00	; 0
    250c:	70 e0       	ldi	r23, 0x00	; 0
    250e:	ce 01       	movw	r24, r28
    2510:	0e 94 b5 0c 	call	0x196a	; 0x196a <dir_next>
    2514:	78 2e       	mov	r7, r24
    2516:	88 23       	and	r24, r24
    2518:	c9 f2       	breq	.-78     	; 0x24cc <follow_path+0x178>
    251a:	54 c0       	rjmp	.+168    	; 0x25c4 <follow_path+0x270>
    251c:	8f a1       	ldd	r24, Y+39	; 0x27
    251e:	82 fd       	sbrc	r24, 2
    2520:	1e c0       	rjmp	.+60     	; 0x255e <follow_path+0x20a>
    2522:	0f 2e       	mov	r0, r31
    2524:	f5 e0       	ldi	r31, 0x05	; 5
    2526:	7f 2e       	mov	r7, r31
    2528:	f0 2d       	mov	r31, r0
    252a:	65 c0       	rjmp	.+202    	; 0x25f6 <follow_path+0x2a2>
    252c:	64 fe       	sbrs	r6, 4
    252e:	1b c0       	rjmp	.+54     	; 0x2566 <follow_path+0x212>
    2530:	6e 85       	ldd	r22, Y+14	; 0x0e
    2532:	7f 85       	ldd	r23, Y+15	; 0x0f
    2534:	71 70       	andi	r23, 0x01	; 1
    2536:	6c 0d       	add	r22, r12
    2538:	7d 1d       	adc	r23, r13
    253a:	c4 01       	movw	r24, r8
    253c:	0e 94 88 11 	call	0x2310	; 0x2310 <ld_clust>
    2540:	6e 83       	std	Y+6, r22	; 0x06
    2542:	7f 83       	std	Y+7, r23	; 0x07
    2544:	88 87       	std	Y+8, r24	; 0x08
    2546:	99 87       	std	Y+9, r25	; 0x09
    2548:	3c cf       	rjmp	.-392    	; 0x23c2 <follow_path+0x6e>
    254a:	0f 2e       	mov	r0, r31
    254c:	f6 e0       	ldi	r31, 0x06	; 6
    254e:	7f 2e       	mov	r7, r31
    2550:	f0 2d       	mov	r31, r0
    2552:	51 c0       	rjmp	.+162    	; 0x25f6 <follow_path+0x2a2>
    2554:	0f 2e       	mov	r0, r31
    2556:	f6 e0       	ldi	r31, 0x06	; 6
    2558:	7f 2e       	mov	r7, r31
    255a:	f0 2d       	mov	r31, r0
    255c:	4c c0       	rjmp	.+152    	; 0x25f6 <follow_path+0x2a2>
    255e:	68 94       	set
    2560:	77 24       	eor	r7, r7
    2562:	72 f8       	bld	r7, 2
    2564:	48 c0       	rjmp	.+144    	; 0x25f6 <follow_path+0x2a2>
    2566:	0f 2e       	mov	r0, r31
    2568:	f5 e0       	ldi	r31, 0x05	; 5
    256a:	7f 2e       	mov	r7, r31
    256c:	f0 2d       	mov	r31, r0
    256e:	43 c0       	rjmp	.+134    	; 0x25f6 <follow_path+0x2a2>
    2570:	0f 2e       	mov	r0, r31
    2572:	f6 e0       	ldi	r31, 0x06	; 6
    2574:	7f 2e       	mov	r7, r31
    2576:	f0 2d       	mov	r31, r0
    2578:	3e c0       	rjmp	.+124    	; 0x25f6 <follow_path+0x2a2>
    257a:	0f 2e       	mov	r0, r31
    257c:	f6 e0       	ldi	r31, 0x06	; 6
    257e:	7f 2e       	mov	r7, r31
    2580:	f0 2d       	mov	r31, r0
    2582:	39 c0       	rjmp	.+114    	; 0x25f6 <follow_path+0x2a2>
    2584:	0f 2e       	mov	r0, r31
    2586:	f6 e0       	ldi	r31, 0x06	; 6
    2588:	7f 2e       	mov	r7, r31
    258a:	f0 2d       	mov	r31, r0
    258c:	34 c0       	rjmp	.+104    	; 0x25f6 <follow_path+0x2a2>
    258e:	ab 2e       	mov	r10, r27
    2590:	b1 2c       	mov	r11, r1
    2592:	82 e2       	ldi	r24, 0x22	; 34
    2594:	a8 16       	cp	r10, r24
    2596:	b1 04       	cpc	r11, r1
    2598:	59 f3       	breq	.-42     	; 0x2570 <follow_path+0x21c>
    259a:	ed e6       	ldi	r30, 0x6D	; 109
    259c:	f0 e2       	ldi	r31, 0x20	; 32
    259e:	67 cf       	rjmp	.-306    	; 0x246e <follow_path+0x11a>
    25a0:	9b 01       	movw	r18, r22
    25a2:	21 50       	subi	r18, 0x01	; 1
    25a4:	31 09       	sbc	r19, r1
    25a6:	42 17       	cp	r20, r18
    25a8:	53 07       	cpc	r21, r19
    25aa:	08 f4       	brcc	.+2      	; 0x25ae <follow_path+0x25a>
    25ac:	53 cf       	rjmp	.-346    	; 0x2454 <follow_path+0x100>
    25ae:	e5 cf       	rjmp	.-54     	; 0x257a <follow_path+0x226>
    25b0:	8f e9       	ldi	r24, 0x9F	; 159
    25b2:	8b 0f       	add	r24, r27
    25b4:	8a 31       	cpi	r24, 0x1A	; 26
    25b6:	08 f4       	brcc	.+2      	; 0x25ba <follow_path+0x266>
    25b8:	67 cf       	rjmp	.-306    	; 0x2488 <follow_path+0x134>
    25ba:	67 cf       	rjmp	.-306    	; 0x248a <follow_path+0x136>
    25bc:	8f a1       	ldd	r24, Y+39	; 0x27
    25be:	82 ff       	sbrs	r24, 2
    25c0:	b5 cf       	rjmp	.-150    	; 0x252c <follow_path+0x1d8>
    25c2:	19 c0       	rjmp	.+50     	; 0x25f6 <follow_path+0x2a2>
    25c4:	8f a1       	ldd	r24, Y+39	; 0x27
    25c6:	94 e0       	ldi	r25, 0x04	; 4
    25c8:	79 12       	cpse	r7, r25
    25ca:	15 c0       	rjmp	.+42     	; 0x25f6 <follow_path+0x2a2>
    25cc:	a8 cf       	rjmp	.-176    	; 0x251e <follow_path+0x1ca>
    25ce:	6b 30       	cpi	r22, 0x0B	; 11
    25d0:	71 05       	cpc	r23, r1
    25d2:	c1 f2       	breq	.-80     	; 0x2584 <follow_path+0x230>
    25d4:	48 e0       	ldi	r20, 0x08	; 8
    25d6:	50 e0       	ldi	r21, 0x00	; 0
    25d8:	6b e0       	ldi	r22, 0x0B	; 11
    25da:	70 e0       	ldi	r23, 0x00	; 0
    25dc:	00 cf       	rjmp	.-512    	; 0x23de <follow_path+0x8a>
    25de:	02 96       	adiw	r24, 0x02	; 2
    25e0:	f7 01       	movw	r30, r14
    25e2:	e2 0f       	add	r30, r18
    25e4:	f3 1f       	adc	r31, r19
    25e6:	a0 81       	ld	r26, Z
    25e8:	a0 34       	cpi	r26, 0x40	; 64
    25ea:	08 f0       	brcs	.+2      	; 0x25ee <follow_path+0x29a>
    25ec:	26 cf       	rjmp	.-436    	; 0x243a <follow_path+0xe6>
    25ee:	0f 2e       	mov	r0, r31
    25f0:	f6 e0       	ldi	r31, 0x06	; 6
    25f2:	7f 2e       	mov	r7, r31
    25f4:	f0 2d       	mov	r31, r0
    25f6:	87 2d       	mov	r24, r7
    25f8:	df 91       	pop	r29
    25fa:	cf 91       	pop	r28
    25fc:	1f 91       	pop	r17
    25fe:	0f 91       	pop	r16
    2600:	ff 90       	pop	r15
    2602:	ef 90       	pop	r14
    2604:	df 90       	pop	r13
    2606:	cf 90       	pop	r12
    2608:	bf 90       	pop	r11
    260a:	af 90       	pop	r10
    260c:	9f 90       	pop	r9
    260e:	8f 90       	pop	r8
    2610:	7f 90       	pop	r7
    2612:	6f 90       	pop	r6
    2614:	5f 90       	pop	r5
    2616:	08 95       	ret

00002618 <f_mount>:
    2618:	1f 93       	push	r17
    261a:	cf 93       	push	r28
    261c:	df 93       	push	r29
    261e:	00 d0       	rcall	.+0      	; 0x2620 <f_mount+0x8>
    2620:	00 d0       	rcall	.+0      	; 0x2622 <f_mount+0xa>
    2622:	cd b7       	in	r28, 0x3d	; 61
    2624:	de b7       	in	r29, 0x3e	; 62
    2626:	8b 83       	std	Y+3, r24	; 0x03
    2628:	9c 83       	std	Y+4, r25	; 0x04
    262a:	6d 83       	std	Y+5, r22	; 0x05
    262c:	7e 83       	std	Y+6, r23	; 0x06
    262e:	14 2f       	mov	r17, r20
    2630:	69 83       	std	Y+1, r22	; 0x01
    2632:	7a 83       	std	Y+2, r23	; 0x02
    2634:	ce 01       	movw	r24, r28
    2636:	01 96       	adiw	r24, 0x01	; 1
    2638:	0e 94 ee 05 	call	0xbdc	; 0xbdc <get_ldnumber>
    263c:	99 23       	and	r25, r25
    263e:	24 f1       	brlt	.+72     	; 0x2688 <f_mount+0x70>
    2640:	fc 01       	movw	r30, r24
    2642:	ee 0f       	add	r30, r30
    2644:	ff 1f       	adc	r31, r31
    2646:	e2 52       	subi	r30, 0x22	; 34
    2648:	ff 4d       	sbci	r31, 0xDF	; 223
    264a:	01 90       	ld	r0, Z+
    264c:	f0 81       	ld	r31, Z
    264e:	e0 2d       	mov	r30, r0
    2650:	30 97       	sbiw	r30, 0x00	; 0
    2652:	09 f0       	breq	.+2      	; 0x2656 <f_mount+0x3e>
    2654:	10 82       	st	Z, r1
    2656:	eb 81       	ldd	r30, Y+3	; 0x03
    2658:	fc 81       	ldd	r31, Y+4	; 0x04
    265a:	30 97       	sbiw	r30, 0x00	; 0
    265c:	09 f0       	breq	.+2      	; 0x2660 <f_mount+0x48>
    265e:	10 82       	st	Z, r1
    2660:	88 0f       	add	r24, r24
    2662:	99 1f       	adc	r25, r25
    2664:	fc 01       	movw	r30, r24
    2666:	e2 52       	subi	r30, 0x22	; 34
    2668:	ff 4d       	sbci	r31, 0xDF	; 223
    266a:	8b 81       	ldd	r24, Y+3	; 0x03
    266c:	9c 81       	ldd	r25, Y+4	; 0x04
    266e:	80 83       	st	Z, r24
    2670:	91 83       	std	Z+1, r25	; 0x01
    2672:	11 23       	and	r17, r17
    2674:	59 f0       	breq	.+22     	; 0x268c <f_mount+0x74>
    2676:	40 e0       	ldi	r20, 0x00	; 0
    2678:	be 01       	movw	r22, r28
    267a:	6d 5f       	subi	r22, 0xFD	; 253
    267c:	7f 4f       	sbci	r23, 0xFF	; 255
    267e:	ce 01       	movw	r24, r28
    2680:	05 96       	adiw	r24, 0x05	; 5
    2682:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <find_volume>
    2686:	03 c0       	rjmp	.+6      	; 0x268e <f_mount+0x76>
    2688:	8b e0       	ldi	r24, 0x0B	; 11
    268a:	01 c0       	rjmp	.+2      	; 0x268e <f_mount+0x76>
    268c:	80 e0       	ldi	r24, 0x00	; 0
    268e:	26 96       	adiw	r28, 0x06	; 6
    2690:	cd bf       	out	0x3d, r28	; 61
    2692:	de bf       	out	0x3e, r29	; 62
    2694:	df 91       	pop	r29
    2696:	cf 91       	pop	r28
    2698:	1f 91       	pop	r17
    269a:	08 95       	ret

0000269c <f_open>:
    269c:	2f 92       	push	r2
    269e:	3f 92       	push	r3
    26a0:	4f 92       	push	r4
    26a2:	5f 92       	push	r5
    26a4:	6f 92       	push	r6
    26a6:	7f 92       	push	r7
    26a8:	8f 92       	push	r8
    26aa:	9f 92       	push	r9
    26ac:	af 92       	push	r10
    26ae:	bf 92       	push	r11
    26b0:	cf 92       	push	r12
    26b2:	df 92       	push	r13
    26b4:	ef 92       	push	r14
    26b6:	ff 92       	push	r15
    26b8:	0f 93       	push	r16
    26ba:	1f 93       	push	r17
    26bc:	cf 93       	push	r28
    26be:	df 93       	push	r29
    26c0:	cd b7       	in	r28, 0x3d	; 61
    26c2:	de b7       	in	r29, 0x3e	; 62
    26c4:	ac 97       	sbiw	r28, 0x2c	; 44
    26c6:	cd bf       	out	0x3d, r28	; 61
    26c8:	de bf       	out	0x3e, r29	; 62
    26ca:	6b a7       	std	Y+43, r22	; 0x2b
    26cc:	7c a7       	std	Y+44, r23	; 0x2c
    26ce:	00 97       	sbiw	r24, 0x00	; 0
    26d0:	09 f4       	brne	.+2      	; 0x26d4 <f_open+0x38>
    26d2:	38 c1       	rjmp	.+624    	; 0x2944 <f_open+0x2a8>
    26d4:	14 2f       	mov	r17, r20
    26d6:	7c 01       	movw	r14, r24
    26d8:	84 2f       	mov	r24, r20
    26da:	8f 73       	andi	r24, 0x3F	; 63
    26dc:	d8 2e       	mov	r13, r24
    26de:	48 2f       	mov	r20, r24
    26e0:	be 01       	movw	r22, r28
    26e2:	67 5d       	subi	r22, 0xD7	; 215
    26e4:	7f 4f       	sbci	r23, 0xFF	; 255
    26e6:	ce 01       	movw	r24, r28
    26e8:	8b 96       	adiw	r24, 0x2b	; 43
    26ea:	0e 94 5a 0e 	call	0x1cb4	; 0x1cb4 <find_volume>
    26ee:	81 11       	cpse	r24, r1
    26f0:	25 c1       	rjmp	.+586    	; 0x293c <f_open+0x2a0>
    26f2:	89 a5       	ldd	r24, Y+41	; 0x29
    26f4:	9a a5       	ldd	r25, Y+42	; 0x2a
    26f6:	89 83       	std	Y+1, r24	; 0x01
    26f8:	9a 83       	std	Y+2, r25	; 0x02
    26fa:	6b a5       	ldd	r22, Y+43	; 0x2b
    26fc:	7c a5       	ldd	r23, Y+44	; 0x2c
    26fe:	ce 01       	movw	r24, r28
    2700:	01 96       	adiw	r24, 0x01	; 1
    2702:	0e 94 aa 11 	call	0x2354	; 0x2354 <follow_path>
    2706:	81 11       	cpse	r24, r1
    2708:	1f c1       	rjmp	.+574    	; 0x2948 <f_open+0x2ac>
    270a:	88 a5       	ldd	r24, Y+40	; 0x28
    270c:	88 23       	and	r24, r24
    270e:	0c f0       	brlt	.+2      	; 0x2712 <f_open+0x76>
    2710:	24 c1       	rjmp	.+584    	; 0x295a <f_open+0x2be>
    2712:	1e c1       	rjmp	.+572    	; 0x2950 <f_open+0x2b4>
    2714:	84 30       	cpi	r24, 0x04	; 4
    2716:	09 f0       	breq	.+2      	; 0x271a <f_open+0x7e>
    2718:	49 c1       	rjmp	.+658    	; 0x29ac <f_open+0x310>
    271a:	ce 01       	movw	r24, r28
    271c:	01 96       	adiw	r24, 0x01	; 1
    271e:	0e 94 b4 0d 	call	0x1b68	; 0x1b68 <dir_register>
    2722:	9d 2d       	mov	r25, r13
    2724:	98 60       	ori	r25, 0x08	; 8
    2726:	d9 2e       	mov	r13, r25
    2728:	88 23       	and	r24, r24
    272a:	39 f0       	breq	.+14     	; 0x273a <f_open+0x9e>
    272c:	07 c1       	rjmp	.+526    	; 0x293c <f_open+0x2a0>
    272e:	8d 81       	ldd	r24, Y+5	; 0x05
    2730:	81 71       	andi	r24, 0x11	; 17
    2732:	09 f0       	breq	.+2      	; 0x2736 <f_open+0x9a>
    2734:	63 c1       	rjmp	.+710    	; 0x29fc <f_open+0x360>
    2736:	12 fd       	sbrc	r17, 2
    2738:	63 c1       	rjmp	.+710    	; 0x2a00 <f_open+0x364>
    273a:	d3 fe       	sbrs	r13, 3
    273c:	59 c0       	rjmp	.+178    	; 0x27f0 <f_open+0x154>
    273e:	ab 8c       	ldd	r10, Y+27	; 0x1b
    2740:	bc 8c       	ldd	r11, Y+28	; 0x1c
    2742:	69 a4       	ldd	r6, Y+41	; 0x29
    2744:	7a a4       	ldd	r7, Y+42	; 0x2a
    2746:	b5 01       	movw	r22, r10
    2748:	c3 01       	movw	r24, r6
    274a:	0e 94 88 11 	call	0x2310	; 0x2310 <ld_clust>
    274e:	1b 01       	movw	r2, r22
    2750:	2c 01       	movw	r4, r24
    2752:	f5 01       	movw	r30, r10
    2754:	16 86       	std	Z+14, r1	; 0x0e
    2756:	17 86       	std	Z+15, r1	; 0x0f
    2758:	81 e2       	ldi	r24, 0x21	; 33
    275a:	80 8b       	std	Z+16, r24	; 0x10
    275c:	8c e4       	ldi	r24, 0x4C	; 76
    275e:	81 8b       	std	Z+17, r24	; 0x11
    2760:	eb 8d       	ldd	r30, Y+27	; 0x1b
    2762:	fc 8d       	ldd	r31, Y+28	; 0x1c
    2764:	80 e2       	ldi	r24, 0x20	; 32
    2766:	83 87       	std	Z+11, r24	; 0x0b
    2768:	6b 8d       	ldd	r22, Y+27	; 0x1b
    276a:	7c 8d       	ldd	r23, Y+28	; 0x1c
    276c:	20 e0       	ldi	r18, 0x00	; 0
    276e:	30 e0       	ldi	r19, 0x00	; 0
    2770:	a9 01       	movw	r20, r18
    2772:	c3 01       	movw	r24, r6
    2774:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <st_clust>
    2778:	eb 8d       	ldd	r30, Y+27	; 0x1b
    277a:	fc 8d       	ldd	r31, Y+28	; 0x1c
    277c:	14 8e       	std	Z+28, r1	; 0x1c
    277e:	15 8e       	std	Z+29, r1	; 0x1d
    2780:	16 8e       	std	Z+30, r1	; 0x1e
    2782:	17 8e       	std	Z+31, r1	; 0x1f
    2784:	e9 a5       	ldd	r30, Y+41	; 0x29
    2786:	fa a5       	ldd	r31, Y+42	; 0x2a
    2788:	81 e0       	ldi	r24, 0x01	; 1
    278a:	83 83       	std	Z+3, r24	; 0x03
    278c:	21 14       	cp	r2, r1
    278e:	31 04       	cpc	r3, r1
    2790:	41 04       	cpc	r4, r1
    2792:	51 04       	cpc	r5, r1
    2794:	51 f1       	breq	.+84     	; 0x27ea <f_open+0x14e>
    2796:	83 a4       	ldd	r8, Z+43	; 0x2b
    2798:	94 a4       	ldd	r9, Z+44	; 0x2c
    279a:	a5 a4       	ldd	r10, Z+45	; 0x2d
    279c:	b6 a4       	ldd	r11, Z+46	; 0x2e
    279e:	00 e0       	ldi	r16, 0x00	; 0
    27a0:	10 e0       	ldi	r17, 0x00	; 0
    27a2:	98 01       	movw	r18, r16
    27a4:	b2 01       	movw	r22, r4
    27a6:	a1 01       	movw	r20, r2
    27a8:	ce 01       	movw	r24, r28
    27aa:	01 96       	adiw	r24, 0x01	; 1
    27ac:	0e 94 20 0c 	call	0x1840	; 0x1840 <remove_chain>
    27b0:	81 11       	cpse	r24, r1
    27b2:	c4 c0       	rjmp	.+392    	; 0x293c <f_open+0x2a0>
    27b4:	b5 01       	movw	r22, r10
    27b6:	a4 01       	movw	r20, r8
    27b8:	89 a5       	ldd	r24, Y+41	; 0x29
    27ba:	9a a5       	ldd	r25, Y+42	; 0x2a
    27bc:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    27c0:	e9 a5       	ldd	r30, Y+41	; 0x29
    27c2:	fa a5       	ldd	r31, Y+42	; 0x2a
    27c4:	b2 01       	movw	r22, r4
    27c6:	a1 01       	movw	r20, r2
    27c8:	41 50       	subi	r20, 0x01	; 1
    27ca:	51 09       	sbc	r21, r1
    27cc:	61 09       	sbc	r22, r1
    27ce:	71 09       	sbc	r23, r1
    27d0:	43 87       	std	Z+11, r20	; 0x0b
    27d2:	54 87       	std	Z+12, r21	; 0x0c
    27d4:	65 87       	std	Z+13, r22	; 0x0d
    27d6:	76 87       	std	Z+14, r23	; 0x0e
    27d8:	88 23       	and	r24, r24
    27da:	39 f0       	breq	.+14     	; 0x27ea <f_open+0x14e>
    27dc:	af c0       	rjmp	.+350    	; 0x293c <f_open+0x2a0>
    27de:	11 ff       	sbrs	r17, 1
    27e0:	02 c0       	rjmp	.+4      	; 0x27e6 <f_open+0x14a>
    27e2:	80 fd       	sbrc	r24, 0
    27e4:	0f c1       	rjmp	.+542    	; 0x2a04 <f_open+0x368>
    27e6:	13 ff       	sbrs	r17, 3
    27e8:	03 c0       	rjmp	.+6      	; 0x27f0 <f_open+0x154>
    27ea:	fd 2d       	mov	r31, r13
    27ec:	f0 64       	ori	r31, 0x40	; 64
    27ee:	df 2e       	mov	r13, r31
    27f0:	e9 a5       	ldd	r30, Y+41	; 0x29
    27f2:	fa a5       	ldd	r31, Y+42	; 0x2a
    27f4:	83 a5       	ldd	r24, Z+43	; 0x2b
    27f6:	94 a5       	ldd	r25, Z+44	; 0x2c
    27f8:	a5 a5       	ldd	r26, Z+45	; 0x2d
    27fa:	b6 a5       	ldd	r27, Z+46	; 0x2e
    27fc:	f7 01       	movw	r30, r14
    27fe:	84 8f       	std	Z+28, r24	; 0x1c
    2800:	95 8f       	std	Z+29, r25	; 0x1d
    2802:	a6 8f       	std	Z+30, r26	; 0x1e
    2804:	b7 8f       	std	Z+31, r27	; 0x1f
    2806:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2808:	9c 8d       	ldd	r25, Y+28	; 0x1c
    280a:	80 a3       	std	Z+32, r24	; 0x20
    280c:	91 a3       	std	Z+33, r25	; 0x21
    280e:	6b 8c       	ldd	r6, Y+27	; 0x1b
    2810:	7c 8c       	ldd	r7, Y+28	; 0x1c
    2812:	a9 a4       	ldd	r10, Y+41	; 0x29
    2814:	ba a4       	ldd	r11, Y+42	; 0x2a
    2816:	b3 01       	movw	r22, r6
    2818:	c5 01       	movw	r24, r10
    281a:	0e 94 88 11 	call	0x2310	; 0x2310 <ld_clust>
    281e:	f7 01       	movw	r30, r14
    2820:	66 83       	std	Z+6, r22	; 0x06
    2822:	77 83       	std	Z+7, r23	; 0x07
    2824:	80 87       	std	Z+8, r24	; 0x08
    2826:	91 87       	std	Z+9, r25	; 0x09
    2828:	c3 01       	movw	r24, r6
    282a:	4c 96       	adiw	r24, 0x1c	; 28
    282c:	0e 94 87 05 	call	0xb0e	; 0xb0e <ld_dword>
    2830:	f7 01       	movw	r30, r14
    2832:	62 87       	std	Z+10, r22	; 0x0a
    2834:	73 87       	std	Z+11, r23	; 0x0b
    2836:	84 87       	std	Z+12, r24	; 0x0c
    2838:	95 87       	std	Z+13, r25	; 0x0d
    283a:	a0 82       	st	Z, r10
    283c:	b1 82       	std	Z+1, r11	; 0x01
    283e:	f5 01       	movw	r30, r10
    2840:	85 81       	ldd	r24, Z+5	; 0x05
    2842:	96 81       	ldd	r25, Z+6	; 0x06
    2844:	f7 01       	movw	r30, r14
    2846:	82 83       	std	Z+2, r24	; 0x02
    2848:	93 83       	std	Z+3, r25	; 0x03
    284a:	d6 86       	std	Z+14, r13	; 0x0e
    284c:	17 86       	std	Z+15, r1	; 0x0f
    284e:	10 8e       	std	Z+24, r1	; 0x18
    2850:	11 8e       	std	Z+25, r1	; 0x19
    2852:	12 8e       	std	Z+26, r1	; 0x1a
    2854:	13 8e       	std	Z+27, r1	; 0x1b
    2856:	10 8a       	std	Z+16, r1	; 0x10
    2858:	11 8a       	std	Z+17, r1	; 0x11
    285a:	12 8a       	std	Z+18, r1	; 0x12
    285c:	13 8a       	std	Z+19, r1	; 0x13
    285e:	17 01       	movw	r2, r14
    2860:	f2 e2       	ldi	r31, 0x22	; 34
    2862:	2f 0e       	add	r2, r31
    2864:	31 1c       	adc	r3, r1
    2866:	40 e0       	ldi	r20, 0x00	; 0
    2868:	52 e0       	ldi	r21, 0x02	; 2
    286a:	60 e0       	ldi	r22, 0x00	; 0
    286c:	70 e0       	ldi	r23, 0x00	; 0
    286e:	c1 01       	movw	r24, r2
    2870:	0e 94 b0 05 	call	0xb60	; 0xb60 <mem_set>
    2874:	d5 fe       	sbrs	r13, 5
    2876:	97 c0       	rjmp	.+302    	; 0x29a6 <f_open+0x30a>
    2878:	f7 01       	movw	r30, r14
    287a:	42 84       	ldd	r4, Z+10	; 0x0a
    287c:	53 84       	ldd	r5, Z+11	; 0x0b
    287e:	64 84       	ldd	r6, Z+12	; 0x0c
    2880:	75 84       	ldd	r7, Z+13	; 0x0d
    2882:	41 14       	cp	r4, r1
    2884:	51 04       	cpc	r5, r1
    2886:	61 04       	cpc	r6, r1
    2888:	71 04       	cpc	r7, r1
    288a:	09 f4       	brne	.+2      	; 0x288e <f_open+0x1f2>
    288c:	8c c0       	rjmp	.+280    	; 0x29a6 <f_open+0x30a>
    288e:	40 8a       	std	Z+16, r4	; 0x10
    2890:	51 8a       	std	Z+17, r5	; 0x11
    2892:	62 8a       	std	Z+18, r6	; 0x12
    2894:	73 8a       	std	Z+19, r7	; 0x13
    2896:	e9 a5       	ldd	r30, Y+41	; 0x29
    2898:	fa a5       	ldd	r31, Y+42	; 0x2a
    289a:	81 85       	ldd	r24, Z+9	; 0x09
    289c:	92 85       	ldd	r25, Z+10	; 0x0a
    289e:	a0 e0       	ldi	r26, 0x00	; 0
    28a0:	b0 e0       	ldi	r27, 0x00	; 0
    28a2:	4c 01       	movw	r8, r24
    28a4:	5d 01       	movw	r10, r26
    28a6:	07 2e       	mov	r0, r23
    28a8:	79 e0       	ldi	r23, 0x09	; 9
    28aa:	88 0c       	add	r8, r8
    28ac:	99 1c       	adc	r9, r9
    28ae:	aa 1c       	adc	r10, r10
    28b0:	bb 1c       	adc	r11, r11
    28b2:	7a 95       	dec	r23
    28b4:	d1 f7       	brne	.-12     	; 0x28aa <f_open+0x20e>
    28b6:	70 2d       	mov	r23, r0
    28b8:	f7 01       	movw	r30, r14
    28ba:	46 81       	ldd	r20, Z+6	; 0x06
    28bc:	57 81       	ldd	r21, Z+7	; 0x07
    28be:	60 85       	ldd	r22, Z+8	; 0x08
    28c0:	71 85       	ldd	r23, Z+9	; 0x09
    28c2:	84 14       	cp	r8, r4
    28c4:	95 04       	cpc	r9, r5
    28c6:	a6 04       	cpc	r10, r6
    28c8:	b7 04       	cpc	r11, r7
    28ca:	08 f0       	brcs	.+2      	; 0x28ce <f_open+0x232>
    28cc:	58 c0       	rjmp	.+176    	; 0x297e <f_open+0x2e2>
    28ce:	c7 01       	movw	r24, r14
    28d0:	0e 94 f0 08 	call	0x11e0	; 0x11e0 <get_fat>
    28d4:	ab 01       	movw	r20, r22
    28d6:	bc 01       	movw	r22, r24
    28d8:	42 30       	cpi	r20, 0x02	; 2
    28da:	51 05       	cpc	r21, r1
    28dc:	61 05       	cpc	r22, r1
    28de:	71 05       	cpc	r23, r1
    28e0:	08 f0       	brcs	.+2      	; 0x28e4 <f_open+0x248>
    28e2:	85 c0       	rjmp	.+266    	; 0x29ee <f_open+0x352>
    28e4:	72 c0       	rjmp	.+228    	; 0x29ca <f_open+0x32e>
    28e6:	c9 a4       	ldd	r12, Y+41	; 0x29
    28e8:	da a4       	ldd	r13, Y+42	; 0x2a
    28ea:	c6 01       	movw	r24, r12
    28ec:	0e 94 c6 05 	call	0xb8c	; 0xb8c <clst2sect>
    28f0:	61 15       	cp	r22, r1
    28f2:	71 05       	cpc	r23, r1
    28f4:	81 05       	cpc	r24, r1
    28f6:	91 05       	cpc	r25, r1
    28f8:	09 f4       	brne	.+2      	; 0x28fc <f_open+0x260>
    28fa:	51 c0       	rjmp	.+162    	; 0x299e <f_open+0x302>
    28fc:	93 01       	movw	r18, r6
    28fe:	82 01       	movw	r16, r4
    2900:	0f 2e       	mov	r0, r31
    2902:	f9 e0       	ldi	r31, 0x09	; 9
    2904:	36 95       	lsr	r19
    2906:	27 95       	ror	r18
    2908:	17 95       	ror	r17
    290a:	07 95       	ror	r16
    290c:	fa 95       	dec	r31
    290e:	d1 f7       	brne	.-12     	; 0x2904 <f_open+0x268>
    2910:	f0 2d       	mov	r31, r0
    2912:	a9 01       	movw	r20, r18
    2914:	98 01       	movw	r18, r16
    2916:	26 0f       	add	r18, r22
    2918:	37 1f       	adc	r19, r23
    291a:	48 1f       	adc	r20, r24
    291c:	59 1f       	adc	r21, r25
    291e:	f7 01       	movw	r30, r14
    2920:	20 8f       	std	Z+24, r18	; 0x18
    2922:	31 8f       	std	Z+25, r19	; 0x19
    2924:	42 8f       	std	Z+26, r20	; 0x1a
    2926:	53 8f       	std	Z+27, r21	; 0x1b
    2928:	01 e0       	ldi	r16, 0x01	; 1
    292a:	10 e0       	ldi	r17, 0x00	; 0
    292c:	b1 01       	movw	r22, r2
    292e:	f6 01       	movw	r30, r12
    2930:	81 81       	ldd	r24, Z+1	; 0x01
    2932:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <disk_read>
    2936:	81 11       	cpse	r24, r1
    2938:	34 c0       	rjmp	.+104    	; 0x29a2 <f_open+0x306>
    293a:	35 c0       	rjmp	.+106    	; 0x29a6 <f_open+0x30a>
    293c:	f7 01       	movw	r30, r14
    293e:	10 82       	st	Z, r1
    2940:	11 82       	std	Z+1, r1	; 0x01
    2942:	64 c0       	rjmp	.+200    	; 0x2a0c <f_open+0x370>
    2944:	89 e0       	ldi	r24, 0x09	; 9
    2946:	62 c0       	rjmp	.+196    	; 0x2a0c <f_open+0x370>
    2948:	41 2f       	mov	r20, r17
    294a:	4c 71       	andi	r20, 0x1C	; 28
    294c:	59 f0       	breq	.+22     	; 0x2964 <f_open+0x2c8>
    294e:	e2 ce       	rjmp	.-572    	; 0x2714 <f_open+0x78>
    2950:	41 2f       	mov	r20, r17
    2952:	4c 71       	andi	r20, 0x1C	; 28
    2954:	51 f5       	brne	.+84     	; 0x29aa <f_open+0x30e>
    2956:	86 e0       	ldi	r24, 0x06	; 6
    2958:	05 c0       	rjmp	.+10     	; 0x2964 <f_open+0x2c8>
    295a:	81 2f       	mov	r24, r17
    295c:	8c 71       	andi	r24, 0x1C	; 28
    295e:	09 f0       	breq	.+2      	; 0x2962 <f_open+0x2c6>
    2960:	e6 ce       	rjmp	.-564    	; 0x272e <f_open+0x92>
    2962:	28 c0       	rjmp	.+80     	; 0x29b4 <f_open+0x318>
    2964:	81 11       	cpse	r24, r1
    2966:	ea cf       	rjmp	.-44     	; 0x293c <f_open+0x2a0>
    2968:	52 cf       	rjmp	.-348    	; 0x280e <f_open+0x172>
    296a:	8f ef       	ldi	r24, 0xFF	; 255
    296c:	9f ef       	ldi	r25, 0xFF	; 255
    296e:	dc 01       	movw	r26, r24
    2970:	f7 01       	movw	r30, r14
    2972:	84 8b       	std	Z+20, r24	; 0x14
    2974:	95 8b       	std	Z+21, r25	; 0x15
    2976:	a6 8b       	std	Z+22, r26	; 0x16
    2978:	b7 8b       	std	Z+23, r27	; 0x17
    297a:	81 e0       	ldi	r24, 0x01	; 1
    297c:	df cf       	rjmp	.-66     	; 0x293c <f_open+0x2a0>
    297e:	f7 01       	movw	r30, r14
    2980:	44 8b       	std	Z+20, r20	; 0x14
    2982:	55 8b       	std	Z+21, r21	; 0x15
    2984:	66 8b       	std	Z+22, r22	; 0x16
    2986:	77 8b       	std	Z+23, r23	; 0x17
    2988:	d3 01       	movw	r26, r6
    298a:	c2 01       	movw	r24, r4
    298c:	91 70       	andi	r25, 0x01	; 1
    298e:	aa 27       	eor	r26, r26
    2990:	bb 27       	eor	r27, r27
    2992:	89 2b       	or	r24, r25
    2994:	8a 2b       	or	r24, r26
    2996:	8b 2b       	or	r24, r27
    2998:	09 f0       	breq	.+2      	; 0x299c <f_open+0x300>
    299a:	a5 cf       	rjmp	.-182    	; 0x28e6 <f_open+0x24a>
    299c:	04 c0       	rjmp	.+8      	; 0x29a6 <f_open+0x30a>
    299e:	82 e0       	ldi	r24, 0x02	; 2
    29a0:	cd cf       	rjmp	.-102    	; 0x293c <f_open+0x2a0>
    29a2:	81 e0       	ldi	r24, 0x01	; 1
    29a4:	cb cf       	rjmp	.-106    	; 0x293c <f_open+0x2a0>
    29a6:	80 e0       	ldi	r24, 0x00	; 0
    29a8:	31 c0       	rjmp	.+98     	; 0x2a0c <f_open+0x370>
    29aa:	86 e0       	ldi	r24, 0x06	; 6
    29ac:	fd 2d       	mov	r31, r13
    29ae:	f8 60       	ori	r31, 0x08	; 8
    29b0:	df 2e       	mov	r13, r31
    29b2:	d8 cf       	rjmp	.-80     	; 0x2964 <f_open+0x2c8>
    29b4:	8d 81       	ldd	r24, Y+5	; 0x05
    29b6:	84 fd       	sbrc	r24, 4
    29b8:	27 c0       	rjmp	.+78     	; 0x2a08 <f_open+0x36c>
    29ba:	11 cf       	rjmp	.-478    	; 0x27de <f_open+0x142>
    29bc:	f7 01       	movw	r30, r14
    29be:	44 8b       	std	Z+20, r20	; 0x14
    29c0:	55 8b       	std	Z+21, r21	; 0x15
    29c2:	66 8b       	std	Z+22, r22	; 0x16
    29c4:	77 8b       	std	Z+23, r23	; 0x17
    29c6:	82 e0       	ldi	r24, 0x02	; 2
    29c8:	b9 cf       	rjmp	.-142    	; 0x293c <f_open+0x2a0>
    29ca:	4f 3f       	cpi	r20, 0xFF	; 255
    29cc:	ff ef       	ldi	r31, 0xFF	; 255
    29ce:	5f 07       	cpc	r21, r31
    29d0:	6f 07       	cpc	r22, r31
    29d2:	7f 07       	cpc	r23, r31
    29d4:	51 f2       	breq	.-108    	; 0x296a <f_open+0x2ce>
    29d6:	f2 cf       	rjmp	.-28     	; 0x29bc <f_open+0x320>
    29d8:	48 18       	sub	r4, r8
    29da:	59 08       	sbc	r5, r9
    29dc:	6a 08       	sbc	r6, r10
    29de:	7b 08       	sbc	r7, r11
    29e0:	84 14       	cp	r8, r4
    29e2:	95 04       	cpc	r9, r5
    29e4:	a6 04       	cpc	r10, r6
    29e6:	b7 04       	cpc	r11, r7
    29e8:	08 f4       	brcc	.+2      	; 0x29ec <f_open+0x350>
    29ea:	71 cf       	rjmp	.-286    	; 0x28ce <f_open+0x232>
    29ec:	c8 cf       	rjmp	.-112    	; 0x297e <f_open+0x2e2>
    29ee:	4f 3f       	cpi	r20, 0xFF	; 255
    29f0:	8f ef       	ldi	r24, 0xFF	; 255
    29f2:	58 07       	cpc	r21, r24
    29f4:	68 07       	cpc	r22, r24
    29f6:	78 07       	cpc	r23, r24
    29f8:	79 f7       	brne	.-34     	; 0x29d8 <f_open+0x33c>
    29fa:	b7 cf       	rjmp	.-146    	; 0x296a <f_open+0x2ce>
    29fc:	87 e0       	ldi	r24, 0x07	; 7
    29fe:	9e cf       	rjmp	.-196    	; 0x293c <f_open+0x2a0>
    2a00:	88 e0       	ldi	r24, 0x08	; 8
    2a02:	9c cf       	rjmp	.-200    	; 0x293c <f_open+0x2a0>
    2a04:	87 e0       	ldi	r24, 0x07	; 7
    2a06:	9a cf       	rjmp	.-204    	; 0x293c <f_open+0x2a0>
    2a08:	84 e0       	ldi	r24, 0x04	; 4
    2a0a:	98 cf       	rjmp	.-208    	; 0x293c <f_open+0x2a0>
    2a0c:	ac 96       	adiw	r28, 0x2c	; 44
    2a0e:	cd bf       	out	0x3d, r28	; 61
    2a10:	de bf       	out	0x3e, r29	; 62
    2a12:	df 91       	pop	r29
    2a14:	cf 91       	pop	r28
    2a16:	1f 91       	pop	r17
    2a18:	0f 91       	pop	r16
    2a1a:	ff 90       	pop	r15
    2a1c:	ef 90       	pop	r14
    2a1e:	df 90       	pop	r13
    2a20:	cf 90       	pop	r12
    2a22:	bf 90       	pop	r11
    2a24:	af 90       	pop	r10
    2a26:	9f 90       	pop	r9
    2a28:	8f 90       	pop	r8
    2a2a:	7f 90       	pop	r7
    2a2c:	6f 90       	pop	r6
    2a2e:	5f 90       	pop	r5
    2a30:	4f 90       	pop	r4
    2a32:	3f 90       	pop	r3
    2a34:	2f 90       	pop	r2
    2a36:	08 95       	ret

00002a38 <f_write>:
    2a38:	2f 92       	push	r2
    2a3a:	3f 92       	push	r3
    2a3c:	4f 92       	push	r4
    2a3e:	5f 92       	push	r5
    2a40:	6f 92       	push	r6
    2a42:	7f 92       	push	r7
    2a44:	8f 92       	push	r8
    2a46:	9f 92       	push	r9
    2a48:	af 92       	push	r10
    2a4a:	bf 92       	push	r11
    2a4c:	cf 92       	push	r12
    2a4e:	df 92       	push	r13
    2a50:	ef 92       	push	r14
    2a52:	ff 92       	push	r15
    2a54:	0f 93       	push	r16
    2a56:	1f 93       	push	r17
    2a58:	cf 93       	push	r28
    2a5a:	df 93       	push	r29
    2a5c:	cd b7       	in	r28, 0x3d	; 61
    2a5e:	de b7       	in	r29, 0x3e	; 62
    2a60:	2a 97       	sbiw	r28, 0x0a	; 10
    2a62:	cd bf       	out	0x3d, r28	; 61
    2a64:	de bf       	out	0x3e, r29	; 62
    2a66:	7c 01       	movw	r14, r24
    2a68:	4b 01       	movw	r8, r22
    2a6a:	6a 01       	movw	r12, r20
    2a6c:	59 01       	movw	r10, r18
    2a6e:	f9 01       	movw	r30, r18
    2a70:	10 82       	st	Z, r1
    2a72:	11 82       	std	Z+1, r1	; 0x01
    2a74:	8f 83       	std	Y+7, r24	; 0x07
    2a76:	f8 86       	std	Y+8, r15	; 0x08
    2a78:	be 01       	movw	r22, r28
    2a7a:	6f 5f       	subi	r22, 0xFF	; 255
    2a7c:	7f 4f       	sbci	r23, 0xFF	; 255
    2a7e:	0e 94 24 06 	call	0xc48	; 0xc48 <validate>
    2a82:	81 11       	cpse	r24, r1
    2a84:	92 c1       	rjmp	.+804    	; 0x2daa <f_write+0x372>
    2a86:	f7 01       	movw	r30, r14
    2a88:	87 85       	ldd	r24, Z+15	; 0x0f
    2a8a:	81 11       	cpse	r24, r1
    2a8c:	8e c1       	rjmp	.+796    	; 0x2daa <f_write+0x372>
    2a8e:	86 85       	ldd	r24, Z+14	; 0x0e
    2a90:	81 ff       	sbrs	r24, 1
    2a92:	8a c1       	rjmp	.+788    	; 0x2da8 <f_write+0x370>
    2a94:	80 89       	ldd	r24, Z+16	; 0x10
    2a96:	91 89       	ldd	r25, Z+17	; 0x11
    2a98:	a2 89       	ldd	r26, Z+18	; 0x12
    2a9a:	b3 89       	ldd	r27, Z+19	; 0x13
    2a9c:	ac 01       	movw	r20, r24
    2a9e:	bd 01       	movw	r22, r26
    2aa0:	4c 0d       	add	r20, r12
    2aa2:	5d 1d       	adc	r21, r13
    2aa4:	61 1d       	adc	r22, r1
    2aa6:	71 1d       	adc	r23, r1
    2aa8:	48 17       	cp	r20, r24
    2aaa:	59 07       	cpc	r21, r25
    2aac:	6a 07       	cpc	r22, r26
    2aae:	7b 07       	cpc	r23, r27
    2ab0:	18 f4       	brcc	.+6      	; 0x2ab8 <f_write+0x80>
    2ab2:	6c 01       	movw	r12, r24
    2ab4:	c0 94       	com	r12
    2ab6:	d0 94       	com	r13
    2ab8:	c1 14       	cp	r12, r1
    2aba:	d1 04       	cpc	r13, r1
    2abc:	09 f4       	brne	.+2      	; 0x2ac0 <f_write+0x88>
    2abe:	6e c1       	rjmp	.+732    	; 0x2d9c <f_write+0x364>
    2ac0:	97 01       	movw	r18, r14
    2ac2:	2e 5d       	subi	r18, 0xDE	; 222
    2ac4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ac6:	29 87       	std	Y+9, r18	; 0x09
    2ac8:	3a 87       	std	Y+10, r19	; 0x0a
    2aca:	f7 01       	movw	r30, r14
    2acc:	80 89       	ldd	r24, Z+16	; 0x10
    2ace:	91 89       	ldd	r25, Z+17	; 0x11
    2ad0:	a2 89       	ldd	r26, Z+18	; 0x12
    2ad2:	b3 89       	ldd	r27, Z+19	; 0x13
    2ad4:	ac 01       	movw	r20, r24
    2ad6:	bd 01       	movw	r22, r26
    2ad8:	51 70       	andi	r21, 0x01	; 1
    2ada:	66 27       	eor	r22, r22
    2adc:	77 27       	eor	r23, r23
    2ade:	45 2b       	or	r20, r21
    2ae0:	46 2b       	or	r20, r22
    2ae2:	47 2b       	or	r20, r23
    2ae4:	09 f0       	breq	.+2      	; 0x2ae8 <f_write+0xb0>
    2ae6:	15 c1       	rjmp	.+554    	; 0x2d12 <f_write+0x2da>
    2ae8:	e9 81       	ldd	r30, Y+1	; 0x01
    2aea:	fa 81       	ldd	r31, Y+2	; 0x02
    2aec:	61 84       	ldd	r6, Z+9	; 0x09
    2aee:	72 84       	ldd	r7, Z+10	; 0x0a
    2af0:	f1 e0       	ldi	r31, 0x01	; 1
    2af2:	6f 1a       	sub	r6, r31
    2af4:	71 08       	sbc	r7, r1
    2af6:	ac 01       	movw	r20, r24
    2af8:	bd 01       	movw	r22, r26
    2afa:	03 2e       	mov	r0, r19
    2afc:	39 e0       	ldi	r19, 0x09	; 9
    2afe:	76 95       	lsr	r23
    2b00:	67 95       	ror	r22
    2b02:	57 95       	ror	r21
    2b04:	47 95       	ror	r20
    2b06:	3a 95       	dec	r19
    2b08:	d1 f7       	brne	.-12     	; 0x2afe <f_write+0xc6>
    2b0a:	30 2d       	mov	r19, r0
    2b0c:	64 22       	and	r6, r20
    2b0e:	75 22       	and	r7, r21
    2b10:	61 14       	cp	r6, r1
    2b12:	71 04       	cpc	r7, r1
    2b14:	09 f0       	breq	.+2      	; 0x2b18 <f_write+0xe0>
    2b16:	49 c0       	rjmp	.+146    	; 0x2baa <f_write+0x172>
    2b18:	89 2b       	or	r24, r25
    2b1a:	8a 2b       	or	r24, r26
    2b1c:	8b 2b       	or	r24, r27
    2b1e:	91 f4       	brne	.+36     	; 0x2b44 <f_write+0x10c>
    2b20:	f7 01       	movw	r30, r14
    2b22:	66 81       	ldd	r22, Z+6	; 0x06
    2b24:	77 81       	ldd	r23, Z+7	; 0x07
    2b26:	80 85       	ldd	r24, Z+8	; 0x08
    2b28:	91 85       	ldd	r25, Z+9	; 0x09
    2b2a:	61 15       	cp	r22, r1
    2b2c:	71 05       	cpc	r23, r1
    2b2e:	81 05       	cpc	r24, r1
    2b30:	91 05       	cpc	r25, r1
    2b32:	b9 f4       	brne	.+46     	; 0x2b62 <f_write+0x12a>
    2b34:	40 e0       	ldi	r20, 0x00	; 0
    2b36:	50 e0       	ldi	r21, 0x00	; 0
    2b38:	ba 01       	movw	r22, r20
    2b3a:	8f 81       	ldd	r24, Y+7	; 0x07
    2b3c:	98 85       	ldd	r25, Y+8	; 0x08
    2b3e:	0e 94 ba 0a 	call	0x1574	; 0x1574 <create_chain>
    2b42:	09 c0       	rjmp	.+18     	; 0x2b56 <f_write+0x11e>
    2b44:	f7 01       	movw	r30, r14
    2b46:	44 89       	ldd	r20, Z+20	; 0x14
    2b48:	55 89       	ldd	r21, Z+21	; 0x15
    2b4a:	66 89       	ldd	r22, Z+22	; 0x16
    2b4c:	77 89       	ldd	r23, Z+23	; 0x17
    2b4e:	8f 81       	ldd	r24, Y+7	; 0x07
    2b50:	98 85       	ldd	r25, Y+8	; 0x08
    2b52:	0e 94 ba 0a 	call	0x1574	; 0x1574 <create_chain>
    2b56:	61 15       	cp	r22, r1
    2b58:	71 05       	cpc	r23, r1
    2b5a:	81 05       	cpc	r24, r1
    2b5c:	91 05       	cpc	r25, r1
    2b5e:	09 f4       	brne	.+2      	; 0x2b62 <f_write+0x12a>
    2b60:	1d c1       	rjmp	.+570    	; 0x2d9c <f_write+0x364>
    2b62:	61 30       	cpi	r22, 0x01	; 1
    2b64:	71 05       	cpc	r23, r1
    2b66:	81 05       	cpc	r24, r1
    2b68:	91 05       	cpc	r25, r1
    2b6a:	21 f4       	brne	.+8      	; 0x2b74 <f_write+0x13c>
    2b6c:	82 e0       	ldi	r24, 0x02	; 2
    2b6e:	f7 01       	movw	r30, r14
    2b70:	87 87       	std	Z+15, r24	; 0x0f
    2b72:	1b c1       	rjmp	.+566    	; 0x2daa <f_write+0x372>
    2b74:	6f 3f       	cpi	r22, 0xFF	; 255
    2b76:	ff ef       	ldi	r31, 0xFF	; 255
    2b78:	7f 07       	cpc	r23, r31
    2b7a:	8f 07       	cpc	r24, r31
    2b7c:	9f 07       	cpc	r25, r31
    2b7e:	21 f4       	brne	.+8      	; 0x2b88 <f_write+0x150>
    2b80:	81 e0       	ldi	r24, 0x01	; 1
    2b82:	f7 01       	movw	r30, r14
    2b84:	87 87       	std	Z+15, r24	; 0x0f
    2b86:	11 c1       	rjmp	.+546    	; 0x2daa <f_write+0x372>
    2b88:	f7 01       	movw	r30, r14
    2b8a:	64 8b       	std	Z+20, r22	; 0x14
    2b8c:	75 8b       	std	Z+21, r23	; 0x15
    2b8e:	86 8b       	std	Z+22, r24	; 0x16
    2b90:	97 8b       	std	Z+23, r25	; 0x17
    2b92:	06 81       	ldd	r16, Z+6	; 0x06
    2b94:	17 81       	ldd	r17, Z+7	; 0x07
    2b96:	20 85       	ldd	r18, Z+8	; 0x08
    2b98:	31 85       	ldd	r19, Z+9	; 0x09
    2b9a:	01 2b       	or	r16, r17
    2b9c:	02 2b       	or	r16, r18
    2b9e:	03 2b       	or	r16, r19
    2ba0:	21 f4       	brne	.+8      	; 0x2baa <f_write+0x172>
    2ba2:	66 83       	std	Z+6, r22	; 0x06
    2ba4:	77 83       	std	Z+7, r23	; 0x07
    2ba6:	80 87       	std	Z+8, r24	; 0x08
    2ba8:	91 87       	std	Z+9, r25	; 0x09
    2baa:	f7 01       	movw	r30, r14
    2bac:	86 85       	ldd	r24, Z+14	; 0x0e
    2bae:	88 23       	and	r24, r24
    2bb0:	bc f4       	brge	.+46     	; 0x2be0 <f_write+0x1a8>
    2bb2:	20 8d       	ldd	r18, Z+24	; 0x18
    2bb4:	31 8d       	ldd	r19, Z+25	; 0x19
    2bb6:	42 8d       	ldd	r20, Z+26	; 0x1a
    2bb8:	53 8d       	ldd	r21, Z+27	; 0x1b
    2bba:	e9 81       	ldd	r30, Y+1	; 0x01
    2bbc:	fa 81       	ldd	r31, Y+2	; 0x02
    2bbe:	01 e0       	ldi	r16, 0x01	; 1
    2bc0:	10 e0       	ldi	r17, 0x00	; 0
    2bc2:	69 85       	ldd	r22, Y+9	; 0x09
    2bc4:	7a 85       	ldd	r23, Y+10	; 0x0a
    2bc6:	81 81       	ldd	r24, Z+1	; 0x01
    2bc8:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <disk_write>
    2bcc:	88 23       	and	r24, r24
    2bce:	21 f0       	breq	.+8      	; 0x2bd8 <f_write+0x1a0>
    2bd0:	81 e0       	ldi	r24, 0x01	; 1
    2bd2:	f7 01       	movw	r30, r14
    2bd4:	87 87       	std	Z+15, r24	; 0x0f
    2bd6:	e9 c0       	rjmp	.+466    	; 0x2daa <f_write+0x372>
    2bd8:	f7 01       	movw	r30, r14
    2bda:	86 85       	ldd	r24, Z+14	; 0x0e
    2bdc:	8f 77       	andi	r24, 0x7F	; 127
    2bde:	86 87       	std	Z+14, r24	; 0x0e
    2be0:	29 81       	ldd	r18, Y+1	; 0x01
    2be2:	3a 81       	ldd	r19, Y+2	; 0x02
    2be4:	2d 83       	std	Y+5, r18	; 0x05
    2be6:	3e 83       	std	Y+6, r19	; 0x06
    2be8:	f7 01       	movw	r30, r14
    2bea:	44 89       	ldd	r20, Z+20	; 0x14
    2bec:	55 89       	ldd	r21, Z+21	; 0x15
    2bee:	66 89       	ldd	r22, Z+22	; 0x16
    2bf0:	77 89       	ldd	r23, Z+23	; 0x17
    2bf2:	c9 01       	movw	r24, r18
    2bf4:	0e 94 c6 05 	call	0xb8c	; 0xb8c <clst2sect>
    2bf8:	61 15       	cp	r22, r1
    2bfa:	71 05       	cpc	r23, r1
    2bfc:	81 05       	cpc	r24, r1
    2bfe:	91 05       	cpc	r25, r1
    2c00:	21 f4       	brne	.+8      	; 0x2c0a <f_write+0x1d2>
    2c02:	82 e0       	ldi	r24, 0x02	; 2
    2c04:	f7 01       	movw	r30, r14
    2c06:	87 87       	std	Z+15, r24	; 0x0f
    2c08:	d0 c0       	rjmp	.+416    	; 0x2daa <f_write+0x372>
    2c0a:	1b 01       	movw	r2, r22
    2c0c:	2c 01       	movw	r4, r24
    2c0e:	26 0c       	add	r2, r6
    2c10:	37 1c       	adc	r3, r7
    2c12:	41 1c       	adc	r4, r1
    2c14:	51 1c       	adc	r5, r1
    2c16:	96 01       	movw	r18, r12
    2c18:	23 2f       	mov	r18, r19
    2c1a:	33 27       	eor	r19, r19
    2c1c:	26 95       	lsr	r18
    2c1e:	2b 83       	std	Y+3, r18	; 0x03
    2c20:	3c 83       	std	Y+4, r19	; 0x04
    2c22:	21 15       	cp	r18, r1
    2c24:	31 05       	cpc	r19, r1
    2c26:	09 f4       	brne	.+2      	; 0x2c2a <f_write+0x1f2>
    2c28:	47 c0       	rjmp	.+142    	; 0x2cb8 <f_write+0x280>
    2c2a:	ed 81       	ldd	r30, Y+5	; 0x05
    2c2c:	fe 81       	ldd	r31, Y+6	; 0x06
    2c2e:	81 85       	ldd	r24, Z+9	; 0x09
    2c30:	92 85       	ldd	r25, Z+10	; 0x0a
    2c32:	26 0d       	add	r18, r6
    2c34:	37 1d       	adc	r19, r7
    2c36:	82 17       	cp	r24, r18
    2c38:	93 07       	cpc	r25, r19
    2c3a:	28 f4       	brcc	.+10     	; 0x2c46 <f_write+0x20e>
    2c3c:	9c 01       	movw	r18, r24
    2c3e:	26 19       	sub	r18, r6
    2c40:	37 09       	sbc	r19, r7
    2c42:	2b 83       	std	Y+3, r18	; 0x03
    2c44:	3c 83       	std	Y+4, r19	; 0x04
    2c46:	0b 81       	ldd	r16, Y+3	; 0x03
    2c48:	1c 81       	ldd	r17, Y+4	; 0x04
    2c4a:	a2 01       	movw	r20, r4
    2c4c:	91 01       	movw	r18, r2
    2c4e:	b4 01       	movw	r22, r8
    2c50:	ed 81       	ldd	r30, Y+5	; 0x05
    2c52:	fe 81       	ldd	r31, Y+6	; 0x06
    2c54:	81 81       	ldd	r24, Z+1	; 0x01
    2c56:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <disk_write>
    2c5a:	88 23       	and	r24, r24
    2c5c:	21 f0       	breq	.+8      	; 0x2c66 <f_write+0x22e>
    2c5e:	81 e0       	ldi	r24, 0x01	; 1
    2c60:	f7 01       	movw	r30, r14
    2c62:	87 87       	std	Z+15, r24	; 0x0f
    2c64:	a2 c0       	rjmp	.+324    	; 0x2daa <f_write+0x372>
    2c66:	f7 01       	movw	r30, r14
    2c68:	80 8d       	ldd	r24, Z+24	; 0x18
    2c6a:	91 8d       	ldd	r25, Z+25	; 0x19
    2c6c:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2c6e:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2c70:	82 19       	sub	r24, r2
    2c72:	93 09       	sbc	r25, r3
    2c74:	a4 09       	sbc	r26, r4
    2c76:	b5 09       	sbc	r27, r5
    2c78:	2b 81       	ldd	r18, Y+3	; 0x03
    2c7a:	3c 81       	ldd	r19, Y+4	; 0x04
    2c7c:	a9 01       	movw	r20, r18
    2c7e:	60 e0       	ldi	r22, 0x00	; 0
    2c80:	70 e0       	ldi	r23, 0x00	; 0
    2c82:	84 17       	cp	r24, r20
    2c84:	95 07       	cpc	r25, r21
    2c86:	a6 07       	cpc	r26, r22
    2c88:	b7 07       	cpc	r27, r23
    2c8a:	80 f4       	brcc	.+32     	; 0x2cac <f_write+0x274>
    2c8c:	98 2f       	mov	r25, r24
    2c8e:	88 27       	eor	r24, r24
    2c90:	99 0f       	add	r25, r25
    2c92:	b4 01       	movw	r22, r8
    2c94:	68 0f       	add	r22, r24
    2c96:	79 1f       	adc	r23, r25
    2c98:	40 e0       	ldi	r20, 0x00	; 0
    2c9a:	52 e0       	ldi	r21, 0x02	; 2
    2c9c:	89 85       	ldd	r24, Y+9	; 0x09
    2c9e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca0:	0e 94 a2 05 	call	0xb44	; 0xb44 <mem_cpy>
    2ca4:	f7 01       	movw	r30, r14
    2ca6:	86 85       	ldd	r24, Z+14	; 0x0e
    2ca8:	8f 77       	andi	r24, 0x7F	; 127
    2caa:	86 87       	std	Z+14, r24	; 0x0e
    2cac:	6b 80       	ldd	r6, Y+3	; 0x03
    2cae:	7c 80       	ldd	r7, Y+4	; 0x04
    2cb0:	76 2c       	mov	r7, r6
    2cb2:	66 24       	eor	r6, r6
    2cb4:	77 0c       	add	r7, r7
    2cb6:	46 c0       	rjmp	.+140    	; 0x2d44 <f_write+0x30c>
    2cb8:	f7 01       	movw	r30, r14
    2cba:	80 8d       	ldd	r24, Z+24	; 0x18
    2cbc:	91 8d       	ldd	r25, Z+25	; 0x19
    2cbe:	a2 8d       	ldd	r26, Z+26	; 0x1a
    2cc0:	b3 8d       	ldd	r27, Z+27	; 0x1b
    2cc2:	28 16       	cp	r2, r24
    2cc4:	39 06       	cpc	r3, r25
    2cc6:	4a 06       	cpc	r4, r26
    2cc8:	5b 06       	cpc	r5, r27
    2cca:	f1 f0       	breq	.+60     	; 0x2d08 <f_write+0x2d0>
    2ccc:	40 89       	ldd	r20, Z+16	; 0x10
    2cce:	51 89       	ldd	r21, Z+17	; 0x11
    2cd0:	62 89       	ldd	r22, Z+18	; 0x12
    2cd2:	73 89       	ldd	r23, Z+19	; 0x13
    2cd4:	82 85       	ldd	r24, Z+10	; 0x0a
    2cd6:	93 85       	ldd	r25, Z+11	; 0x0b
    2cd8:	a4 85       	ldd	r26, Z+12	; 0x0c
    2cda:	b5 85       	ldd	r27, Z+13	; 0x0d
    2cdc:	48 17       	cp	r20, r24
    2cde:	59 07       	cpc	r21, r25
    2ce0:	6a 07       	cpc	r22, r26
    2ce2:	7b 07       	cpc	r23, r27
    2ce4:	88 f4       	brcc	.+34     	; 0x2d08 <f_write+0x2d0>
    2ce6:	01 e0       	ldi	r16, 0x01	; 1
    2ce8:	10 e0       	ldi	r17, 0x00	; 0
    2cea:	a2 01       	movw	r20, r4
    2cec:	91 01       	movw	r18, r2
    2cee:	69 85       	ldd	r22, Y+9	; 0x09
    2cf0:	7a 85       	ldd	r23, Y+10	; 0x0a
    2cf2:	ed 81       	ldd	r30, Y+5	; 0x05
    2cf4:	fe 81       	ldd	r31, Y+6	; 0x06
    2cf6:	81 81       	ldd	r24, Z+1	; 0x01
    2cf8:	0e 94 4e 1f 	call	0x3e9c	; 0x3e9c <disk_read>
    2cfc:	88 23       	and	r24, r24
    2cfe:	21 f0       	breq	.+8      	; 0x2d08 <f_write+0x2d0>
    2d00:	81 e0       	ldi	r24, 0x01	; 1
    2d02:	f7 01       	movw	r30, r14
    2d04:	87 87       	std	Z+15, r24	; 0x0f
    2d06:	51 c0       	rjmp	.+162    	; 0x2daa <f_write+0x372>
    2d08:	f7 01       	movw	r30, r14
    2d0a:	20 8e       	std	Z+24, r2	; 0x18
    2d0c:	31 8e       	std	Z+25, r3	; 0x19
    2d0e:	42 8e       	std	Z+26, r4	; 0x1a
    2d10:	53 8e       	std	Z+27, r5	; 0x1b
    2d12:	f7 01       	movw	r30, r14
    2d14:	80 89       	ldd	r24, Z+16	; 0x10
    2d16:	91 89       	ldd	r25, Z+17	; 0x11
    2d18:	91 70       	andi	r25, 0x01	; 1
    2d1a:	20 e0       	ldi	r18, 0x00	; 0
    2d1c:	32 e0       	ldi	r19, 0x02	; 2
    2d1e:	39 01       	movw	r6, r18
    2d20:	68 1a       	sub	r6, r24
    2d22:	79 0a       	sbc	r7, r25
    2d24:	c6 14       	cp	r12, r6
    2d26:	d7 04       	cpc	r13, r7
    2d28:	08 f4       	brcc	.+2      	; 0x2d2c <f_write+0x2f4>
    2d2a:	36 01       	movw	r6, r12
    2d2c:	a3 01       	movw	r20, r6
    2d2e:	b4 01       	movw	r22, r8
    2d30:	29 85       	ldd	r18, Y+9	; 0x09
    2d32:	3a 85       	ldd	r19, Y+10	; 0x0a
    2d34:	82 0f       	add	r24, r18
    2d36:	93 1f       	adc	r25, r19
    2d38:	0e 94 a2 05 	call	0xb44	; 0xb44 <mem_cpy>
    2d3c:	f7 01       	movw	r30, r14
    2d3e:	86 85       	ldd	r24, Z+14	; 0x0e
    2d40:	80 68       	ori	r24, 0x80	; 128
    2d42:	86 87       	std	Z+14, r24	; 0x0e
    2d44:	c6 18       	sub	r12, r6
    2d46:	d7 08       	sbc	r13, r7
    2d48:	f5 01       	movw	r30, r10
    2d4a:	80 81       	ld	r24, Z
    2d4c:	91 81       	ldd	r25, Z+1	; 0x01
    2d4e:	86 0d       	add	r24, r6
    2d50:	97 1d       	adc	r25, r7
    2d52:	80 83       	st	Z, r24
    2d54:	91 83       	std	Z+1, r25	; 0x01
    2d56:	86 0c       	add	r8, r6
    2d58:	97 1c       	adc	r9, r7
    2d5a:	f7 01       	movw	r30, r14
    2d5c:	80 89       	ldd	r24, Z+16	; 0x10
    2d5e:	91 89       	ldd	r25, Z+17	; 0x11
    2d60:	a2 89       	ldd	r26, Z+18	; 0x12
    2d62:	b3 89       	ldd	r27, Z+19	; 0x13
    2d64:	86 0d       	add	r24, r6
    2d66:	97 1d       	adc	r25, r7
    2d68:	a1 1d       	adc	r26, r1
    2d6a:	b1 1d       	adc	r27, r1
    2d6c:	80 8b       	std	Z+16, r24	; 0x10
    2d6e:	91 8b       	std	Z+17, r25	; 0x11
    2d70:	a2 8b       	std	Z+18, r26	; 0x12
    2d72:	b3 8b       	std	Z+19, r27	; 0x13
    2d74:	42 85       	ldd	r20, Z+10	; 0x0a
    2d76:	53 85       	ldd	r21, Z+11	; 0x0b
    2d78:	64 85       	ldd	r22, Z+12	; 0x0c
    2d7a:	75 85       	ldd	r23, Z+13	; 0x0d
    2d7c:	48 17       	cp	r20, r24
    2d7e:	59 07       	cpc	r21, r25
    2d80:	6a 07       	cpc	r22, r26
    2d82:	7b 07       	cpc	r23, r27
    2d84:	10 f4       	brcc	.+4      	; 0x2d8a <f_write+0x352>
    2d86:	ac 01       	movw	r20, r24
    2d88:	bd 01       	movw	r22, r26
    2d8a:	f7 01       	movw	r30, r14
    2d8c:	42 87       	std	Z+10, r20	; 0x0a
    2d8e:	53 87       	std	Z+11, r21	; 0x0b
    2d90:	64 87       	std	Z+12, r22	; 0x0c
    2d92:	75 87       	std	Z+13, r23	; 0x0d
    2d94:	c1 14       	cp	r12, r1
    2d96:	d1 04       	cpc	r13, r1
    2d98:	09 f0       	breq	.+2      	; 0x2d9c <f_write+0x364>
    2d9a:	97 ce       	rjmp	.-722    	; 0x2aca <f_write+0x92>
    2d9c:	f7 01       	movw	r30, r14
    2d9e:	86 85       	ldd	r24, Z+14	; 0x0e
    2da0:	80 64       	ori	r24, 0x40	; 64
    2da2:	86 87       	std	Z+14, r24	; 0x0e
    2da4:	80 e0       	ldi	r24, 0x00	; 0
    2da6:	01 c0       	rjmp	.+2      	; 0x2daa <f_write+0x372>
    2da8:	87 e0       	ldi	r24, 0x07	; 7
    2daa:	2a 96       	adiw	r28, 0x0a	; 10
    2dac:	cd bf       	out	0x3d, r28	; 61
    2dae:	de bf       	out	0x3e, r29	; 62
    2db0:	df 91       	pop	r29
    2db2:	cf 91       	pop	r28
    2db4:	1f 91       	pop	r17
    2db6:	0f 91       	pop	r16
    2db8:	ff 90       	pop	r15
    2dba:	ef 90       	pop	r14
    2dbc:	df 90       	pop	r13
    2dbe:	cf 90       	pop	r12
    2dc0:	bf 90       	pop	r11
    2dc2:	af 90       	pop	r10
    2dc4:	9f 90       	pop	r9
    2dc6:	8f 90       	pop	r8
    2dc8:	7f 90       	pop	r7
    2dca:	6f 90       	pop	r6
    2dcc:	5f 90       	pop	r5
    2dce:	4f 90       	pop	r4
    2dd0:	3f 90       	pop	r3
    2dd2:	2f 90       	pop	r2
    2dd4:	08 95       	ret

00002dd6 <putc_bfd>:
    2dd6:	bf 92       	push	r11
    2dd8:	cf 92       	push	r12
    2dda:	df 92       	push	r13
    2ddc:	ef 92       	push	r14
    2dde:	ff 92       	push	r15
    2de0:	0f 93       	push	r16
    2de2:	1f 93       	push	r17
    2de4:	cf 93       	push	r28
    2de6:	df 93       	push	r29
    2de8:	1f 92       	push	r1
    2dea:	1f 92       	push	r1
    2dec:	cd b7       	in	r28, 0x3d	; 61
    2dee:	de b7       	in	r29, 0x3e	; 62
    2df0:	8c 01       	movw	r16, r24
    2df2:	b6 2e       	mov	r11, r22
    2df4:	2a e0       	ldi	r18, 0x0A	; 10
    2df6:	62 13       	cpse	r22, r18
    2df8:	03 c0       	rjmp	.+6      	; 0x2e00 <putc_bfd+0x2a>
    2dfa:	6d e0       	ldi	r22, 0x0D	; 13
    2dfc:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <putc_bfd>
    2e00:	f8 01       	movw	r30, r16
    2e02:	82 81       	ldd	r24, Z+2	; 0x02
    2e04:	93 81       	ldd	r25, Z+3	; 0x03
    2e06:	99 23       	and	r25, r25
    2e08:	84 f1       	brlt	.+96     	; 0x2e6a <putc_bfd+0x94>
    2e0a:	c4 80       	ldd	r12, Z+4	; 0x04
    2e0c:	d5 80       	ldd	r13, Z+5	; 0x05
    2e0e:	7c 01       	movw	r14, r24
    2e10:	ff ef       	ldi	r31, 0xFF	; 255
    2e12:	ef 1a       	sub	r14, r31
    2e14:	ff 0a       	sbc	r15, r31
    2e16:	f8 01       	movw	r30, r16
    2e18:	e8 0f       	add	r30, r24
    2e1a:	f9 1f       	adc	r31, r25
    2e1c:	b6 82       	std	Z+6, r11	; 0x06
    2e1e:	2c e3       	ldi	r18, 0x3C	; 60
    2e20:	e2 16       	cp	r14, r18
    2e22:	f1 04       	cpc	r15, r1
    2e24:	cc f0       	brlt	.+50     	; 0x2e58 <putc_bfd+0x82>
    2e26:	9e 01       	movw	r18, r28
    2e28:	2f 5f       	subi	r18, 0xFF	; 255
    2e2a:	3f 4f       	sbci	r19, 0xFF	; 255
    2e2c:	a7 01       	movw	r20, r14
    2e2e:	b8 01       	movw	r22, r16
    2e30:	6a 5f       	subi	r22, 0xFA	; 250
    2e32:	7f 4f       	sbci	r23, 0xFF	; 255
    2e34:	f8 01       	movw	r30, r16
    2e36:	80 81       	ld	r24, Z
    2e38:	91 81       	ldd	r25, Z+1	; 0x01
    2e3a:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <f_write>
    2e3e:	81 e0       	ldi	r24, 0x01	; 1
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	29 81       	ldd	r18, Y+1	; 0x01
    2e44:	3a 81       	ldd	r19, Y+2	; 0x02
    2e46:	2e 15       	cp	r18, r14
    2e48:	3f 05       	cpc	r19, r15
    2e4a:	11 f4       	brne	.+4      	; 0x2e50 <putc_bfd+0x7a>
    2e4c:	80 e0       	ldi	r24, 0x00	; 0
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	ee 24       	eor	r14, r14
    2e52:	ff 24       	eor	r15, r15
    2e54:	e8 1a       	sub	r14, r24
    2e56:	f9 0a       	sbc	r15, r25
    2e58:	f8 01       	movw	r30, r16
    2e5a:	e2 82       	std	Z+2, r14	; 0x02
    2e5c:	f3 82       	std	Z+3, r15	; 0x03
    2e5e:	ff ef       	ldi	r31, 0xFF	; 255
    2e60:	cf 1a       	sub	r12, r31
    2e62:	df 0a       	sbc	r13, r31
    2e64:	f8 01       	movw	r30, r16
    2e66:	c4 82       	std	Z+4, r12	; 0x04
    2e68:	d5 82       	std	Z+5, r13	; 0x05
    2e6a:	0f 90       	pop	r0
    2e6c:	0f 90       	pop	r0
    2e6e:	df 91       	pop	r29
    2e70:	cf 91       	pop	r28
    2e72:	1f 91       	pop	r17
    2e74:	0f 91       	pop	r16
    2e76:	ff 90       	pop	r15
    2e78:	ef 90       	pop	r14
    2e7a:	df 90       	pop	r13
    2e7c:	cf 90       	pop	r12
    2e7e:	bf 90       	pop	r11
    2e80:	08 95       	ret

00002e82 <putc_flush>:
    2e82:	0f 93       	push	r16
    2e84:	1f 93       	push	r17
    2e86:	cf 93       	push	r28
    2e88:	df 93       	push	r29
    2e8a:	1f 92       	push	r1
    2e8c:	1f 92       	push	r1
    2e8e:	cd b7       	in	r28, 0x3d	; 61
    2e90:	de b7       	in	r29, 0x3e	; 62
    2e92:	fc 01       	movw	r30, r24
    2e94:	42 81       	ldd	r20, Z+2	; 0x02
    2e96:	53 81       	ldd	r21, Z+3	; 0x03
    2e98:	55 23       	and	r21, r21
    2e9a:	c4 f0       	brlt	.+48     	; 0x2ecc <putc_flush+0x4a>
    2e9c:	8c 01       	movw	r16, r24
    2e9e:	bc 01       	movw	r22, r24
    2ea0:	6a 5f       	subi	r22, 0xFA	; 250
    2ea2:	7f 4f       	sbci	r23, 0xFF	; 255
    2ea4:	9e 01       	movw	r18, r28
    2ea6:	2f 5f       	subi	r18, 0xFF	; 255
    2ea8:	3f 4f       	sbci	r19, 0xFF	; 255
    2eaa:	80 81       	ld	r24, Z
    2eac:	91 81       	ldd	r25, Z+1	; 0x01
    2eae:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <f_write>
    2eb2:	81 11       	cpse	r24, r1
    2eb4:	0e c0       	rjmp	.+28     	; 0x2ed2 <putc_flush+0x50>
    2eb6:	f8 01       	movw	r30, r16
    2eb8:	22 81       	ldd	r18, Z+2	; 0x02
    2eba:	33 81       	ldd	r19, Z+3	; 0x03
    2ebc:	89 81       	ldd	r24, Y+1	; 0x01
    2ebe:	9a 81       	ldd	r25, Y+2	; 0x02
    2ec0:	28 17       	cp	r18, r24
    2ec2:	39 07       	cpc	r19, r25
    2ec4:	49 f4       	brne	.+18     	; 0x2ed8 <putc_flush+0x56>
    2ec6:	84 81       	ldd	r24, Z+4	; 0x04
    2ec8:	95 81       	ldd	r25, Z+5	; 0x05
    2eca:	08 c0       	rjmp	.+16     	; 0x2edc <putc_flush+0x5a>
    2ecc:	8f ef       	ldi	r24, 0xFF	; 255
    2ece:	9f ef       	ldi	r25, 0xFF	; 255
    2ed0:	05 c0       	rjmp	.+10     	; 0x2edc <putc_flush+0x5a>
    2ed2:	8f ef       	ldi	r24, 0xFF	; 255
    2ed4:	9f ef       	ldi	r25, 0xFF	; 255
    2ed6:	02 c0       	rjmp	.+4      	; 0x2edc <putc_flush+0x5a>
    2ed8:	8f ef       	ldi	r24, 0xFF	; 255
    2eda:	9f ef       	ldi	r25, 0xFF	; 255
    2edc:	0f 90       	pop	r0
    2ede:	0f 90       	pop	r0
    2ee0:	df 91       	pop	r29
    2ee2:	cf 91       	pop	r28
    2ee4:	1f 91       	pop	r17
    2ee6:	0f 91       	pop	r16
    2ee8:	08 95       	ret

00002eea <f_sync>:
    2eea:	ef 92       	push	r14
    2eec:	ff 92       	push	r15
    2eee:	0f 93       	push	r16
    2ef0:	1f 93       	push	r17
    2ef2:	cf 93       	push	r28
    2ef4:	df 93       	push	r29
    2ef6:	1f 92       	push	r1
    2ef8:	1f 92       	push	r1
    2efa:	cd b7       	in	r28, 0x3d	; 61
    2efc:	de b7       	in	r29, 0x3e	; 62
    2efe:	7c 01       	movw	r14, r24
    2f00:	be 01       	movw	r22, r28
    2f02:	6f 5f       	subi	r22, 0xFF	; 255
    2f04:	7f 4f       	sbci	r23, 0xFF	; 255
    2f06:	0e 94 24 06 	call	0xc48	; 0xc48 <validate>
    2f0a:	81 11       	cpse	r24, r1
    2f0c:	57 c0       	rjmp	.+174    	; 0x2fbc <f_sync+0xd2>
    2f0e:	f7 01       	movw	r30, r14
    2f10:	86 85       	ldd	r24, Z+14	; 0x0e
    2f12:	86 ff       	sbrs	r24, 6
    2f14:	50 c0       	rjmp	.+160    	; 0x2fb6 <f_sync+0xcc>
    2f16:	88 23       	and	r24, r24
    2f18:	a4 f4       	brge	.+40     	; 0x2f42 <f_sync+0x58>
    2f1a:	20 8d       	ldd	r18, Z+24	; 0x18
    2f1c:	31 8d       	ldd	r19, Z+25	; 0x19
    2f1e:	42 8d       	ldd	r20, Z+26	; 0x1a
    2f20:	53 8d       	ldd	r21, Z+27	; 0x1b
    2f22:	e9 81       	ldd	r30, Y+1	; 0x01
    2f24:	fa 81       	ldd	r31, Y+2	; 0x02
    2f26:	01 e0       	ldi	r16, 0x01	; 1
    2f28:	10 e0       	ldi	r17, 0x00	; 0
    2f2a:	b7 01       	movw	r22, r14
    2f2c:	6e 5d       	subi	r22, 0xDE	; 222
    2f2e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f30:	81 81       	ldd	r24, Z+1	; 0x01
    2f32:	0e 94 9e 1f 	call	0x3f3c	; 0x3f3c <disk_write>
    2f36:	81 11       	cpse	r24, r1
    2f38:	40 c0       	rjmp	.+128    	; 0x2fba <f_sync+0xd0>
    2f3a:	f7 01       	movw	r30, r14
    2f3c:	86 85       	ldd	r24, Z+14	; 0x0e
    2f3e:	8f 77       	andi	r24, 0x7F	; 127
    2f40:	86 87       	std	Z+14, r24	; 0x0e
    2f42:	f7 01       	movw	r30, r14
    2f44:	44 8d       	ldd	r20, Z+28	; 0x1c
    2f46:	55 8d       	ldd	r21, Z+29	; 0x1d
    2f48:	66 8d       	ldd	r22, Z+30	; 0x1e
    2f4a:	77 8d       	ldd	r23, Z+31	; 0x1f
    2f4c:	89 81       	ldd	r24, Y+1	; 0x01
    2f4e:	9a 81       	ldd	r25, Y+2	; 0x02
    2f50:	0e 94 ab 06 	call	0xd56	; 0xd56 <move_window>
    2f54:	81 11       	cpse	r24, r1
    2f56:	32 c0       	rjmp	.+100    	; 0x2fbc <f_sync+0xd2>
    2f58:	f7 01       	movw	r30, r14
    2f5a:	00 a1       	ldd	r16, Z+32	; 0x20
    2f5c:	11 a1       	ldd	r17, Z+33	; 0x21
    2f5e:	f8 01       	movw	r30, r16
    2f60:	83 85       	ldd	r24, Z+11	; 0x0b
    2f62:	80 62       	ori	r24, 0x20	; 32
    2f64:	83 87       	std	Z+11, r24	; 0x0b
    2f66:	f7 01       	movw	r30, r14
    2f68:	26 81       	ldd	r18, Z+6	; 0x06
    2f6a:	37 81       	ldd	r19, Z+7	; 0x07
    2f6c:	40 85       	ldd	r20, Z+8	; 0x08
    2f6e:	51 85       	ldd	r21, Z+9	; 0x09
    2f70:	b8 01       	movw	r22, r16
    2f72:	80 81       	ld	r24, Z
    2f74:	91 81       	ldd	r25, Z+1	; 0x01
    2f76:	0e 94 e3 08 	call	0x11c6	; 0x11c6 <st_clust>
    2f7a:	f7 01       	movw	r30, r14
    2f7c:	32 85       	ldd	r19, Z+10	; 0x0a
    2f7e:	23 85       	ldd	r18, Z+11	; 0x0b
    2f80:	94 85       	ldd	r25, Z+12	; 0x0c
    2f82:	85 85       	ldd	r24, Z+13	; 0x0d
    2f84:	f8 01       	movw	r30, r16
    2f86:	34 8f       	std	Z+28, r19	; 0x1c
    2f88:	25 8f       	std	Z+29, r18	; 0x1d
    2f8a:	96 8f       	std	Z+30, r25	; 0x1e
    2f8c:	87 8f       	std	Z+31, r24	; 0x1f
    2f8e:	16 8a       	std	Z+22, r1	; 0x16
    2f90:	17 8a       	std	Z+23, r1	; 0x17
    2f92:	81 e2       	ldi	r24, 0x21	; 33
    2f94:	80 8f       	std	Z+24, r24	; 0x18
    2f96:	8c e4       	ldi	r24, 0x4C	; 76
    2f98:	81 8f       	std	Z+25, r24	; 0x19
    2f9a:	12 8a       	std	Z+18, r1	; 0x12
    2f9c:	13 8a       	std	Z+19, r1	; 0x13
    2f9e:	89 81       	ldd	r24, Y+1	; 0x01
    2fa0:	9a 81       	ldd	r25, Y+2	; 0x02
    2fa2:	21 e0       	ldi	r18, 0x01	; 1
    2fa4:	fc 01       	movw	r30, r24
    2fa6:	23 83       	std	Z+3, r18	; 0x03
    2fa8:	0e 94 4b 07 	call	0xe96	; 0xe96 <sync_fs>
    2fac:	f7 01       	movw	r30, r14
    2fae:	96 85       	ldd	r25, Z+14	; 0x0e
    2fb0:	9f 7b       	andi	r25, 0xBF	; 191
    2fb2:	96 87       	std	Z+14, r25	; 0x0e
    2fb4:	03 c0       	rjmp	.+6      	; 0x2fbc <f_sync+0xd2>
    2fb6:	80 e0       	ldi	r24, 0x00	; 0
    2fb8:	01 c0       	rjmp	.+2      	; 0x2fbc <f_sync+0xd2>
    2fba:	81 e0       	ldi	r24, 0x01	; 1
    2fbc:	0f 90       	pop	r0
    2fbe:	0f 90       	pop	r0
    2fc0:	df 91       	pop	r29
    2fc2:	cf 91       	pop	r28
    2fc4:	1f 91       	pop	r17
    2fc6:	0f 91       	pop	r16
    2fc8:	ff 90       	pop	r15
    2fca:	ef 90       	pop	r14
    2fcc:	08 95       	ret

00002fce <f_close>:
    2fce:	0f 93       	push	r16
    2fd0:	1f 93       	push	r17
    2fd2:	cf 93       	push	r28
    2fd4:	df 93       	push	r29
    2fd6:	1f 92       	push	r1
    2fd8:	1f 92       	push	r1
    2fda:	cd b7       	in	r28, 0x3d	; 61
    2fdc:	de b7       	in	r29, 0x3e	; 62
    2fde:	8c 01       	movw	r16, r24
    2fe0:	0e 94 75 17 	call	0x2eea	; 0x2eea <f_sync>
    2fe4:	81 11       	cpse	r24, r1
    2fe6:	0b c0       	rjmp	.+22     	; 0x2ffe <f_close+0x30>
    2fe8:	be 01       	movw	r22, r28
    2fea:	6f 5f       	subi	r22, 0xFF	; 255
    2fec:	7f 4f       	sbci	r23, 0xFF	; 255
    2fee:	c8 01       	movw	r24, r16
    2ff0:	0e 94 24 06 	call	0xc48	; 0xc48 <validate>
    2ff4:	81 11       	cpse	r24, r1
    2ff6:	03 c0       	rjmp	.+6      	; 0x2ffe <f_close+0x30>
    2ff8:	f8 01       	movw	r30, r16
    2ffa:	10 82       	st	Z, r1
    2ffc:	11 82       	std	Z+1, r1	; 0x01
    2ffe:	0f 90       	pop	r0
    3000:	0f 90       	pop	r0
    3002:	df 91       	pop	r29
    3004:	cf 91       	pop	r28
    3006:	1f 91       	pop	r17
    3008:	0f 91       	pop	r16
    300a:	08 95       	ret

0000300c <f_printf>:
int f_printf (
	FIL* fp,			/* Pointer to the file object */
	const TCHAR* fmt,	/* Pointer to the format string */
	...					/* Optional arguments... */
)
{
    300c:	2f 92       	push	r2
    300e:	3f 92       	push	r3
    3010:	4f 92       	push	r4
    3012:	5f 92       	push	r5
    3014:	6f 92       	push	r6
    3016:	7f 92       	push	r7
    3018:	8f 92       	push	r8
    301a:	9f 92       	push	r9
    301c:	af 92       	push	r10
    301e:	bf 92       	push	r11
    3020:	cf 92       	push	r12
    3022:	df 92       	push	r13
    3024:	ef 92       	push	r14
    3026:	ff 92       	push	r15
    3028:	0f 93       	push	r16
    302a:	1f 93       	push	r17
    302c:	cf 93       	push	r28
    302e:	df 93       	push	r29
    3030:	cd b7       	in	r28, 0x3d	; 61
    3032:	de b7       	in	r29, 0x3e	; 62
    3034:	c8 56       	subi	r28, 0x68	; 104
    3036:	d1 09       	sbc	r29, r1
    3038:	cd bf       	out	0x3d, r28	; 61
    303a:	de bf       	out	0x3e, r29	; 62
    303c:	c0 58       	subi	r28, 0x80	; 128
    303e:	df 4f       	sbci	r29, 0xFF	; 255
    3040:	c8 80       	ld	r12, Y
    3042:	d9 80       	ldd	r13, Y+1	; 0x01
    3044:	c0 58       	subi	r28, 0x80	; 128
    3046:	d0 40       	sbci	r29, 0x00	; 0
static void putc_init (		/* Initialize write buffer */
	putbuff* pb,
	FIL* fp
)
{
	mem_set(pb, 0, sizeof (putbuff));
    3048:	46 e4       	ldi	r20, 0x46	; 70
    304a:	50 e0       	ldi	r21, 0x00	; 0
    304c:	60 e0       	ldi	r22, 0x00	; 0
    304e:	70 e0       	ldi	r23, 0x00	; 0
    3050:	ce 01       	movw	r24, r28
    3052:	01 96       	adiw	r24, 0x01	; 1
    3054:	0e 94 b0 05 	call	0xb60	; 0xb60 <mem_set>
	pb->fp = fp;
    3058:	c2 58       	subi	r28, 0x82	; 130
    305a:	df 4f       	sbci	r29, 0xFF	; 255
    305c:	88 81       	ld	r24, Y
    305e:	99 81       	ldd	r25, Y+1	; 0x01
    3060:	ce 57       	subi	r28, 0x7E	; 126
    3062:	d0 40       	sbci	r29, 0x00	; 0
    3064:	89 83       	std	Y+1, r24	; 0x01
    3066:	9a 83       	std	Y+2, r25	; 0x02
	TCHAR c, d, str[32], *p;


	putc_init(&pb, fp);

	va_start(arp, fmt);
    3068:	9e 01       	movw	r18, r28
    306a:	2e 57       	subi	r18, 0x7E	; 126
    306c:	3f 4f       	sbci	r19, 0xFF	; 255
    306e:	a9 96       	adiw	r28, 0x29	; 41
    3070:	2e af       	std	Y+62, r18	; 0x3e
    3072:	3f af       	std	Y+63, r19	; 0x3f
    3074:	a9 97       	sbiw	r28, 0x29	; 41

	for (;;) {
		c = *fmt++;
    3076:	d6 01       	movw	r26, r12
    3078:	6c 91       	ld	r22, X
		if (c == 0) break;			/* End of string */
    307a:	66 23       	and	r22, r22
    307c:	09 f4       	brne	.+2      	; 0x3080 <f_printf+0x74>
    307e:	bd c1       	rjmp	.+890    	; 0x33fa <f_printf+0x3ee>
		if (c != '%') {				/* Non escape character */
    3080:	65 32       	cpi	r22, 0x25	; 37
    3082:	41 f0       	breq	.+16     	; 0x3094 <f_printf+0x88>
	putc_init(&pb, fp);

	va_start(arp, fmt);

	for (;;) {
		c = *fmt++;
    3084:	bf ef       	ldi	r27, 0xFF	; 255
    3086:	cb 1a       	sub	r12, r27
    3088:	db 0a       	sbc	r13, r27
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
    308a:	ce 01       	movw	r24, r28
    308c:	01 96       	adiw	r24, 0x01	; 1
    308e:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <putc_bfd>
			continue;
    3092:	f1 cf       	rjmp	.-30     	; 0x3076 <f_printf+0x6a>
		}
		w = f = 0;
		c = *fmt++;
    3094:	f6 01       	movw	r30, r12
    3096:	21 81       	ldd	r18, Z+1	; 0x01
		if (c == '0') {				/* Flag: '0' padding */
    3098:	20 33       	cpi	r18, 0x30	; 48
    309a:	41 f4       	brne	.+16     	; 0x30ac <f_printf+0xa0>
			f = 1; c = *fmt++;
    309c:	22 81       	ldd	r18, Z+2	; 0x02
    309e:	a6 01       	movw	r20, r12
    30a0:	4d 5f       	subi	r20, 0xFD	; 253
    30a2:	5f 4f       	sbci	r21, 0xFF	; 255
    30a4:	6a 01       	movw	r12, r20
    30a6:	33 24       	eor	r3, r3
    30a8:	33 94       	inc	r3
    30aa:	0e c0       	rjmp	.+28     	; 0x30c8 <f_printf+0xbc>
		} else {
			if (c == '-') {			/* Flag: left justified */
    30ac:	2d 32       	cpi	r18, 0x2D	; 45
    30ae:	29 f0       	breq	.+10     	; 0x30ba <f_printf+0xae>
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
		c = *fmt++;
    30b0:	52 e0       	ldi	r21, 0x02	; 2
    30b2:	c5 0e       	add	r12, r21
    30b4:	d1 1c       	adc	r13, r1
		if (c == 0) break;			/* End of string */
		if (c != '%') {				/* Non escape character */
			putc_bfd(&pb, c);
			continue;
		}
		w = f = 0;
    30b6:	31 2c       	mov	r3, r1
    30b8:	07 c0       	rjmp	.+14     	; 0x30c8 <f_printf+0xbc>
		c = *fmt++;
		if (c == '0') {				/* Flag: '0' padding */
			f = 1; c = *fmt++;
		} else {
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
    30ba:	22 81       	ldd	r18, Z+2	; 0x02
    30bc:	f6 01       	movw	r30, r12
    30be:	33 96       	adiw	r30, 0x03	; 3
    30c0:	6f 01       	movw	r12, r30
    30c2:	68 94       	set
    30c4:	33 24       	eor	r3, r3
    30c6:	31 f8       	bld	r3, 1
			}
		}
		if (c == '*') {				/* Minimum width by argument */
    30c8:	2a 32       	cpi	r18, 0x2A	; 42
    30ca:	39 f0       	breq	.+14     	; 0x30da <f_printf+0xce>
			w = va_arg(arp, int);
			c = *fmt++;
		} else {
			while (IsDigit(c)) {	/* Minimum width */
    30cc:	80 ed       	ldi	r24, 0xD0	; 208
    30ce:	82 0f       	add	r24, r18
    30d0:	8a 30       	cpi	r24, 0x0A	; 10
    30d2:	b0 f0       	brcs	.+44     	; 0x3100 <f_printf+0xf4>
    30d4:	00 e0       	ldi	r16, 0x00	; 0
    30d6:	10 e0       	ldi	r17, 0x00	; 0
    30d8:	2e c0       	rjmp	.+92     	; 0x3136 <f_printf+0x12a>
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		if (c == '*') {				/* Minimum width by argument */
			w = va_arg(arp, int);
    30da:	a9 96       	adiw	r28, 0x29	; 41
    30dc:	ae ad       	ldd	r26, Y+62	; 0x3e
    30de:	bf ad       	ldd	r27, Y+63	; 0x3f
    30e0:	a9 97       	sbiw	r28, 0x29	; 41
    30e2:	0d 91       	ld	r16, X+
    30e4:	1c 91       	ld	r17, X
    30e6:	11 97       	sbiw	r26, 0x01	; 1
			c = *fmt++;
    30e8:	f6 01       	movw	r30, r12
    30ea:	20 81       	ld	r18, Z
			if (c == '-') {			/* Flag: left justified */
				f = 2; c = *fmt++;
			}
		}
		if (c == '*') {				/* Minimum width by argument */
			w = va_arg(arp, int);
    30ec:	12 96       	adiw	r26, 0x02	; 2
    30ee:	a9 96       	adiw	r28, 0x29	; 41
    30f0:	ae af       	std	Y+62, r26	; 0x3e
    30f2:	bf af       	std	Y+63, r27	; 0x3f
    30f4:	a9 97       	sbiw	r28, 0x29	; 41
			c = *fmt++;
    30f6:	a6 01       	movw	r20, r12
    30f8:	4f 5f       	subi	r20, 0xFF	; 255
    30fa:	5f 4f       	sbci	r21, 0xFF	; 255
    30fc:	6a 01       	movw	r12, r20
    30fe:	1b c0       	rjmp	.+54     	; 0x3136 <f_printf+0x12a>
		} else {
			while (IsDigit(c)) {	/* Minimum width */
    3100:	00 e0       	ldi	r16, 0x00	; 0
    3102:	10 e0       	ldi	r17, 0x00	; 0
				w = w * 10 + c - '0';
    3104:	c8 01       	movw	r24, r16
    3106:	88 0f       	add	r24, r24
    3108:	99 1f       	adc	r25, r25
    310a:	00 0f       	add	r16, r16
    310c:	11 1f       	adc	r17, r17
    310e:	00 0f       	add	r16, r16
    3110:	11 1f       	adc	r17, r17
    3112:	00 0f       	add	r16, r16
    3114:	11 1f       	adc	r17, r17
    3116:	08 0f       	add	r16, r24
    3118:	19 1f       	adc	r17, r25
    311a:	02 0f       	add	r16, r18
    311c:	11 1d       	adc	r17, r1
    311e:	00 53       	subi	r16, 0x30	; 48
    3120:	11 09       	sbc	r17, r1
				c = *fmt++;
    3122:	5f ef       	ldi	r21, 0xFF	; 255
    3124:	c5 1a       	sub	r12, r21
    3126:	d5 0a       	sbc	r13, r21
    3128:	f6 01       	movw	r30, r12
    312a:	31 97       	sbiw	r30, 0x01	; 1
    312c:	20 81       	ld	r18, Z
		}
		if (c == '*') {				/* Minimum width by argument */
			w = va_arg(arp, int);
			c = *fmt++;
		} else {
			while (IsDigit(c)) {	/* Minimum width */
    312e:	80 ed       	ldi	r24, 0xD0	; 208
    3130:	82 0f       	add	r24, r18
    3132:	8a 30       	cpi	r24, 0x0A	; 10
    3134:	38 f3       	brcs	.-50     	; 0x3104 <f_printf+0xf8>
				w = w * 10 + c - '0';
				c = *fmt++;
			}
		}
		if (c == 'l' || c == 'L') {	/* Type prefix: Size is long int */
    3136:	82 2f       	mov	r24, r18
    3138:	8f 7d       	andi	r24, 0xDF	; 223
    313a:	8c 34       	cpi	r24, 0x4C	; 76
    313c:	41 f4       	brne	.+16     	; 0x314e <f_printf+0x142>
			f |= 4; c = *fmt++;
    313e:	83 2d       	mov	r24, r3
    3140:	84 60       	ori	r24, 0x04	; 4
    3142:	38 2e       	mov	r3, r24
    3144:	d6 01       	movw	r26, r12
    3146:	2c 91       	ld	r18, X
    3148:	f6 01       	movw	r30, r12
    314a:	31 96       	adiw	r30, 0x01	; 1
    314c:	6f 01       	movw	r12, r30
		}
		if (c == 0) break;
    314e:	22 23       	and	r18, r18
    3150:	09 f4       	brne	.+2      	; 0x3154 <f_printf+0x148>
    3152:	53 c1       	rjmp	.+678    	; 0x33fa <f_printf+0x3ee>
		d = c;
		if (IsLower(d)) d -= 0x20;
    3154:	8f e9       	ldi	r24, 0x9F	; 159
    3156:	82 0f       	add	r24, r18
    3158:	8a 31       	cpi	r24, 0x1A	; 26
    315a:	18 f4       	brcc	.+6      	; 0x3162 <f_printf+0x156>
    315c:	30 ee       	ldi	r19, 0xE0	; 224
    315e:	32 0f       	add	r19, r18
    3160:	01 c0       	rjmp	.+2      	; 0x3164 <f_printf+0x158>
		}
		if (c == 'l' || c == 'L') {	/* Type prefix: Size is long int */
			f |= 4; c = *fmt++;
		}
		if (c == 0) break;
		d = c;
    3162:	32 2f       	mov	r19, r18
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Atgument type is... */
    3164:	83 2f       	mov	r24, r19
    3166:	90 e0       	ldi	r25, 0x00	; 0
    3168:	fc 01       	movw	r30, r24
    316a:	e2 54       	subi	r30, 0x42	; 66
    316c:	f1 09       	sbc	r31, r1
    316e:	e7 31       	cpi	r30, 0x17	; 23
    3170:	f1 05       	cpc	r31, r1
    3172:	08 f0       	brcs	.+2      	; 0x3176 <f_printf+0x16a>
    3174:	6e c0       	rjmp	.+220    	; 0x3252 <f_printf+0x246>
    3176:	88 27       	eor	r24, r24
    3178:	e2 50       	subi	r30, 0x02	; 2
    317a:	ff 4f       	sbci	r31, 0xFF	; 255
    317c:	8f 4f       	sbci	r24, 0xFF	; 255
    317e:	0c 94 74 23 	jmp	0x46e8	; 0x46e8 <__tablejump2__>
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
    3182:	a9 96       	adiw	r28, 0x29	; 41
    3184:	ee ad       	ldd	r30, Y+62	; 0x3e
    3186:	ff ad       	ldd	r31, Y+63	; 0x3f
    3188:	a9 97       	sbiw	r28, 0x29	; 41
    318a:	80 80       	ld	r8, Z
    318c:	91 80       	ldd	r9, Z+1	; 0x01
    318e:	9f 01       	movw	r18, r30
    3190:	2e 5f       	subi	r18, 0xFE	; 254
    3192:	3f 4f       	sbci	r19, 0xFF	; 255
    3194:	a9 96       	adiw	r28, 0x29	; 41
    3196:	2e af       	std	Y+62, r18	; 0x3e
    3198:	3f af       	std	Y+63, r19	; 0x3f
    319a:	a9 97       	sbiw	r28, 0x29	; 41
			for (j = 0; p[j]; j++) ;
    319c:	d4 01       	movw	r26, r8
    319e:	6c 91       	ld	r22, X
    31a0:	66 23       	and	r22, r22
    31a2:	09 f4       	brne	.+2      	; 0x31a6 <f_printf+0x19a>
    31a4:	32 c1       	rjmp	.+612    	; 0x340a <f_printf+0x3fe>
    31a6:	f4 01       	movw	r30, r8
    31a8:	31 96       	adiw	r30, 0x01	; 1
    31aa:	41 2c       	mov	r4, r1
    31ac:	51 2c       	mov	r5, r1
    31ae:	01 c0       	rjmp	.+2      	; 0x31b2 <f_printf+0x1a6>
    31b0:	27 01       	movw	r4, r14
    31b2:	72 01       	movw	r14, r4
    31b4:	bf ef       	ldi	r27, 0xFF	; 255
    31b6:	eb 1a       	sub	r14, r27
    31b8:	fb 0a       	sbc	r15, r27
    31ba:	81 91       	ld	r24, Z+
    31bc:	81 11       	cpse	r24, r1
    31be:	f8 cf       	rjmp	.-16     	; 0x31b0 <f_printf+0x1a4>
    31c0:	21 c1       	rjmp	.+578    	; 0x3404 <f_printf+0x3f8>
    31c2:	e1 2c       	mov	r14, r1
    31c4:	f1 2c       	mov	r15, r1
			if (!(f & 2)) {						/* Right padded */
				while (j++ < w) putc_bfd(&pb, ' ') ;
    31c6:	44 24       	eor	r4, r4
    31c8:	43 94       	inc	r4
    31ca:	51 2c       	mov	r5, r1
    31cc:	57 01       	movw	r10, r14
    31ce:	60 e2       	ldi	r22, 0x20	; 32
    31d0:	ce 01       	movw	r24, r28
    31d2:	01 96       	adiw	r24, 0x01	; 1
    31d4:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <putc_bfd>
    31d8:	ef ef       	ldi	r30, 0xFF	; 255
    31da:	ae 1a       	sub	r10, r30
    31dc:	be 0a       	sbc	r11, r30
    31de:	a0 16       	cp	r10, r16
    31e0:	b1 06       	cpc	r11, r17
    31e2:	a8 f3       	brcs	.-22     	; 0x31ce <f_printf+0x1c2>
    31e4:	92 01       	movw	r18, r4
    31e6:	2e 19       	sub	r18, r14
    31e8:	3f 09       	sbc	r19, r15
    31ea:	79 01       	movw	r14, r18
    31ec:	e0 0e       	add	r14, r16
    31ee:	f1 1e       	adc	r15, r17
			}
			while (*p) putc_bfd(&pb, *p++) ;		/* String body */
    31f0:	d4 01       	movw	r26, r8
    31f2:	6c 91       	ld	r22, X
    31f4:	66 23       	and	r22, r22
    31f6:	61 f0       	breq	.+24     	; 0x3210 <f_printf+0x204>
    31f8:	bf ef       	ldi	r27, 0xFF	; 255
    31fa:	8b 1a       	sub	r8, r27
    31fc:	9b 0a       	sbc	r9, r27
    31fe:	ce 01       	movw	r24, r28
    3200:	01 96       	adiw	r24, 0x01	; 1
    3202:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <putc_bfd>
    3206:	f4 01       	movw	r30, r8
    3208:	61 91       	ld	r22, Z+
    320a:	4f 01       	movw	r8, r30
    320c:	61 11       	cpse	r22, r1
    320e:	f7 cf       	rjmp	.-18     	; 0x31fe <f_printf+0x1f2>
			while (j++ < w) putc_bfd(&pb, ' ') ;	/* Left padded */
    3210:	e0 16       	cp	r14, r16
    3212:	f1 06       	cpc	r15, r17
    3214:	08 f0       	brcs	.+2      	; 0x3218 <f_printf+0x20c>
    3216:	2f cf       	rjmp	.-418    	; 0x3076 <f_printf+0x6a>
    3218:	60 e2       	ldi	r22, 0x20	; 32
    321a:	ce 01       	movw	r24, r28
    321c:	01 96       	adiw	r24, 0x01	; 1
    321e:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <putc_bfd>
    3222:	ff ef       	ldi	r31, 0xFF	; 255
    3224:	ef 1a       	sub	r14, r31
    3226:	ff 0a       	sbc	r15, r31
    3228:	e0 16       	cp	r14, r16
    322a:	f1 06       	cpc	r15, r17
    322c:	a8 f3       	brcs	.-22     	; 0x3218 <f_printf+0x20c>
    322e:	23 cf       	rjmp	.-442    	; 0x3076 <f_printf+0x6a>
			continue;

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;
    3230:	a9 96       	adiw	r28, 0x29	; 41
    3232:	ee ad       	ldd	r30, Y+62	; 0x3e
    3234:	ff ad       	ldd	r31, Y+63	; 0x3f
    3236:	a9 97       	sbiw	r28, 0x29	; 41
    3238:	60 81       	ld	r22, Z
    323a:	9f 01       	movw	r18, r30
    323c:	2e 5f       	subi	r18, 0xFE	; 254
    323e:	3f 4f       	sbci	r19, 0xFF	; 255
    3240:	a9 96       	adiw	r28, 0x29	; 41
    3242:	2e af       	std	Y+62, r18	; 0x3e
    3244:	3f af       	std	Y+63, r19	; 0x3f
    3246:	a9 97       	sbiw	r28, 0x29	; 41
    3248:	ce 01       	movw	r24, r28
    324a:	01 96       	adiw	r24, 0x01	; 1
    324c:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <putc_bfd>
    3250:	12 cf       	rjmp	.-476    	; 0x3076 <f_printf+0x6a>

		case 'X' :					/* Unsigned hexdecimal */
			r = 16; break;

		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
    3252:	62 2f       	mov	r22, r18
    3254:	ce 01       	movw	r24, r28
    3256:	01 96       	adiw	r24, 0x01	; 1
    3258:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <putc_bfd>
    325c:	0c cf       	rjmp	.-488    	; 0x3076 <f_printf+0x6a>
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    325e:	32 fe       	sbrs	r3, 2
    3260:	14 c0       	rjmp	.+40     	; 0x328a <f_printf+0x27e>
		case 'O' :					/* Unsigned octal */
			r = 8; break;

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    3262:	4a e0       	ldi	r20, 0x0A	; 10
    3264:	01 c0       	rjmp	.+2      	; 0x3268 <f_printf+0x25c>

		case 'X' :					/* Unsigned hexdecimal */
			r = 16; break;
    3266:	40 e1       	ldi	r20, 0x10	; 16
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    3268:	a9 96       	adiw	r28, 0x29	; 41
    326a:	ee ad       	ldd	r30, Y+62	; 0x3e
    326c:	ff ad       	ldd	r31, Y+63	; 0x3f
    326e:	a9 97       	sbiw	r28, 0x29	; 41
    3270:	60 81       	ld	r22, Z
    3272:	71 81       	ldd	r23, Z+1	; 0x01
    3274:	82 81       	ldd	r24, Z+2	; 0x02
    3276:	93 81       	ldd	r25, Z+3	; 0x03
    3278:	df 01       	movw	r26, r30
    327a:	14 96       	adiw	r26, 0x04	; 4
    327c:	a9 96       	adiw	r28, 0x29	; 41
    327e:	ae af       	std	Y+62, r26	; 0x3e
    3280:	bf af       	std	Y+63, r27	; 0x3f
    3282:	a9 97       	sbiw	r28, 0x29	; 41
		if (d == 'D' && (v & 0x80000000)) {
    3284:	34 34       	cpi	r19, 0x44	; 68
    3286:	19 f1       	breq	.+70     	; 0x32ce <f_printf+0x2c2>
    3288:	2e c0       	rjmp	.+92     	; 0x32e6 <f_printf+0x2da>
		case 'O' :					/* Unsigned octal */
			r = 8; break;

		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;
    328a:	4a e0       	ldi	r20, 0x0A	; 10
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    328c:	34 34       	cpi	r19, 0x44	; 68
    328e:	81 f4       	brne	.+32     	; 0x32b0 <f_printf+0x2a4>
    3290:	a9 96       	adiw	r28, 0x29	; 41
    3292:	ee ad       	ldd	r30, Y+62	; 0x3e
    3294:	ff ad       	ldd	r31, Y+63	; 0x3f
    3296:	a9 97       	sbiw	r28, 0x29	; 41
    3298:	60 81       	ld	r22, Z
    329a:	71 81       	ldd	r23, Z+1	; 0x01
    329c:	32 96       	adiw	r30, 0x02	; 2
    329e:	a9 96       	adiw	r28, 0x29	; 41
    32a0:	ee af       	std	Y+62, r30	; 0x3e
    32a2:	ff af       	std	Y+63, r31	; 0x3f
    32a4:	a9 97       	sbiw	r28, 0x29	; 41
    32a6:	07 2e       	mov	r0, r23
    32a8:	00 0c       	add	r0, r0
    32aa:	88 0b       	sbc	r24, r24
    32ac:	99 0b       	sbc	r25, r25
    32ae:	0f c0       	rjmp	.+30     	; 0x32ce <f_printf+0x2c2>
    32b0:	a9 96       	adiw	r28, 0x29	; 41
    32b2:	ee ad       	ldd	r30, Y+62	; 0x3e
    32b4:	ff ad       	ldd	r31, Y+63	; 0x3f
    32b6:	a9 97       	sbiw	r28, 0x29	; 41
    32b8:	60 81       	ld	r22, Z
    32ba:	71 81       	ldd	r23, Z+1	; 0x01
    32bc:	cf 01       	movw	r24, r30
    32be:	02 96       	adiw	r24, 0x02	; 2
    32c0:	a9 96       	adiw	r28, 0x29	; 41
    32c2:	8e af       	std	Y+62, r24	; 0x3e
    32c4:	9f af       	std	Y+63, r25	; 0x3f
    32c6:	a9 97       	sbiw	r28, 0x29	; 41
    32c8:	80 e0       	ldi	r24, 0x00	; 0
    32ca:	90 e0       	ldi	r25, 0x00	; 0
    32cc:	0c c0       	rjmp	.+24     	; 0x32e6 <f_printf+0x2da>
		if (d == 'D' && (v & 0x80000000)) {
    32ce:	99 23       	and	r25, r25
    32d0:	54 f4       	brge	.+20     	; 0x32e6 <f_printf+0x2da>
			v = 0 - v;
    32d2:	90 95       	com	r25
    32d4:	80 95       	com	r24
    32d6:	70 95       	com	r23
    32d8:	61 95       	neg	r22
    32da:	7f 4f       	sbci	r23, 0xFF	; 255
    32dc:	8f 4f       	sbci	r24, 0xFF	; 255
    32de:	9f 4f       	sbci	r25, 0xFF	; 255
			f |= 8;
    32e0:	a3 2d       	mov	r26, r3
    32e2:	a8 60       	ori	r26, 0x08	; 8
    32e4:	3a 2e       	mov	r3, r26
    32e6:	28 37       	cpi	r18, 0x78	; 120
    32e8:	11 f4       	brne	.+4      	; 0x32ee <f_printf+0x2e2>
    32ea:	27 e2       	ldi	r18, 0x27	; 39
    32ec:	01 c0       	rjmp	.+2      	; 0x32f0 <f_printf+0x2e4>
    32ee:	27 e0       	ldi	r18, 0x07	; 7
    32f0:	22 2e       	mov	r2, r18
    32f2:	5e 01       	movw	r10, r28
    32f4:	b7 e4       	ldi	r27, 0x47	; 71
    32f6:	ab 0e       	add	r10, r27
    32f8:	b1 1c       	adc	r11, r1
		}
		i = 0;
    32fa:	81 2c       	mov	r8, r1
    32fc:	91 2c       	mov	r9, r1
		do {
			d = (TCHAR)(v % r); v /= r;
    32fe:	44 2e       	mov	r4, r20
    3300:	51 2c       	mov	r5, r1
    3302:	61 2c       	mov	r6, r1
    3304:	71 2c       	mov	r7, r1
    3306:	01 c0       	rjmp	.+2      	; 0x330a <f_printf+0x2fe>
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
    3308:	47 01       	movw	r8, r14
			v = 0 - v;
			f |= 8;
		}
		i = 0;
		do {
			d = (TCHAR)(v % r); v /= r;
    330a:	a3 01       	movw	r20, r6
    330c:	92 01       	movw	r18, r4
    330e:	0e 94 52 23 	call	0x46a4	; 0x46a4 <__udivmodsi4>
    3312:	f6 2f       	mov	r31, r22
    3314:	e6 2f       	mov	r30, r22
    3316:	62 2f       	mov	r22, r18
    3318:	73 2f       	mov	r23, r19
    331a:	84 2f       	mov	r24, r20
    331c:	95 2f       	mov	r25, r21
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
    331e:	fa 30       	cpi	r31, 0x0A	; 10
    3320:	10 f0       	brcs	.+4      	; 0x3326 <f_printf+0x31a>
    3322:	e2 2d       	mov	r30, r2
    3324:	ef 0f       	add	r30, r31
			str[i++] = d + '0';
    3326:	74 01       	movw	r14, r8
    3328:	ff ef       	ldi	r31, 0xFF	; 255
    332a:	ef 1a       	sub	r14, r31
    332c:	ff 0a       	sbc	r15, r31
    332e:	e0 5d       	subi	r30, 0xD0	; 208
    3330:	d5 01       	movw	r26, r10
    3332:	ed 93       	st	X+, r30
    3334:	5d 01       	movw	r10, r26
		} while (v && i < sizeof str / sizeof *str);
    3336:	61 15       	cp	r22, r1
    3338:	71 05       	cpc	r23, r1
    333a:	81 05       	cpc	r24, r1
    333c:	91 05       	cpc	r25, r1
    333e:	21 f0       	breq	.+8      	; 0x3348 <f_printf+0x33c>
    3340:	b0 e2       	ldi	r27, 0x20	; 32
    3342:	eb 16       	cp	r14, r27
    3344:	f1 04       	cpc	r15, r1
    3346:	01 f7       	brne	.-64     	; 0x3308 <f_printf+0x2fc>
		if (f & 8) str[i++] = '-';
    3348:	33 fe       	sbrs	r3, 3
    334a:	0c c0       	rjmp	.+24     	; 0x3364 <f_printf+0x358>
    334c:	e7 e4       	ldi	r30, 0x47	; 71
    334e:	f0 e0       	ldi	r31, 0x00	; 0
    3350:	ec 0f       	add	r30, r28
    3352:	fd 1f       	adc	r31, r29
    3354:	ee 0d       	add	r30, r14
    3356:	ff 1d       	adc	r31, r15
    3358:	2d e2       	ldi	r18, 0x2D	; 45
    335a:	20 83       	st	Z, r18
    335c:	a4 01       	movw	r20, r8
    335e:	4e 5f       	subi	r20, 0xFE	; 254
    3360:	5f 4f       	sbci	r21, 0xFF	; 255
    3362:	7a 01       	movw	r14, r20
		j = i; d = (f & 1) ? '0' : ' ';
    3364:	30 fc       	sbrc	r3, 0
    3366:	04 c0       	rjmp	.+8      	; 0x3370 <f_printf+0x364>
    3368:	68 94       	set
    336a:	55 24       	eor	r5, r5
    336c:	55 f8       	bld	r5, 5
    336e:	04 c0       	rjmp	.+8      	; 0x3378 <f_printf+0x36c>
    3370:	0f 2e       	mov	r0, r31
    3372:	f0 e3       	ldi	r31, 0x30	; 48
    3374:	5f 2e       	mov	r5, r31
    3376:	f0 2d       	mov	r31, r0
		if (!(f & 2)) {
    3378:	31 fc       	sbrc	r3, 1
    337a:	18 c0       	rjmp	.+48     	; 0x33ac <f_printf+0x3a0>
			while (j++ < w) putc_bfd(&pb, d);	/* Right pad */
    337c:	47 01       	movw	r8, r14
    337e:	5f ef       	ldi	r21, 0xFF	; 255
    3380:	85 1a       	sub	r8, r21
    3382:	95 0a       	sbc	r9, r21
    3384:	e0 16       	cp	r14, r16
    3386:	f1 06       	cpc	r15, r17
    3388:	90 f4       	brcc	.+36     	; 0x33ae <f_printf+0x3a2>
    338a:	57 01       	movw	r10, r14
    338c:	65 2d       	mov	r22, r5
    338e:	ce 01       	movw	r24, r28
    3390:	01 96       	adiw	r24, 0x01	; 1
    3392:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <putc_bfd>
    3396:	8f ef       	ldi	r24, 0xFF	; 255
    3398:	a8 1a       	sub	r10, r24
    339a:	b8 0a       	sbc	r11, r24
    339c:	a0 16       	cp	r10, r16
    339e:	b1 06       	cpc	r11, r17
    33a0:	a8 f3       	brcs	.-22     	; 0x338c <f_printf+0x380>
    33a2:	48 01       	movw	r8, r16
    33a4:	9f ef       	ldi	r25, 0xFF	; 255
    33a6:	89 1a       	sub	r8, r25
    33a8:	99 0a       	sbc	r9, r25
    33aa:	01 c0       	rjmp	.+2      	; 0x33ae <f_printf+0x3a2>
			d = (TCHAR)(v % r); v /= r;
			if (d > 9) d += (c == 'x') ? 0x27 : 0x07;
			str[i++] = d + '0';
		} while (v && i < sizeof str / sizeof *str);
		if (f & 8) str[i++] = '-';
		j = i; d = (f & 1) ? '0' : ' ';
    33ac:	47 01       	movw	r8, r14
    33ae:	0f 2e       	mov	r0, r31
    33b0:	f7 e4       	ldi	r31, 0x47	; 71
    33b2:	af 2e       	mov	r10, r31
    33b4:	b1 2c       	mov	r11, r1
    33b6:	f0 2d       	mov	r31, r0
    33b8:	ac 0e       	add	r10, r28
    33ba:	bd 1e       	adc	r11, r29
    33bc:	ae 0c       	add	r10, r14
    33be:	bf 1c       	adc	r11, r15
		if (!(f & 2)) {
			while (j++ < w) putc_bfd(&pb, d);	/* Right pad */
		}
		do {
			putc_bfd(&pb, str[--i]);			/* Number body */
    33c0:	a1 e0       	ldi	r26, 0x01	; 1
    33c2:	ea 1a       	sub	r14, r26
    33c4:	f1 08       	sbc	r15, r1
    33c6:	f5 01       	movw	r30, r10
    33c8:	62 91       	ld	r22, -Z
    33ca:	5f 01       	movw	r10, r30
    33cc:	ce 01       	movw	r24, r28
    33ce:	01 96       	adiw	r24, 0x01	; 1
    33d0:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <putc_bfd>
		} while (i);
    33d4:	e1 14       	cp	r14, r1
    33d6:	f1 04       	cpc	r15, r1
    33d8:	99 f7       	brne	.-26     	; 0x33c0 <f_printf+0x3b4>
		while (j++ < w) putc_bfd(&pb, d);		/* Left pad */
    33da:	80 16       	cp	r8, r16
    33dc:	91 06       	cpc	r9, r17
    33de:	08 f0       	brcs	.+2      	; 0x33e2 <f_printf+0x3d6>
    33e0:	4a ce       	rjmp	.-876    	; 0x3076 <f_printf+0x6a>
    33e2:	65 2d       	mov	r22, r5
    33e4:	ce 01       	movw	r24, r28
    33e6:	01 96       	adiw	r24, 0x01	; 1
    33e8:	0e 94 eb 16 	call	0x2dd6	; 0x2dd6 <putc_bfd>
    33ec:	ff ef       	ldi	r31, 0xFF	; 255
    33ee:	8f 1a       	sub	r8, r31
    33f0:	9f 0a       	sbc	r9, r31
    33f2:	80 16       	cp	r8, r16
    33f4:	91 06       	cpc	r9, r17
    33f6:	a8 f3       	brcs	.-22     	; 0x33e2 <f_printf+0x3d6>
    33f8:	3e ce       	rjmp	.-900    	; 0x3076 <f_printf+0x6a>
	}

	va_end(arp);

	return putc_flush(&pb);
    33fa:	ce 01       	movw	r24, r28
    33fc:	01 96       	adiw	r24, 0x01	; 1
    33fe:	0e 94 41 17 	call	0x2e82	; 0x2e82 <putc_flush>
    3402:	48 c0       	rjmp	.+144    	; 0x3494 <f_printf+0x488>
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Atgument type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {						/* Right padded */
    3404:	31 fe       	sbrs	r3, 1
    3406:	0e c0       	rjmp	.+28     	; 0x3424 <f_printf+0x418>
    3408:	f7 ce       	rjmp	.-530    	; 0x31f8 <f_printf+0x1ec>
    340a:	31 fe       	sbrs	r3, 1
    340c:	13 c0       	rjmp	.+38     	; 0x3434 <f_printf+0x428>
		d = c;
		if (IsLower(d)) d -= 0x20;
		switch (d) {				/* Atgument type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
    340e:	e1 2c       	mov	r14, r1
    3410:	f1 2c       	mov	r15, r1
    3412:	fe ce       	rjmp	.-516    	; 0x3210 <f_printf+0x204>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    3414:	32 fc       	sbrc	r3, 2
    3416:	27 cf       	rjmp	.-434    	; 0x3266 <f_printf+0x25a>
		case 'D' :					/* Signed decimal */
		case 'U' :					/* Unsigned decimal */
			r = 10; break;

		case 'X' :					/* Unsigned hexdecimal */
			r = 16; break;
    3418:	40 e1       	ldi	r20, 0x10	; 16
    341a:	4a cf       	rjmp	.-364    	; 0x32b0 <f_printf+0x2a4>
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {						/* Right padded */
				while (j++ < w) putc_bfd(&pb, ' ') ;
			}
			while (*p) putc_bfd(&pb, *p++) ;		/* String body */
    341c:	d4 01       	movw	r26, r8
    341e:	6c 91       	ld	r22, X
		switch (d) {				/* Atgument type is... */
		case 'S' :					/* String */
			p = va_arg(arp, TCHAR*);
			for (j = 0; p[j]; j++) ;
			if (!(f & 2)) {						/* Right padded */
				while (j++ < w) putc_bfd(&pb, ' ') ;
    3420:	72 01       	movw	r14, r4
    3422:	ea ce       	rjmp	.-556    	; 0x31f8 <f_printf+0x1ec>
    3424:	b2 e0       	ldi	r27, 0x02	; 2
    3426:	4b 0e       	add	r4, r27
    3428:	51 1c       	adc	r5, r1
    342a:	e0 16       	cp	r14, r16
    342c:	f1 06       	cpc	r15, r17
    342e:	08 f4       	brcc	.+2      	; 0x3432 <f_printf+0x426>
    3430:	cd ce       	rjmp	.-614    	; 0x31cc <f_printf+0x1c0>
    3432:	f4 cf       	rjmp	.-24     	; 0x341c <f_printf+0x410>
    3434:	01 15       	cp	r16, r1
    3436:	11 05       	cpc	r17, r1
    3438:	09 f0       	breq	.+2      	; 0x343c <f_printf+0x430>
    343a:	c3 ce       	rjmp	.-634    	; 0x31c2 <f_printf+0x1b6>
    343c:	ee 24       	eor	r14, r14
    343e:	e3 94       	inc	r14
    3440:	f1 2c       	mov	r15, r1
    3442:	e6 ce       	rjmp	.-564    	; 0x3210 <f_printf+0x204>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    3444:	a9 96       	adiw	r28, 0x29	; 41
    3446:	ee ad       	ldd	r30, Y+62	; 0x3e
    3448:	ff ad       	ldd	r31, Y+63	; 0x3f
    344a:	a9 97       	sbiw	r28, 0x29	; 41
    344c:	60 81       	ld	r22, Z
    344e:	71 81       	ldd	r23, Z+1	; 0x01
    3450:	82 81       	ldd	r24, Z+2	; 0x02
    3452:	93 81       	ldd	r25, Z+3	; 0x03
    3454:	34 96       	adiw	r30, 0x04	; 4
    3456:	a9 96       	adiw	r28, 0x29	; 41
    3458:	ee af       	std	Y+62, r30	; 0x3e
    345a:	ff af       	std	Y+63, r31	; 0x3f
    345c:	a9 97       	sbiw	r28, 0x29	; 41

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;

		case 'B' :					/* Unsigned binary */
			r = 2; break;
    345e:	42 e0       	ldi	r20, 0x02	; 2
    3460:	42 cf       	rjmp	.-380    	; 0x32e6 <f_printf+0x2da>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    3462:	32 fc       	sbrc	r3, 2
    3464:	ef cf       	rjmp	.-34     	; 0x3444 <f_printf+0x438>

		case 'C' :					/* Character */
			putc_bfd(&pb, (TCHAR)va_arg(arp, int)); continue;

		case 'B' :					/* Unsigned binary */
			r = 2; break;
    3466:	42 e0       	ldi	r20, 0x02	; 2
    3468:	11 cf       	rjmp	.-478    	; 0x328c <f_printf+0x280>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    346a:	a9 96       	adiw	r28, 0x29	; 41
    346c:	ee ad       	ldd	r30, Y+62	; 0x3e
    346e:	ff ad       	ldd	r31, Y+63	; 0x3f
    3470:	a9 97       	sbiw	r28, 0x29	; 41
    3472:	60 81       	ld	r22, Z
    3474:	71 81       	ldd	r23, Z+1	; 0x01
    3476:	82 81       	ldd	r24, Z+2	; 0x02
    3478:	93 81       	ldd	r25, Z+3	; 0x03
    347a:	af 01       	movw	r20, r30
    347c:	4c 5f       	subi	r20, 0xFC	; 252
    347e:	5f 4f       	sbci	r21, 0xFF	; 255
    3480:	a9 96       	adiw	r28, 0x29	; 41
    3482:	4e af       	std	Y+62, r20	; 0x3e
    3484:	5f af       	std	Y+63, r21	; 0x3f
    3486:	a9 97       	sbiw	r28, 0x29	; 41

		case 'B' :					/* Unsigned binary */
			r = 2; break;

		case 'O' :					/* Unsigned octal */
			r = 8; break;
    3488:	48 e0       	ldi	r20, 0x08	; 8
    348a:	2d cf       	rjmp	.-422    	; 0x32e6 <f_printf+0x2da>
		default:					/* Unknown type (pass-through) */
			putc_bfd(&pb, c); continue;
		}

		/* Get an argument and put it in numeral */
		v = (f & 4) ? (DWORD)va_arg(arp, long) : ((d == 'D') ? (DWORD)(long)va_arg(arp, int) : (DWORD)va_arg(arp, unsigned int));
    348c:	32 fc       	sbrc	r3, 2
    348e:	ed cf       	rjmp	.-38     	; 0x346a <f_printf+0x45e>

		case 'B' :					/* Unsigned binary */
			r = 2; break;

		case 'O' :					/* Unsigned octal */
			r = 8; break;
    3490:	48 e0       	ldi	r20, 0x08	; 8
    3492:	0e cf       	rjmp	.-484    	; 0x32b0 <f_printf+0x2a4>
	}

	va_end(arp);

	return putc_flush(&pb);
}
    3494:	c8 59       	subi	r28, 0x98	; 152
    3496:	df 4f       	sbci	r29, 0xFF	; 255
    3498:	cd bf       	out	0x3d, r28	; 61
    349a:	de bf       	out	0x3e, r29	; 62
    349c:	df 91       	pop	r29
    349e:	cf 91       	pop	r28
    34a0:	1f 91       	pop	r17
    34a2:	0f 91       	pop	r16
    34a4:	ff 90       	pop	r15
    34a6:	ef 90       	pop	r14
    34a8:	df 90       	pop	r13
    34aa:	cf 90       	pop	r12
    34ac:	bf 90       	pop	r11
    34ae:	af 90       	pop	r10
    34b0:	9f 90       	pop	r9
    34b2:	8f 90       	pop	r8
    34b4:	7f 90       	pop	r7
    34b6:	6f 90       	pop	r6
    34b8:	5f 90       	pop	r5
    34ba:	4f 90       	pop	r4
    34bc:	3f 90       	pop	r3
    34be:	2f 90       	pop	r2
    34c0:	08 95       	ret

000034c2 <main>:
*/



int main(void)
{
    34c2:	2f 92       	push	r2
    34c4:	3f 92       	push	r3
    34c6:	4f 92       	push	r4
    34c8:	5f 92       	push	r5
    34ca:	6f 92       	push	r6
    34cc:	7f 92       	push	r7
    34ce:	8f 92       	push	r8
    34d0:	9f 92       	push	r9
    34d2:	af 92       	push	r10
    34d4:	bf 92       	push	r11
    34d6:	cf 92       	push	r12
    34d8:	df 92       	push	r13
    34da:	ef 92       	push	r14
    34dc:	ff 92       	push	r15
    34de:	0f 93       	push	r16
    34e0:	1f 93       	push	r17
    34e2:	cf 93       	push	r28
    34e4:	df 93       	push	r29
    34e6:	00 d0       	rcall	.+0      	; 0x34e8 <main+0x26>
    34e8:	1f 92       	push	r1
    34ea:	cd b7       	in	r28, 0x3d	; 61
    34ec:	de b7       	in	r29, 0x3e	; 62
	set_32MHz_clk();
    34ee:	0e 94 e3 20 	call	0x41c6	; 0x41c6 <set_32MHz_clk>
	setup_ADS_dry_interrupt();
    34f2:	0e 94 17 05 	call	0xa2e	; 0xa2e <setup_ADS_dry_interrupt>
		
	ADSspi_init();
    34f6:	0e 94 6d 01 	call	0x2da	; 0x2da <ADSspi_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    34fa:	2f ef       	ldi	r18, 0xFF	; 255
    34fc:	83 e2       	ldi	r24, 0x23	; 35
    34fe:	94 ef       	ldi	r25, 0xF4	; 244
    3500:	21 50       	subi	r18, 0x01	; 1
    3502:	80 40       	sbci	r24, 0x00	; 0
    3504:	90 40       	sbci	r25, 0x00	; 0
    3506:	e1 f7       	brne	.-8      	; 0x3500 <main+0x3e>
    3508:	00 c0       	rjmp	.+0      	; 0x350a <main+0x48>
    350a:	00 00       	nop
	_delay_ms(2500);
	adsReset();
    350c:	0e 94 c8 01 	call	0x390	; 0x390 <adsReset>
    3510:	af ef       	ldi	r26, 0xFF	; 255
    3512:	b3 ed       	ldi	r27, 0xD3	; 211
    3514:	20 e3       	ldi	r18, 0x30	; 48
    3516:	a1 50       	subi	r26, 0x01	; 1
    3518:	b0 40       	sbci	r27, 0x00	; 0
    351a:	20 40       	sbci	r18, 0x00	; 0
    351c:	e1 f7       	brne	.-8      	; 0x3516 <main+0x54>
    351e:	00 c0       	rjmp	.+0      	; 0x3520 <main+0x5e>
    3520:	00 00       	nop
	_delay_ms(500);
	
	uart_serial_init();
    3522:	0e 94 ef 20 	call	0x41de	; 0x41de <uart_serial_init>
	uart_bluetooth_init();
    3526:	0e 94 1b 21 	call	0x4236	; 0x4236 <uart_bluetooth_init>
	SD_clear    ();
    352a:	0e 94 82 04 	call	0x904	; 0x904 <SD_clear>

	
	PMIC.CTRL |= PMIC_LOLVLEX_bm;		//enable low interrupt and global interrupt
    352e:	e0 ea       	ldi	r30, 0xA0	; 160
    3530:	f0 e0       	ldi	r31, 0x00	; 0
    3532:	82 81       	ldd	r24, Z+2	; 0x02
    3534:	81 60       	ori	r24, 0x01	; 1
    3536:	82 83       	std	Z+2, r24	; 0x02
	sei();								//Enable interrupt
    3538:	78 94       	sei
	
	app_state = IDLE;
    353a:	10 92 3f 43 	sts	0x433F, r1	; 0x80433f <app_state>
    353e:	10 92 40 43 	sts	0x4340, r1	; 0x804340 <app_state+0x1>
	bool in_idle_state = true;
	sd_error = false;
    3542:	10 92 e5 45 	sts	0x45E5, r1	; 0x8045e5 <sd_error>
	uint8_t ret;
	
	drdy_count=0;
    3546:	10 92 e4 40 	sts	0x40E4, r1	; 0x8040e4 <drdy_count>
    354a:	10 92 e5 40 	sts	0x40E5, r1	; 0x8040e5 <drdy_count+0x1>
    354e:	10 92 e6 40 	sts	0x40E6, r1	; 0x8040e6 <drdy_count+0x2>
    3552:	10 92 e7 40 	sts	0x40E7, r1	; 0x8040e7 <drdy_count+0x3>
	sd_samples = 0;
    3556:	10 92 19 43 	sts	0x4319, r1	; 0x804319 <sd_samples>
    355a:	10 92 1a 43 	sts	0x431A, r1	; 0x80431a <sd_samples+0x1>
    355e:	10 92 1b 43 	sts	0x431B, r1	; 0x80431b <sd_samples+0x2>
    3562:	10 92 1c 43 	sts	0x431C, r1	; 0x80431c <sd_samples+0x3>
	bl_samples = 0;
    3566:	10 92 42 43 	sts	0x4342, r1	; 0x804342 <bl_samples>
    356a:	10 92 43 43 	sts	0x4343, r1	; 0x804343 <bl_samples+0x1>
    356e:	10 92 44 43 	sts	0x4344, r1	; 0x804344 <bl_samples+0x2>
    3572:	10 92 45 43 	sts	0x4345, r1	; 0x804345 <bl_samples+0x3>
	sd_buff_miss = 0;
    3576:	10 92 9b 45 	sts	0x459B, r1	; 0x80459b <sd_buff_miss>
    357a:	10 92 9c 45 	sts	0x459C, r1	; 0x80459c <sd_buff_miss+0x1>
    357e:	10 92 9d 45 	sts	0x459D, r1	; 0x80459d <sd_buff_miss+0x2>
    3582:	10 92 9e 45 	sts	0x459E, r1	; 0x80459e <sd_buff_miss+0x3>
	bl_buff_miss = 0;
    3586:	10 92 6b 45 	sts	0x456B, r1	; 0x80456b <bl_buff_miss>
    358a:	10 92 6c 45 	sts	0x456C, r1	; 0x80456c <bl_buff_miss+0x1>
    358e:	10 92 6d 45 	sts	0x456D, r1	; 0x80456d <bl_buff_miss+0x2>
    3592:	10 92 6e 45 	sts	0x456E, r1	; 0x80456e <bl_buff_miss+0x3>
	
	leadoff_enable = false;
    3596:	10 92 48 43 	sts	0x4348, r1	; 0x804348 <leadoff_enable>
	leadoff_disable = false;
    359a:	10 92 22 43 	sts	0x4322, r1	; 0x804322 <leadoff_disable>
	imp_enable = false;
    359e:	10 92 e3 40 	sts	0x40E3, r1	; 0x8040e3 <imp_enable>
	imp_disable = false;
    35a2:	10 92 9a 45 	sts	0x459A, r1	; 0x80459a <imp_disable>
	
	//drdy_count = sizeof(int);
	
	drdy_samples = 0;
    35a6:	10 92 1d 43 	sts	0x431D, r1	; 0x80431d <drdy_samples>
    35aa:	10 92 1e 43 	sts	0x431E, r1	; 0x80431e <drdy_samples+0x1>
    35ae:	10 92 1f 43 	sts	0x431F, r1	; 0x80431f <drdy_samples+0x2>
    35b2:	10 92 20 43 	sts	0x4320, r1	; 0x804320 <drdy_samples+0x3>
	samples_got = 0;
    35b6:	10 92 3b 43 	sts	0x433B, r1	; 0x80433b <samples_got>
    35ba:	10 92 3c 43 	sts	0x433C, r1	; 0x80433c <samples_got+0x1>
    35be:	10 92 3d 43 	sts	0x433D, r1	; 0x80433d <samples_got+0x2>
    35c2:	10 92 3e 43 	sts	0x433E, r1	; 0x80433e <samples_got+0x3>
	double th = 8192;
    35c6:	80 e0       	ldi	r24, 0x00	; 0
    35c8:	90 e0       	ldi	r25, 0x00	; 0
    35ca:	a0 e0       	ldi	r26, 0x00	; 0
    35cc:	b6 e4       	ldi	r27, 0x46	; 70
    35ce:	89 83       	std	Y+1, r24	; 0x01
    35d0:	9a 83       	std	Y+2, r25	; 0x02
    35d2:	ab 83       	std	Y+3, r26	; 0x03
    35d4:	bc 83       	std	Y+4, r27	; 0x04
	
	PMIC.CTRL |= PMIC_LOLVLEX_bm;		//enable low interrupt and global interrupt
	sei();								//Enable interrupt
	
	app_state = IDLE;
	bool in_idle_state = true;
    35d6:	55 24       	eor	r5, r5
    35d8:	53 94       	inc	r5
				}
				
				if (imp_disable)
				{
					imp_disable = false;
					app_state = IMP_DISABLE;
    35da:	0f 2e       	mov	r0, r31
    35dc:	fc e0       	ldi	r31, 0x0C	; 12
    35de:	6f 2e       	mov	r6, r31
    35e0:	71 2c       	mov	r7, r1
    35e2:	f0 2d       	mov	r31, r0
				app_state = CRM_READ;
				
				if (leadoff_enable)
				{
					leadoff_enable  = false;
					app_state = LEAD_OFF_SETUP;
    35e4:	0f 2e       	mov	r0, r31
    35e6:	f7 e0       	ldi	r31, 0x07	; 7
    35e8:	2f 2e       	mov	r2, r31
    35ea:	31 2c       	mov	r3, r1
    35ec:	f0 2d       	mov	r31, r0
				//uart_send_char_BT('\r');
				
				break;
				
			case CRM_READ_new:
				app_state = SD_SYNQ;
    35ee:	0f 2e       	mov	r0, r31
    35f0:	f9 e0       	ldi	r31, 0x09	; 9
    35f2:	cf 2e       	mov	r12, r31
    35f4:	d1 2c       	mov	r13, r1
    35f6:	f0 2d       	mov	r31, r0
				{
					//TCHAR* data = &SD_DataBUFF[SD_databuff_tail][0];
					//f_printf(&Fil, data);
					//f_printf(&Fil,  &SD_DataBUFF[SD_databuff_tail]);
					
					if (f_printf(&Fil, &SD_DataBUFF[SD_databuff_tail]) == EOF)
    35f8:	0f 2e       	mov	r0, r31
    35fa:	f4 e6       	ldi	r31, 0x64	; 100
    35fc:	4f 2e       	mov	r4, r31
    35fe:	f0 2d       	mov	r31, r0
					{
						//uart_send_serial_str("SD\n\r");
						sd_error = true;
						f_close(&Fil);
						app_state = CRM_SD_MOUNT;
    3600:	03 e0       	ldi	r16, 0x03	; 3
    3602:	10 e0       	ldi	r17, 0x00	; 0
				in_idle_state = false;
				app_state = CRM_READ;
				break;
				
			case CRM_READ:
				app_state = CRM_READ_new;
    3604:	0f 2e       	mov	r0, r31
    3606:	f6 e0       	ldi	r31, 0x06	; 6
    3608:	ef 2e       	mov	r14, r31
    360a:	f1 2c       	mov	r15, r1
    360c:	f0 2d       	mov	r31, r0
					return;			//can't create file
					//_delay_ms    (500);
					//app_state = CRM_SD_FILE_OPEN;
					break;
				}
				app_state = CRM_START_READ;
    360e:	0f 2e       	mov	r0, r31
    3610:	f5 e0       	ldi	r31, 0x05	; 5
    3612:	af 2e       	mov	r10, r31
    3614:	b1 2c       	mov	r11, r1
    3616:	f0 2d       	mov	r31, r0
					return;			//device not found
					//_delay_ms    (500);
					//app_state = CRM_SD_MOUNT;
					break;
				}
				app_state = CRM_SD_FILE_OPEN;
    3618:	68 94       	set
    361a:	88 24       	eor	r8, r8
    361c:	82 f8       	bld	r8, 2
    361e:	91 2c       	mov	r9, r1

	while(1)
	{
		//adsGetData    ();
		//process uart command
		if (new_bl_cmd_flg)
    3620:	80 91 e2 27 	lds	r24, 0x27E2	; 0x8027e2 <new_bl_cmd_flg>
    3624:	88 23       	and	r24, r24
    3626:	21 f0       	breq	.+8      	; 0x3630 <main+0x16e>
		{
			new_bl_cmd_flg = false;
    3628:	10 92 e2 27 	sts	0x27E2, r1	; 0x8027e2 <new_bl_cmd_flg>
			process_bl_command    ();
    362c:	0e 94 a7 04 	call	0x94e	; 0x94e <process_bl_command>
		}
	
		switch (app_state)
    3630:	e0 91 3f 43 	lds	r30, 0x433F	; 0x80433f <app_state>
    3634:	f0 91 40 43 	lds	r31, 0x4340	; 0x804340 <app_state+0x1>
    3638:	ed 30       	cpi	r30, 0x0D	; 13
    363a:	f1 05       	cpc	r31, r1
    363c:	08 f0       	brcs	.+2      	; 0x3640 <main+0x17e>
    363e:	ae c1       	rjmp	.+860    	; 0x399c <main+0x4da>
    3640:	88 27       	eor	r24, r24
    3642:	eb 5e       	subi	r30, 0xEB	; 235
    3644:	fe 4f       	sbci	r31, 0xFE	; 254
    3646:	8f 4f       	sbci	r24, 0xFF	; 255
    3648:	0c 94 74 23 	jmp	0x46e8	; 0x46e8 <__tablejump2__>
		{
			case CRM_SETUP:
			
				setup_ADS_dry_interrupt();
    364c:	0e 94 17 05 	call	0xa2e	; 0xa2e <setup_ADS_dry_interrupt>
				
				adsWakeup();
    3650:	0e 94 96 01 	call	0x32c	; 0x32c <adsWakeup>
    3654:	9f ef       	ldi	r25, 0xFF	; 255
    3656:	a3 ec       	ldi	r26, 0xC3	; 195
    3658:	b9 e0       	ldi	r27, 0x09	; 9
    365a:	91 50       	subi	r25, 0x01	; 1
    365c:	a0 40       	sbci	r26, 0x00	; 0
    365e:	b0 40       	sbci	r27, 0x00	; 0
    3660:	e1 f7       	brne	.-8      	; 0x365a <main+0x198>
    3662:	00 c0       	rjmp	.+0      	; 0x3664 <main+0x1a2>
    3664:	00 00       	nop
				_delay_ms    (100);
			
				deviceid = adsGetDeviceID();
    3666:	0e 94 29 02 	call	0x452	; 0x452 <adsGetDeviceID>
    366a:	80 93 e0 20 	sts	0x20E0, r24	; 0x8020e0 <deviceid>
				//adsRREG(0x00, 24, reg_vals);	
				
						
				//change configurations
				adsWREG(ADS1299_REGADDR_CONFIG1, 0b11010110);//0b11010110/
    366e:	66 ed       	ldi	r22, 0xD6	; 214
    3670:	81 e0       	ldi	r24, 0x01	; 1
    3672:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_CONFIG2, 0b11010001);//0b11010001
    3676:	61 ed       	ldi	r22, 0xD1	; 209
    3678:	82 e0       	ldi	r24, 0x02	; 2
    367a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_CONFIG3, 0b11100000);//0b11101000
    367e:	60 ee       	ldi	r22, 0xE0	; 224
    3680:	83 e0       	ldi	r24, 0x03	; 3
    3682:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
					
				adsWREG(ADS1299_REGADDR_CH1SET, 0b10010101);
    3686:	65 e9       	ldi	r22, 0x95	; 149
    3688:	85 e0       	ldi	r24, 0x05	; 5
    368a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_CH2SET, 0b10000101);
    368e:	65 e8       	ldi	r22, 0x85	; 133
    3690:	86 e0       	ldi	r24, 0x06	; 6
    3692:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_CH3SET, 0b10000001);
    3696:	61 e8       	ldi	r22, 0x81	; 129
    3698:	87 e0       	ldi	r24, 0x07	; 7
    369a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_CH4SET, 0b10010101);
    369e:	65 e9       	ldi	r22, 0x95	; 149
    36a0:	88 e0       	ldi	r24, 0x08	; 8
    36a2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_CH5SET, 0b10000001);
    36a6:	61 e8       	ldi	r22, 0x81	; 129
    36a8:	89 e0       	ldi	r24, 0x09	; 9
    36aa:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_CH6SET, 0b00010101);
    36ae:	65 e1       	ldi	r22, 0x15	; 21
    36b0:	8a e0       	ldi	r24, 0x0A	; 10
    36b2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_CH7SET, 0b10010101);
    36b6:	65 e9       	ldi	r22, 0x95	; 149
    36b8:	8b e0       	ldi	r24, 0x0B	; 11
    36ba:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_CH8SET, 0b10010101);
    36be:	65 e9       	ldi	r22, 0x95	; 149
    36c0:	8c e0       	ldi	r24, 0x0C	; 12
    36c2:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
/*				
				adsWREG(ADS1299_REGADDR_LOFF,		0b00000000);
				adsWREG(ADS1299_REGADDR_LOFF_SENSP, 0b01100000);
				adsWREG(ADS1299_REGADDR_CONFIG4,	0b00000010);
*/							
				SPI_send_SD_str    ("\n  \n\0");  // add a space before every write segments
    36c6:	8f e1       	ldi	r24, 0x1F	; 31
    36c8:	90 e2       	ldi	r25, 0x20	; 32
    36ca:	0e 94 59 04 	call	0x8b2	; 0x8b2 <SPI_send_SD_str>
				app_state = CRM_SD_MOUNT;
    36ce:	00 93 3f 43 	sts	0x433F, r16	; 0x80433f <app_state>
    36d2:	10 93 40 43 	sts	0x4340, r17	; 0x804340 <app_state+0x1>
				break;
    36d6:	a4 cf       	rjmp	.-184    	; 0x3620 <main+0x15e>
			
			case LEAD_OFF_SETUP :
				uart_send_serial_str("ls\n\r");
    36d8:	8b e7       	ldi	r24, 0x7B	; 123
    36da:	90 e2       	ldi	r25, 0x20	; 32
    36dc:	0e 94 5e 21 	call	0x42bc	; 0x42bc <uart_send_serial_str>
				adsWREG(ADS1299_REGADDR_LOFF,		0b10000000);
    36e0:	60 e8       	ldi	r22, 0x80	; 128
    36e2:	84 e0       	ldi	r24, 0x04	; 4
    36e4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_LOFF_SENSP, 0b11111111);
    36e8:	6f ef       	ldi	r22, 0xFF	; 255
    36ea:	8f e0       	ldi	r24, 0x0F	; 15
    36ec:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_CONFIG4,	0b00000010);
    36f0:	62 e0       	ldi	r22, 0x02	; 2
    36f2:	87 e1       	ldi	r24, 0x17	; 23
    36f4:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				app_state = CRM_READ;
    36f8:	82 e0       	ldi	r24, 0x02	; 2
    36fa:	90 e0       	ldi	r25, 0x00	; 0
    36fc:	80 93 3f 43 	sts	0x433F, r24	; 0x80433f <app_state>
    3700:	90 93 40 43 	sts	0x4340, r25	; 0x804340 <app_state+0x1>
				break;
    3704:	8d cf       	rjmp	.-230    	; 0x3620 <main+0x15e>
				
			case LEAD_OFF_DISABLE :
				uart_send_serial_str("ld\n\r");
    3706:	80 e8       	ldi	r24, 0x80	; 128
    3708:	90 e2       	ldi	r25, 0x20	; 32
    370a:	0e 94 5e 21 	call	0x42bc	; 0x42bc <uart_send_serial_str>
				adsWREG(ADS1299_REGADDR_LOFF,		0b00000000);
    370e:	60 e0       	ldi	r22, 0x00	; 0
    3710:	84 e0       	ldi	r24, 0x04	; 4
    3712:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_LOFF_SENSP, 0b00000000);
    3716:	60 e0       	ldi	r22, 0x00	; 0
    3718:	8f e0       	ldi	r24, 0x0F	; 15
    371a:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_CONFIG4,	0b00000000);
    371e:	60 e0       	ldi	r22, 0x00	; 0
    3720:	87 e1       	ldi	r24, 0x17	; 23
    3722:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				app_state = CRM_READ;
    3726:	a2 e0       	ldi	r26, 0x02	; 2
    3728:	b0 e0       	ldi	r27, 0x00	; 0
    372a:	a0 93 3f 43 	sts	0x433F, r26	; 0x80433f <app_state>
    372e:	b0 93 40 43 	sts	0x4340, r27	; 0x804340 <app_state+0x1>
				break;
    3732:	76 cf       	rjmp	.-276    	; 0x3620 <main+0x15e>
				
			case IMP_SETUP :
				uart_send_serial_str("is\n\r");
    3734:	85 e8       	ldi	r24, 0x85	; 133
    3736:	90 e2       	ldi	r25, 0x20	; 32
    3738:	0e 94 5e 21 	call	0x42bc	; 0x42bc <uart_send_serial_str>
				adsWREG(ADS1299_REGADDR_LOFF,		0b00000001);
    373c:	61 e0       	ldi	r22, 0x01	; 1
    373e:	84 e0       	ldi	r24, 0x04	; 4
    3740:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_LOFF_SENSP, 0b00100000);
    3744:	60 e2       	ldi	r22, 0x20	; 32
    3746:	8f e0       	ldi	r24, 0x0F	; 15
    3748:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_CONFIG4,	0b00000010);
    374c:	62 e0       	ldi	r22, 0x02	; 2
    374e:	87 e1       	ldi	r24, 0x17	; 23
    3750:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				app_state = CRM_READ;
    3754:	82 e0       	ldi	r24, 0x02	; 2
    3756:	90 e0       	ldi	r25, 0x00	; 0
    3758:	80 93 3f 43 	sts	0x433F, r24	; 0x80433f <app_state>
    375c:	90 93 40 43 	sts	0x4340, r25	; 0x804340 <app_state+0x1>
				break;
    3760:	5f cf       	rjmp	.-322    	; 0x3620 <main+0x15e>
							
			case IMP_DISABLE :
				uart_send_serial_str("id\n\r");
    3762:	8a e8       	ldi	r24, 0x8A	; 138
    3764:	90 e2       	ldi	r25, 0x20	; 32
    3766:	0e 94 5e 21 	call	0x42bc	; 0x42bc <uart_send_serial_str>
				adsWREG(ADS1299_REGADDR_LOFF,		0b00000000);
    376a:	60 e0       	ldi	r22, 0x00	; 0
    376c:	84 e0       	ldi	r24, 0x04	; 4
    376e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_LOFF_SENSP, 0b00000000);
    3772:	60 e0       	ldi	r22, 0x00	; 0
    3774:	8f e0       	ldi	r24, 0x0F	; 15
    3776:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				adsWREG(ADS1299_REGADDR_CONFIG4,	0b00000000);
    377a:	60 e0       	ldi	r22, 0x00	; 0
    377c:	87 e1       	ldi	r24, 0x17	; 23
    377e:	0e 94 60 02 	call	0x4c0	; 0x4c0 <adsWREG>
				app_state = CRM_READ;
    3782:	a2 e0       	ldi	r26, 0x02	; 2
    3784:	b0 e0       	ldi	r27, 0x00	; 0
    3786:	a0 93 3f 43 	sts	0x433F, r26	; 0x80433f <app_state>
    378a:	b0 93 40 43 	sts	0x4340, r27	; 0x804340 <app_state+0x1>
				break;
    378e:	48 cf       	rjmp	.-368    	; 0x3620 <main+0x15e>
				
				
			case CRM_SD_MOUNT :
				if ( (ret = f_mount(&FatFs, "", 1)) != FR_OK ) {
    3790:	41 e0       	ldi	r20, 0x01	; 1
    3792:	62 e4       	ldi	r22, 0x42	; 66
    3794:	70 e2       	ldi	r23, 0x20	; 32
    3796:	88 ee       	ldi	r24, 0xE8	; 232
    3798:	90 e4       	ldi	r25, 0x40	; 64
    379a:	0e 94 0c 13 	call	0x2618	; 0x2618 <f_mount>
    379e:	88 23       	and	r24, r24
    37a0:	79 f0       	breq	.+30     	; 0x37c0 <main+0x2fe>
    37a2:	38 2e       	mov	r3, r24
					uart_send_serial_str("device not found - ");
    37a4:	8f e8       	ldi	r24, 0x8F	; 143
    37a6:	90 e2       	ldi	r25, 0x20	; 32
    37a8:	0e 94 5e 21 	call	0x42bc	; 0x42bc <uart_send_serial_str>
					uart_send_serial_str('9' + ret);
    37ac:	83 2d       	mov	r24, r3
    37ae:	90 e0       	ldi	r25, 0x00	; 0
    37b0:	c9 96       	adiw	r24, 0x39	; 57
    37b2:	0e 94 5e 21 	call	0x42bc	; 0x42bc <uart_send_serial_str>
					uart_send_serial_str("\n\r");
    37b6:	8c e8       	ldi	r24, 0x8C	; 140
    37b8:	90 e2       	ldi	r25, 0x20	; 32
    37ba:	0e 94 5e 21 	call	0x42bc	; 0x42bc <uart_send_serial_str>
					return;			//device not found
    37be:	f7 c0       	rjmp	.+494    	; 0x39ae <main+0x4ec>
					//_delay_ms    (500);
					//app_state = CRM_SD_MOUNT;
					break;
				}
				app_state = CRM_SD_FILE_OPEN;
    37c0:	80 92 3f 43 	sts	0x433F, r8	; 0x80433f <app_state>
    37c4:	90 92 40 43 	sts	0x4340, r9	; 0x804340 <app_state+0x1>
				break; 
    37c8:	2b cf       	rjmp	.-426    	; 0x3620 <main+0x15e>
				
			case CRM_SD_FILE_OPEN :
				if ((ret = f_open(&Fil, "demo.txt",  FA_WRITE|FA_OPEN_APPEND)) != FR_OK) {
    37ca:	42 e3       	ldi	r20, 0x32	; 50
    37cc:	65 e2       	ldi	r22, 0x25	; 37
    37ce:	70 e2       	ldi	r23, 0x20	; 32
    37d0:	89 e4       	ldi	r24, 0x49	; 73
    37d2:	93 e4       	ldi	r25, 0x43	; 67
    37d4:	0e 94 4e 13 	call	0x269c	; 0x269c <f_open>
    37d8:	88 23       	and	r24, r24
    37da:	29 f0       	breq	.+10     	; 0x37e6 <main+0x324>
					uart_send_serial_str("can't create file\n\r");
    37dc:	83 ea       	ldi	r24, 0xA3	; 163
    37de:	90 e2       	ldi	r25, 0x20	; 32
    37e0:	0e 94 5e 21 	call	0x42bc	; 0x42bc <uart_send_serial_str>
					return;			//can't create file
    37e4:	e4 c0       	rjmp	.+456    	; 0x39ae <main+0x4ec>
					//_delay_ms    (500);
					//app_state = CRM_SD_FILE_OPEN;
					break;
				}
				app_state = CRM_START_READ;
    37e6:	a0 92 3f 43 	sts	0x433F, r10	; 0x80433f <app_state>
    37ea:	b0 92 40 43 	sts	0x4340, r11	; 0x804340 <app_state+0x1>
				if (sd_error)
    37ee:	80 91 e5 45 	lds	r24, 0x45E5	; 0x8045e5 <sd_error>
    37f2:	88 23       	and	r24, r24
    37f4:	09 f4       	brne	.+2      	; 0x37f8 <main+0x336>
    37f6:	14 cf       	rjmp	.-472    	; 0x3620 <main+0x15e>
				{
					sd_error = false;
    37f8:	10 92 e5 45 	sts	0x45E5, r1	; 0x8045e5 <sd_error>
					app_state = CRM_READ;
    37fc:	82 e0       	ldi	r24, 0x02	; 2
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	80 93 3f 43 	sts	0x433F, r24	; 0x80433f <app_state>
    3804:	90 93 40 43 	sts	0x4340, r25	; 0x804340 <app_state+0x1>
    3808:	0b cf       	rjmp	.-490    	; 0x3620 <main+0x15e>
				}
				//SPI_send_SD_str    ("\n  \n\0");//takes too much time - buffer overflow
				break;
				
			case CRM_START_READ :
				uart_send_serial_str("CR mode\n\r");
    380a:	87 eb       	ldi	r24, 0xB7	; 183
    380c:	90 e2       	ldi	r25, 0x20	; 32
    380e:	0e 94 5e 21 	call	0x42bc	; 0x42bc <uart_send_serial_str>
				adsRDATAC();//turn read data continuous back on in case if not already turned on
    3812:	0e 94 12 02 	call	0x424	; 0x424 <adsRDATAC>
				//adsRREG(0x00, 24, reg_vals);
				adsStart();
    3816:	0e 94 e4 01 	call	0x3c8	; 0x3c8 <adsStart>
				in_idle_state = false;
				app_state = CRM_READ;
    381a:	a2 e0       	ldi	r26, 0x02	; 2
    381c:	b0 e0       	ldi	r27, 0x00	; 0
    381e:	a0 93 3f 43 	sts	0x433F, r26	; 0x80433f <app_state>
    3822:	b0 93 40 43 	sts	0x4340, r27	; 0x804340 <app_state+0x1>
			case CRM_START_READ :
				uart_send_serial_str("CR mode\n\r");
				adsRDATAC();//turn read data continuous back on in case if not already turned on
				//adsRREG(0x00, 24, reg_vals);
				adsStart();
				in_idle_state = false;
    3826:	51 2c       	mov	r5, r1
				app_state = CRM_READ;
				break;
    3828:	fb ce       	rjmp	.-522    	; 0x3620 <main+0x15e>
				
			case CRM_READ:
				app_state = CRM_READ_new;
    382a:	e0 92 3f 43 	sts	0x433F, r14	; 0x80433f <app_state>
    382e:	f0 92 40 43 	sts	0x4340, r15	; 0x804340 <app_state+0x1>
				//uart_send_serial_sample();
				//SPI_send_SD_sample();//wont work
				uart_send_BT_sample();
    3832:	0e 94 1f 04 	call	0x83e	; 0x83e <uart_send_BT_sample>
*/			
				//uart_send_char_BT('b');
				//uart_send_char_BT('\n');
				//uart_send_char_BT('\r');
				
				break;
    3836:	f4 ce       	rjmp	.-536    	; 0x3620 <main+0x15e>
				
			case CRM_READ_new:
				app_state = SD_SYNQ;
    3838:	c0 92 3f 43 	sts	0x433F, r12	; 0x80433f <app_state>
    383c:	d0 92 40 43 	sts	0x4340, r13	; 0x804340 <app_state+0x1>
				//uart_send_BT_sample();
				
				if (SD_databuff_head != SD_databuff_tail)
    3840:	20 91 39 43 	lds	r18, 0x4339	; 0x804339 <SD_databuff_head>
    3844:	30 91 3a 43 	lds	r19, 0x433A	; 0x80433a <SD_databuff_head+0x1>
    3848:	80 91 37 43 	lds	r24, 0x4337	; 0x804337 <SD_databuff_tail>
    384c:	90 91 38 43 	lds	r25, 0x4338	; 0x804338 <SD_databuff_tail+0x1>
    3850:	28 17       	cp	r18, r24
    3852:	39 07       	cpc	r19, r25
    3854:	81 f1       	breq	.+96     	; 0x38b6 <main+0x3f4>
				{
					//TCHAR* data = &SD_DataBUFF[SD_databuff_tail][0];
					//f_printf(&Fil, data);
					//f_printf(&Fil,  &SD_DataBUFF[SD_databuff_tail]);
					
					if (f_printf(&Fil, &SD_DataBUFF[SD_databuff_tail]) == EOF)
    3856:	20 91 37 43 	lds	r18, 0x4337	; 0x804337 <SD_databuff_tail>
    385a:	30 91 38 43 	lds	r19, 0x4338	; 0x804338 <SD_databuff_tail+0x1>
    385e:	42 9e       	mul	r4, r18
    3860:	c0 01       	movw	r24, r0
    3862:	43 9e       	mul	r4, r19
    3864:	90 0d       	add	r25, r0
    3866:	11 24       	eor	r1, r1
    3868:	8d 51       	subi	r24, 0x1D	; 29
    386a:	98 4d       	sbci	r25, 0xD8	; 216
    386c:	9f 93       	push	r25
    386e:	8f 93       	push	r24
    3870:	89 e4       	ldi	r24, 0x49	; 73
    3872:	93 e4       	ldi	r25, 0x43	; 67
    3874:	9f 93       	push	r25
    3876:	8f 93       	push	r24
    3878:	0e 94 06 18 	call	0x300c	; 0x300c <f_printf>
    387c:	0f 90       	pop	r0
    387e:	0f 90       	pop	r0
    3880:	0f 90       	pop	r0
    3882:	0f 90       	pop	r0
    3884:	01 96       	adiw	r24, 0x01	; 1
    3886:	61 f4       	brne	.+24     	; 0x38a0 <main+0x3de>
					{
						//uart_send_serial_str("SD\n\r");
						sd_error = true;
    3888:	81 e0       	ldi	r24, 0x01	; 1
    388a:	80 93 e5 45 	sts	0x45E5, r24	; 0x8045e5 <sd_error>
						f_close(&Fil);
    388e:	89 e4       	ldi	r24, 0x49	; 73
    3890:	93 e4       	ldi	r25, 0x43	; 67
    3892:	0e 94 e7 17 	call	0x2fce	; 0x2fce <f_close>
						app_state = CRM_SD_MOUNT;
    3896:	00 93 3f 43 	sts	0x433F, r16	; 0x80433f <app_state>
    389a:	10 93 40 43 	sts	0x4340, r17	; 0x804340 <app_state+0x1>
						break;
    389e:	c0 ce       	rjmp	.-640    	; 0x3620 <main+0x15e>
					}
					
					SD_databuff_tail = (SD_databuff_tail + 1) & SD_DATABUFF_MASK;
    38a0:	80 91 37 43 	lds	r24, 0x4337	; 0x804337 <SD_databuff_tail>
    38a4:	90 91 38 43 	lds	r25, 0x4338	; 0x804338 <SD_databuff_tail+0x1>
    38a8:	01 96       	adiw	r24, 0x01	; 1
    38aa:	8f 73       	andi	r24, 0x3F	; 63
    38ac:	99 27       	eor	r25, r25
    38ae:	80 93 37 43 	sts	0x4337, r24	; 0x804337 <SD_databuff_tail>
    38b2:	90 93 38 43 	sts	0x4338, r25	; 0x804338 <SD_databuff_tail+0x1>
				}
				
				//app_state = CRM_READ;
				if (samples_got >= th)
    38b6:	20 91 3b 43 	lds	r18, 0x433B	; 0x80433b <samples_got>
    38ba:	30 91 3c 43 	lds	r19, 0x433C	; 0x80433c <samples_got+0x1>
    38be:	40 91 3d 43 	lds	r20, 0x433D	; 0x80433d <samples_got+0x2>
    38c2:	50 91 3e 43 	lds	r21, 0x433E	; 0x80433e <samples_got+0x3>
    38c6:	69 81       	ldd	r22, Y+1	; 0x01
    38c8:	7a 81       	ldd	r23, Y+2	; 0x02
    38ca:	8b 81       	ldd	r24, Y+3	; 0x03
    38cc:	9c 81       	ldd	r25, Y+4	; 0x04
    38ce:	0e 94 d8 22 	call	0x45b0	; 0x45b0 <__cmpsf2>
    38d2:	18 16       	cp	r1, r24
    38d4:	0c f4       	brge	.+2      	; 0x38d8 <main+0x416>
    38d6:	a4 ce       	rjmp	.-696    	; 0x3620 <main+0x15e>
				{
					th += 8192;
    38d8:	20 e0       	ldi	r18, 0x00	; 0
    38da:	30 e0       	ldi	r19, 0x00	; 0
    38dc:	40 e0       	ldi	r20, 0x00	; 0
    38de:	56 e4       	ldi	r21, 0x46	; 70
    38e0:	69 81       	ldd	r22, Y+1	; 0x01
    38e2:	7a 81       	ldd	r23, Y+2	; 0x02
    38e4:	8b 81       	ldd	r24, Y+3	; 0x03
    38e6:	9c 81       	ldd	r25, Y+4	; 0x04
    38e8:	0e 94 6c 22 	call	0x44d8	; 0x44d8 <__addsf3>
    38ec:	69 83       	std	Y+1, r22	; 0x01
    38ee:	7a 83       	std	Y+2, r23	; 0x02
    38f0:	8b 83       	std	Y+3, r24	; 0x03
    38f2:	9c 83       	std	Y+4, r25	; 0x04
					f_sync(&Fil);
    38f4:	89 e4       	ldi	r24, 0x49	; 73
    38f6:	93 e4       	ldi	r25, 0x43	; 67
    38f8:	0e 94 75 17 	call	0x2eea	; 0x2eea <f_sync>
    38fc:	91 ce       	rjmp	.-734    	; 0x3620 <main+0x15e>
				}
				
				break;
				
			case SD_SYNQ:
				app_state = CRM_READ;
    38fe:	82 e0       	ldi	r24, 0x02	; 2
    3900:	90 e0       	ldi	r25, 0x00	; 0
    3902:	80 93 3f 43 	sts	0x433F, r24	; 0x80433f <app_state>
    3906:	90 93 40 43 	sts	0x4340, r25	; 0x804340 <app_state+0x1>
				
				if (leadoff_enable)
    390a:	80 91 48 43 	lds	r24, 0x4348	; 0x804348 <leadoff_enable>
    390e:	88 23       	and	r24, r24
    3910:	31 f0       	breq	.+12     	; 0x391e <main+0x45c>
				{
					leadoff_enable  = false;
    3912:	10 92 48 43 	sts	0x4348, r1	; 0x804348 <leadoff_enable>
					app_state = LEAD_OFF_SETUP;
    3916:	20 92 3f 43 	sts	0x433F, r2	; 0x80433f <app_state>
    391a:	30 92 40 43 	sts	0x4340, r3	; 0x804340 <app_state+0x1>
				}
				
				if (leadoff_disable)
    391e:	80 91 22 43 	lds	r24, 0x4322	; 0x804322 <leadoff_disable>
    3922:	88 23       	and	r24, r24
    3924:	41 f0       	breq	.+16     	; 0x3936 <main+0x474>
				{
					leadoff_disable = false;
    3926:	10 92 22 43 	sts	0x4322, r1	; 0x804322 <leadoff_disable>
					app_state = LEAD_OFF_DISABLE;
    392a:	a8 e0       	ldi	r26, 0x08	; 8
    392c:	b0 e0       	ldi	r27, 0x00	; 0
    392e:	a0 93 3f 43 	sts	0x433F, r26	; 0x80433f <app_state>
    3932:	b0 93 40 43 	sts	0x4340, r27	; 0x804340 <app_state+0x1>
				}
				
				if (imp_enable)
    3936:	80 91 e3 40 	lds	r24, 0x40E3	; 0x8040e3 <imp_enable>
    393a:	88 23       	and	r24, r24
    393c:	41 f0       	breq	.+16     	; 0x394e <main+0x48c>
				{
					imp_enable  = false;
    393e:	10 92 e3 40 	sts	0x40E3, r1	; 0x8040e3 <imp_enable>
					app_state = IMP_SETUP;
    3942:	8b e0       	ldi	r24, 0x0B	; 11
    3944:	90 e0       	ldi	r25, 0x00	; 0
    3946:	80 93 3f 43 	sts	0x433F, r24	; 0x80433f <app_state>
    394a:	90 93 40 43 	sts	0x4340, r25	; 0x804340 <app_state+0x1>
				}
				
				if (imp_disable)
    394e:	80 91 9a 45 	lds	r24, 0x459A	; 0x80459a <imp_disable>
    3952:	88 23       	and	r24, r24
    3954:	09 f4       	brne	.+2      	; 0x3958 <main+0x496>
    3956:	64 ce       	rjmp	.-824    	; 0x3620 <main+0x15e>
				{
					imp_disable = false;
    3958:	10 92 9a 45 	sts	0x459A, r1	; 0x80459a <imp_disable>
					app_state = IMP_DISABLE;
    395c:	60 92 3f 43 	sts	0x433F, r6	; 0x80433f <app_state>
    3960:	70 92 40 43 	sts	0x4340, r7	; 0x804340 <app_state+0x1>
    3964:	5d ce       	rjmp	.-838    	; 0x3620 <main+0x15e>
				}
			
				break;
				
			case IDLE:
				adsStop();
    3966:	0e 94 fb 01 	call	0x3f6	; 0x3f6 <adsStop>
				disable_ADS_dry_inerrupt();
    396a:	0e 94 33 05 	call	0xa66	; 0xa66 <disable_ADS_dry_inerrupt>
				if (!in_idle_state)
    396e:	51 10       	cpse	r5, r1
    3970:	0a c0       	rjmp	.+20     	; 0x3986 <main+0x4c4>
				{
					in_idle_state = true;
					adsStandby();
    3972:	0e 94 b1 01 	call	0x362	; 0x362 <adsStandby>
					f_close(&Fil);
    3976:	89 e4       	ldi	r24, 0x49	; 73
    3978:	93 e4       	ldi	r25, 0x43	; 67
    397a:	0e 94 e7 17 	call	0x2fce	; 0x2fce <f_close>
					//SPI_send_SD_str    ("\nstopping the data stream!!!\n\0");
					uart_send_serial_str("IDLE mode\n\r");
    397e:	81 ec       	ldi	r24, 0xC1	; 193
    3980:	90 e2       	ldi	r25, 0x20	; 32
    3982:	0e 94 5e 21 	call	0x42bc	; 0x42bc <uart_send_serial_str>
				}
				buffer_full =  false;
    3986:	10 92 41 43 	sts	0x4341, r1	; 0x804341 <buffer_full>
				ADSnewData = false;
    398a:	10 92 17 43 	sts	0x4317, r1	; 0x804317 <ADSnewData>
				app_state = IDLE;
    398e:	10 92 3f 43 	sts	0x433F, r1	; 0x80433f <app_state>
    3992:	10 92 40 43 	sts	0x4340, r1	; 0x804340 <app_state+0x1>
				break;
    3996:	55 24       	eor	r5, r5
    3998:	53 94       	inc	r5
    399a:	42 ce       	rjmp	.-892    	; 0x3620 <main+0x15e>
				
			default:
				app_state = IDLE;
    399c:	10 92 3f 43 	sts	0x433F, r1	; 0x80433f <app_state>
    39a0:	10 92 40 43 	sts	0x4340, r1	; 0x804340 <app_state+0x1>
				uart_send_serial_str("default mode\n\r");
    39a4:	8d ec       	ldi	r24, 0xCD	; 205
    39a6:	90 e2       	ldi	r25, 0x20	; 32
    39a8:	0e 94 5e 21 	call	0x42bc	; 0x42bc <uart_send_serial_str>
    39ac:	39 ce       	rjmp	.-910    	; 0x3620 <main+0x15e>
		
	}


	return 0;
}
    39ae:	24 96       	adiw	r28, 0x04	; 4
    39b0:	cd bf       	out	0x3d, r28	; 61
    39b2:	de bf       	out	0x3e, r29	; 62
    39b4:	df 91       	pop	r29
    39b6:	cf 91       	pop	r28
    39b8:	1f 91       	pop	r17
    39ba:	0f 91       	pop	r16
    39bc:	ff 90       	pop	r15
    39be:	ef 90       	pop	r14
    39c0:	df 90       	pop	r13
    39c2:	cf 90       	pop	r12
    39c4:	bf 90       	pop	r11
    39c6:	af 90       	pop	r10
    39c8:	9f 90       	pop	r9
    39ca:	8f 90       	pop	r8
    39cc:	7f 90       	pop	r7
    39ce:	6f 90       	pop	r6
    39d0:	5f 90       	pop	r5
    39d2:	4f 90       	pop	r4
    39d4:	3f 90       	pop	r3
    39d6:	2f 90       	pop	r2
    39d8:	08 95       	ret

000039da <xmit_mmc>:
/* Transmit bytes to the card (with SPI)                                 */
/*-----------------------------------------------------------------------*/
//  const BYTE* buff,  /* Data to be sent */
//  UINT bc        /* Number of bytes to send */
static void xmit_mmc (const BYTE* buff, UINT bc)
{
    39da:	dc 01       	movw	r26, r24
    39dc:	68 0f       	add	r22, r24
    39de:	79 1f       	adc	r23, r25
/*-----------------------------------------------------------------------*/
/* SPI write byte for SD-card HvA-Xmegaboard version 2                   */
/*-----------------------------------------------------------------------*/
static void sdspi_write_byte1(unsigned char databyte)
{
  SPIC.DATA = databyte;
    39e0:	e0 ec       	ldi	r30, 0xC0	; 192
    39e2:	f8 e0       	ldi	r31, 0x08	; 8
static void xmit_mmc (const BYTE* buff, UINT bc)
{
  BYTE d;

  do {
    d = *buff++;  /* Get a byte to be sent */
    39e4:	9d 91       	ld	r25, X+
/*-----------------------------------------------------------------------*/
/* SPI write byte for SD-card HvA-Xmegaboard version 2                   */
/*-----------------------------------------------------------------------*/
static void sdspi_write_byte1(unsigned char databyte)
{
  SPIC.DATA = databyte;
    39e6:	93 83       	std	Z+3, r25	; 0x03
  while ( !(SPIC.STATUS & (SPI_IF_bm))) ;
    39e8:	92 81       	ldd	r25, Z+2	; 0x02
    39ea:	99 23       	and	r25, r25
    39ec:	ec f7       	brge	.-6      	; 0x39e8 <xmit_mmc+0xe>
  BYTE d;

  do {
    d = *buff++;  /* Get a byte to be sent */
    sdspi_write_byte1(d);
  } while (--bc);
    39ee:	a6 17       	cp	r26, r22
    39f0:	b7 07       	cpc	r27, r23
    39f2:	c1 f7       	brne	.-16     	; 0x39e4 <xmit_mmc+0xa>
}
    39f4:	08 95       	ret

000039f6 <rcvr_mmc>:
/* Receive bytes from the card (with SPI)                                */
/*-----------------------------------------------------------------------*/
//  BYTE *buff,  /* Pointer to read buffer */
//  UINT bc    /* Number of bytes to receive */
static void rcvr_mmc(BYTE *buff, UINT bc)
{
    39f6:	dc 01       	movw	r26, r24
    39f8:	68 0f       	add	r22, r24
    39fa:	79 1f       	adc	r23, r25
/*-----------------------------------------------------------------------*/
/* SPI read byte for SD-card HvA-Xmegaboard version 2                    */
/*-----------------------------------------------------------------------*/
static unsigned char sdspi_read_byte(void)
{
  SPIC.DATA = 0xff;
    39fc:	e0 ec       	ldi	r30, 0xC0	; 192
    39fe:	f8 e0       	ldi	r31, 0x08	; 8
    3a00:	8f ef       	ldi	r24, 0xFF	; 255
    3a02:	83 83       	std	Z+3, r24	; 0x03
  while ( !(SPIC.STATUS & (SPI_IF_bm))) ;
    3a04:	92 81       	ldd	r25, Z+2	; 0x02
    3a06:	99 23       	and	r25, r25
    3a08:	ec f7       	brge	.-6      	; 0x3a04 <rcvr_mmc+0xe>

  return (SPIC.DATA);
    3a0a:	93 81       	ldd	r25, Z+3	; 0x03
{
  BYTE r;

  do {
    r = sdspi_read_byte();
    *buff++ = r;      /* Store a received byte */
    3a0c:	9d 93       	st	X+, r25
  } while (--bc);
    3a0e:	a6 17       	cp	r26, r22
    3a10:	b7 07       	cpc	r27, r23
    3a12:	b9 f7       	brne	.-18     	; 0x3a02 <rcvr_mmc+0xc>
}
    3a14:	08 95       	ret

00003a16 <deselect>:
/*-----------------------------------------------------------------------*/
/* Deselect the card and release SPI bus                                 */
/*-----------------------------------------------------------------------*/

static void deselect (void)
{
    3a16:	cf 93       	push	r28
    3a18:	df 93       	push	r29
    3a1a:	1f 92       	push	r1
    3a1c:	cd b7       	in	r28, 0x3d	; 61
    3a1e:	de b7       	in	r29, 0x3e	; 62
  BYTE d;

  CS_H();
    3a20:	80 e1       	ldi	r24, 0x10	; 16
    3a22:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
  rcvr_mmc(&d, 1);  /* Dummy clock (force DO hi-z for multiple slave SPI) */
    3a26:	61 e0       	ldi	r22, 0x01	; 1
    3a28:	70 e0       	ldi	r23, 0x00	; 0
    3a2a:	ce 01       	movw	r24, r28
    3a2c:	01 96       	adiw	r24, 0x01	; 1
    3a2e:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <rcvr_mmc>
}
    3a32:	0f 90       	pop	r0
    3a34:	df 91       	pop	r29
    3a36:	cf 91       	pop	r28
    3a38:	08 95       	ret

00003a3a <dly_us>:
#define F_CPU 2000000                                                       //!< added:  This implementation expects a 32 MHz clock
#include <avr/io.h>      /* Include device specific declaration file here */
#include <util/delay.h>                                                        //!< added:  This implementation uses the delay functions

static void dly_us (uint16_t n) {
  for (uint16_t i=0; i<n/10; i++) {
    3a3a:	9c 01       	movw	r18, r24
    3a3c:	ad ec       	ldi	r26, 0xCD	; 205
    3a3e:	bc ec       	ldi	r27, 0xCC	; 204
    3a40:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <__umulhisi3>
    3a44:	96 95       	lsr	r25
    3a46:	87 95       	ror	r24
    3a48:	96 95       	lsr	r25
    3a4a:	87 95       	ror	r24
    3a4c:	96 95       	lsr	r25
    3a4e:	87 95       	ror	r24
    3a50:	00 97       	sbiw	r24, 0x00	; 0
    3a52:	59 f0       	breq	.+22     	; 0x3a6a <dly_us+0x30>
    3a54:	20 e0       	ldi	r18, 0x00	; 0
    3a56:	30 e0       	ldi	r19, 0x00	; 0
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    3a58:	46 e0       	ldi	r20, 0x06	; 6
    3a5a:	4a 95       	dec	r20
    3a5c:	f1 f7       	brne	.-4      	; 0x3a5a <dly_us+0x20>
    3a5e:	00 c0       	rjmp	.+0      	; 0x3a60 <dly_us+0x26>
    3a60:	2f 5f       	subi	r18, 0xFF	; 255
    3a62:	3f 4f       	sbci	r19, 0xFF	; 255
    3a64:	28 17       	cp	r18, r24
    3a66:	39 07       	cpc	r19, r25
    3a68:	b9 f7       	brne	.-18     	; 0x3a58 <dly_us+0x1e>
    3a6a:	08 95       	ret

00003a6c <wait_ready>:
//@cond
/*-----------------------------------------------------------------------*/
/* Wait for card ready                                                   */
/*-----------------------------------------------------------------------*/
static int wait_ready (void)  /* 1:OK, 0:Timeout */
{
    3a6c:	0f 93       	push	r16
    3a6e:	1f 93       	push	r17
    3a70:	cf 93       	push	r28
    3a72:	df 93       	push	r29
    3a74:	1f 92       	push	r1
    3a76:	cd b7       	in	r28, 0x3d	; 61
    3a78:	de b7       	in	r29, 0x3e	; 62
  BYTE d;
  UINT tmr;


  for (tmr = 5000; tmr; tmr--) {  /* Wait for ready in timeout of 500ms */
    3a7a:	08 e8       	ldi	r16, 0x88	; 136
    3a7c:	13 e1       	ldi	r17, 0x13	; 19
    rcvr_mmc(&d, 1);
    3a7e:	61 e0       	ldi	r22, 0x01	; 1
    3a80:	70 e0       	ldi	r23, 0x00	; 0
    3a82:	ce 01       	movw	r24, r28
    3a84:	01 96       	adiw	r24, 0x01	; 1
    3a86:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <rcvr_mmc>
    if (d == 0xFF) break;
    3a8a:	89 81       	ldd	r24, Y+1	; 0x01
    3a8c:	8f 3f       	cpi	r24, 0xFF	; 255
    3a8e:	39 f0       	breq	.+14     	; 0x3a9e <wait_ready+0x32>
    dly_us(100);
    3a90:	84 e6       	ldi	r24, 0x64	; 100
    3a92:	90 e0       	ldi	r25, 0x00	; 0
    3a94:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <dly_us>
{
  BYTE d;
  UINT tmr;


  for (tmr = 5000; tmr; tmr--) {  /* Wait for ready in timeout of 500ms */
    3a98:	01 50       	subi	r16, 0x01	; 1
    3a9a:	11 09       	sbc	r17, r1
    3a9c:	81 f7       	brne	.-32     	; 0x3a7e <wait_ready+0x12>
    rcvr_mmc(&d, 1);
    if (d == 0xFF) break;
    dly_us(100);
  }

  return tmr ? 1 : 0;
    3a9e:	81 e0       	ldi	r24, 0x01	; 1
    3aa0:	90 e0       	ldi	r25, 0x00	; 0
    3aa2:	01 2b       	or	r16, r17
    3aa4:	11 f4       	brne	.+4      	; 0x3aaa <wait_ready+0x3e>
    3aa6:	80 e0       	ldi	r24, 0x00	; 0
    3aa8:	90 e0       	ldi	r25, 0x00	; 0
}
    3aaa:	0f 90       	pop	r0
    3aac:	df 91       	pop	r29
    3aae:	cf 91       	pop	r28
    3ab0:	1f 91       	pop	r17
    3ab2:	0f 91       	pop	r16
    3ab4:	08 95       	ret

00003ab6 <select>:

/*-----------------------------------------------------------------------*/
/* Select the card and wait for ready                                    */
/*-----------------------------------------------------------------------*/
static int select (void)  /* 1:OK, 0:Timeout */
{
    3ab6:	0f 93       	push	r16
    3ab8:	1f 93       	push	r17
    3aba:	cf 93       	push	r28
    3abc:	df 93       	push	r29
    3abe:	1f 92       	push	r1
    3ac0:	cd b7       	in	r28, 0x3d	; 61
    3ac2:	de b7       	in	r29, 0x3e	; 62
  BYTE d;

  CS_L();
    3ac4:	80 e1       	ldi	r24, 0x10	; 16
    3ac6:	80 93 46 06 	sts	0x0646, r24	; 0x800646 <__TEXT_REGION_LENGTH__+0x700646>
  rcvr_mmc(&d, 1);  /* Dummy clock (force DO enabled) */
    3aca:	61 e0       	ldi	r22, 0x01	; 1
    3acc:	70 e0       	ldi	r23, 0x00	; 0
    3ace:	ce 01       	movw	r24, r28
    3ad0:	01 96       	adiw	r24, 0x01	; 1
    3ad2:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <rcvr_mmc>
  if (wait_ready()) return 1;  /* Wait for card ready */
    3ad6:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <wait_ready>
    3ada:	8c 01       	movw	r16, r24
    3adc:	89 2b       	or	r24, r25
    3ade:	19 f4       	brne	.+6      	; 0x3ae6 <select+0x30>

  deselect();
    3ae0:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <deselect>
  return 0;      /* Failed */
    3ae4:	02 c0       	rjmp	.+4      	; 0x3aea <select+0x34>
{
  BYTE d;

  CS_L();
  rcvr_mmc(&d, 1);  /* Dummy clock (force DO enabled) */
  if (wait_ready()) return 1;  /* Wait for card ready */
    3ae6:	01 e0       	ldi	r16, 0x01	; 1
    3ae8:	10 e0       	ldi	r17, 0x00	; 0

  deselect();
  return 0;      /* Failed */
}
    3aea:	c8 01       	movw	r24, r16
    3aec:	0f 90       	pop	r0
    3aee:	df 91       	pop	r29
    3af0:	cf 91       	pop	r28
    3af2:	1f 91       	pop	r17
    3af4:	0f 91       	pop	r16
    3af6:	08 95       	ret

00003af8 <send_cmd>:
static
BYTE send_cmd (    /* Returns command response (bit7==1:Send failed)*/
  BYTE cmd,    /* Command byte */
  DWORD arg    /* Argument */
)
{
    3af8:	df 92       	push	r13
    3afa:	ef 92       	push	r14
    3afc:	ff 92       	push	r15
    3afe:	0f 93       	push	r16
    3b00:	1f 93       	push	r17
    3b02:	cf 93       	push	r28
    3b04:	df 93       	push	r29
    3b06:	cd b7       	in	r28, 0x3d	; 61
    3b08:	de b7       	in	r29, 0x3e	; 62
    3b0a:	27 97       	sbiw	r28, 0x07	; 7
    3b0c:	cd bf       	out	0x3d, r28	; 61
    3b0e:	de bf       	out	0x3e, r29	; 62
    3b10:	18 2f       	mov	r17, r24
    3b12:	04 2f       	mov	r16, r20
    3b14:	f5 2e       	mov	r15, r21
    3b16:	e6 2e       	mov	r14, r22
    3b18:	d7 2e       	mov	r13, r23
  BYTE n, d, buf[6];


  if (cmd & 0x80) {  /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    3b1a:	88 23       	and	r24, r24
    3b1c:	54 f4       	brge	.+20     	; 0x3b32 <send_cmd+0x3a>
    cmd &= 0x7F;
    n = send_cmd(CMD55, 0);
    3b1e:	40 e0       	ldi	r20, 0x00	; 0
    3b20:	50 e0       	ldi	r21, 0x00	; 0
    3b22:	ba 01       	movw	r22, r20
    3b24:	87 e3       	ldi	r24, 0x37	; 55
    3b26:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <send_cmd>
    if (n > 1) return n;
    3b2a:	82 30       	cpi	r24, 0x02	; 2
    3b2c:	08 f0       	brcs	.+2      	; 0x3b30 <send_cmd+0x38>
    3b2e:	57 c0       	rjmp	.+174    	; 0x3bde <send_cmd+0xe6>
{
  BYTE n, d, buf[6];


  if (cmd & 0x80) {  /* ACMD<n> is the command sequense of CMD55-CMD<n> */
    cmd &= 0x7F;
    3b30:	1f 77       	andi	r17, 0x7F	; 127
    n = send_cmd(CMD55, 0);
    if (n > 1) return n;
  }

  /* Select the card and wait for ready except to stop multiple block read */
  if (cmd != CMD12) {
    3b32:	1c 30       	cpi	r17, 0x0C	; 12
    3b34:	29 f1       	breq	.+74     	; 0x3b80 <send_cmd+0x88>
    deselect();
    3b36:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <deselect>
    if (!select()) return 0xFF;
    3b3a:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <select>
    3b3e:	89 2b       	or	r24, r25
    3b40:	e9 f0       	breq	.+58     	; 0x3b7c <send_cmd+0x84>
  }

  /* Send a command packet */
  buf[0] = 0x40 | cmd;      /* Start + Command index */
    3b42:	81 2f       	mov	r24, r17
    3b44:	80 64       	ori	r24, 0x40	; 64
    3b46:	8a 83       	std	Y+2, r24	; 0x02
  buf[1] = (BYTE)(arg >> 24);    /* Argument[31..24] */
    3b48:	db 82       	std	Y+3, r13	; 0x03
  buf[2] = (BYTE)(arg >> 16);    /* Argument[23..16] */
    3b4a:	ec 82       	std	Y+4, r14	; 0x04
  buf[3] = (BYTE)(arg >> 8);    /* Argument[15..8] */
    3b4c:	fd 82       	std	Y+5, r15	; 0x05
  buf[4] = (BYTE)arg;        /* Argument[7..0] */
    3b4e:	0e 83       	std	Y+6, r16	; 0x06
  n = 0x01;            /* Dummy CRC + Stop */
  if (cmd == CMD0) n = 0x95;    /* (valid CRC for CMD0(0)) */
    3b50:	11 23       	and	r17, r17
    3b52:	e1 f1       	breq	.+120    	; 0x3bcc <send_cmd+0xd4>
    3b54:	38 c0       	rjmp	.+112    	; 0x3bc6 <send_cmd+0xce>
  if (cmd == CMD8) n = 0x87;    /* (valid CRC for CMD8(0x1AA)) */
  buf[5] = n;
  xmit_mmc(buf, 6);

  /* Receive command response */
  if (cmd == CMD12) rcvr_mmc(&d, 1);  /* Skip a stuff byte when stop reading */
    3b56:	61 e0       	ldi	r22, 0x01	; 1
    3b58:	70 e0       	ldi	r23, 0x00	; 0
    3b5a:	ce 01       	movw	r24, r28
    3b5c:	01 96       	adiw	r24, 0x01	; 1
    3b5e:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <rcvr_mmc>
static
BYTE send_cmd (    /* Returns command response (bit7==1:Send failed)*/
  BYTE cmd,    /* Command byte */
  DWORD arg    /* Argument */
)
{
    3b62:	1a e0       	ldi	r17, 0x0A	; 10

  /* Receive command response */
  if (cmd == CMD12) rcvr_mmc(&d, 1);  /* Skip a stuff byte when stop reading */
  n = 10;                /* Wait for a valid response in timeout of 10 attempts */
  do
    rcvr_mmc(&d, 1);
    3b64:	61 e0       	ldi	r22, 0x01	; 1
    3b66:	70 e0       	ldi	r23, 0x00	; 0
    3b68:	ce 01       	movw	r24, r28
    3b6a:	01 96       	adiw	r24, 0x01	; 1
    3b6c:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <rcvr_mmc>
  while ((d & 0x80) && --n);
    3b70:	89 81       	ldd	r24, Y+1	; 0x01
    3b72:	88 23       	and	r24, r24
    3b74:	a4 f5       	brge	.+104    	; 0x3bde <send_cmd+0xe6>
    3b76:	11 50       	subi	r17, 0x01	; 1
    3b78:	a9 f7       	brne	.-22     	; 0x3b64 <send_cmd+0x6c>
    3b7a:	31 c0       	rjmp	.+98     	; 0x3bde <send_cmd+0xe6>
  }

  /* Select the card and wait for ready except to stop multiple block read */
  if (cmd != CMD12) {
    deselect();
    if (!select()) return 0xFF;
    3b7c:	8f ef       	ldi	r24, 0xFF	; 255
    3b7e:	2f c0       	rjmp	.+94     	; 0x3bde <send_cmd+0xe6>
  }

  /* Send a command packet */
  buf[0] = 0x40 | cmd;      /* Start + Command index */
    3b80:	8c e4       	ldi	r24, 0x4C	; 76
    3b82:	8a 83       	std	Y+2, r24	; 0x02
  buf[1] = (BYTE)(arg >> 24);    /* Argument[31..24] */
    3b84:	db 82       	std	Y+3, r13	; 0x03
  buf[2] = (BYTE)(arg >> 16);    /* Argument[23..16] */
    3b86:	ec 82       	std	Y+4, r14	; 0x04
  buf[3] = (BYTE)(arg >> 8);    /* Argument[15..8] */
    3b88:	fd 82       	std	Y+5, r15	; 0x05
  buf[4] = (BYTE)arg;        /* Argument[7..0] */
    3b8a:	0e 83       	std	Y+6, r16	; 0x06
  n = 0x01;            /* Dummy CRC + Stop */
  if (cmd == CMD0) n = 0x95;    /* (valid CRC for CMD0(0)) */
  if (cmd == CMD8) n = 0x87;    /* (valid CRC for CMD8(0x1AA)) */
  buf[5] = n;
    3b8c:	81 e0       	ldi	r24, 0x01	; 1
    3b8e:	8f 83       	std	Y+7, r24	; 0x07
  xmit_mmc(buf, 6);
    3b90:	66 e0       	ldi	r22, 0x06	; 6
    3b92:	70 e0       	ldi	r23, 0x00	; 0
    3b94:	ce 01       	movw	r24, r28
    3b96:	02 96       	adiw	r24, 0x02	; 2
    3b98:	0e 94 ed 1c 	call	0x39da	; 0x39da <xmit_mmc>

  /* Receive command response */
  if (cmd == CMD12) rcvr_mmc(&d, 1);  /* Skip a stuff byte when stop reading */
    3b9c:	1c 30       	cpi	r17, 0x0C	; 12
    3b9e:	09 f7       	brne	.-62     	; 0x3b62 <send_cmd+0x6a>
    3ba0:	da cf       	rjmp	.-76     	; 0x3b56 <send_cmd+0x5e>
  buf[3] = (BYTE)(arg >> 8);    /* Argument[15..8] */
  buf[4] = (BYTE)arg;        /* Argument[7..0] */
  n = 0x01;            /* Dummy CRC + Stop */
  if (cmd == CMD0) n = 0x95;    /* (valid CRC for CMD0(0)) */
  if (cmd == CMD8) n = 0x87;    /* (valid CRC for CMD8(0x1AA)) */
  buf[5] = n;
    3ba2:	87 e8       	ldi	r24, 0x87	; 135
    3ba4:	8f 83       	std	Y+7, r24	; 0x07
  xmit_mmc(buf, 6);
    3ba6:	66 e0       	ldi	r22, 0x06	; 6
    3ba8:	70 e0       	ldi	r23, 0x00	; 0
    3baa:	ce 01       	movw	r24, r28
    3bac:	02 96       	adiw	r24, 0x02	; 2
    3bae:	0e 94 ed 1c 	call	0x39da	; 0x39da <xmit_mmc>
    3bb2:	d7 cf       	rjmp	.-82     	; 0x3b62 <send_cmd+0x6a>
  buf[3] = (BYTE)(arg >> 8);    /* Argument[15..8] */
  buf[4] = (BYTE)arg;        /* Argument[7..0] */
  n = 0x01;            /* Dummy CRC + Stop */
  if (cmd == CMD0) n = 0x95;    /* (valid CRC for CMD0(0)) */
  if (cmd == CMD8) n = 0x87;    /* (valid CRC for CMD8(0x1AA)) */
  buf[5] = n;
    3bb4:	81 e0       	ldi	r24, 0x01	; 1
    3bb6:	8f 83       	std	Y+7, r24	; 0x07
  xmit_mmc(buf, 6);
    3bb8:	66 e0       	ldi	r22, 0x06	; 6
    3bba:	70 e0       	ldi	r23, 0x00	; 0
    3bbc:	ce 01       	movw	r24, r28
    3bbe:	02 96       	adiw	r24, 0x02	; 2
    3bc0:	0e 94 ed 1c 	call	0x39da	; 0x39da <xmit_mmc>
    3bc4:	ce cf       	rjmp	.-100    	; 0x3b62 <send_cmd+0x6a>
  buf[2] = (BYTE)(arg >> 16);    /* Argument[23..16] */
  buf[3] = (BYTE)(arg >> 8);    /* Argument[15..8] */
  buf[4] = (BYTE)arg;        /* Argument[7..0] */
  n = 0x01;            /* Dummy CRC + Stop */
  if (cmd == CMD0) n = 0x95;    /* (valid CRC for CMD0(0)) */
  if (cmd == CMD8) n = 0x87;    /* (valid CRC for CMD8(0x1AA)) */
    3bc6:	18 30       	cpi	r17, 0x08	; 8
    3bc8:	61 f3       	breq	.-40     	; 0x3ba2 <send_cmd+0xaa>
    3bca:	f4 cf       	rjmp	.-24     	; 0x3bb4 <send_cmd+0xbc>
  buf[5] = n;
    3bcc:	85 e9       	ldi	r24, 0x95	; 149
    3bce:	8f 83       	std	Y+7, r24	; 0x07
  xmit_mmc(buf, 6);
    3bd0:	66 e0       	ldi	r22, 0x06	; 6
    3bd2:	70 e0       	ldi	r23, 0x00	; 0
    3bd4:	ce 01       	movw	r24, r28
    3bd6:	02 96       	adiw	r24, 0x02	; 2
    3bd8:	0e 94 ed 1c 	call	0x39da	; 0x39da <xmit_mmc>
    3bdc:	c2 cf       	rjmp	.-124    	; 0x3b62 <send_cmd+0x6a>
  do
    rcvr_mmc(&d, 1);
  while ((d & 0x80) && --n);

  return d;      /* Return with the response value */
}
    3bde:	27 96       	adiw	r28, 0x07	; 7
    3be0:	cd bf       	out	0x3d, r28	; 61
    3be2:	de bf       	out	0x3e, r29	; 62
    3be4:	df 91       	pop	r29
    3be6:	cf 91       	pop	r28
    3be8:	1f 91       	pop	r17
    3bea:	0f 91       	pop	r16
    3bec:	ff 90       	pop	r15
    3bee:	ef 90       	pop	r14
    3bf0:	df 90       	pop	r13
    3bf2:	08 95       	ret

00003bf4 <xmit_datablock>:
static
int xmit_datablock (  /* 1:OK, 0:Failed */
  const BYTE *buff,  /* 512 byte data block to be transmitted */
  BYTE token      /* Data/Stop token */
)
{
    3bf4:	ef 92       	push	r14
    3bf6:	ff 92       	push	r15
    3bf8:	1f 93       	push	r17
    3bfa:	cf 93       	push	r28
    3bfc:	df 93       	push	r29
    3bfe:	1f 92       	push	r1
    3c00:	1f 92       	push	r1
    3c02:	cd b7       	in	r28, 0x3d	; 61
    3c04:	de b7       	in	r29, 0x3e	; 62
    3c06:	7c 01       	movw	r14, r24
    3c08:	16 2f       	mov	r17, r22
  BYTE d[2];


  if (!wait_ready()) return 0;
    3c0a:	0e 94 36 1d 	call	0x3a6c	; 0x3a6c <wait_ready>
    3c0e:	00 97       	sbiw	r24, 0x00	; 0
    3c10:	31 f1       	breq	.+76     	; 0x3c5e <xmit_datablock+0x6a>

  d[0] = token;
    3c12:	19 83       	std	Y+1, r17	; 0x01
  xmit_mmc(d, 1);        /* Xmit a token */
    3c14:	61 e0       	ldi	r22, 0x01	; 1
    3c16:	70 e0       	ldi	r23, 0x00	; 0
    3c18:	ce 01       	movw	r24, r28
    3c1a:	01 96       	adiw	r24, 0x01	; 1
    3c1c:	0e 94 ed 1c 	call	0x39da	; 0x39da <xmit_mmc>
  if (token != 0xFD) {    /* Is it data token? */
    3c20:	1d 3f       	cpi	r17, 0xFD	; 253
    3c22:	d9 f0       	breq	.+54     	; 0x3c5a <xmit_datablock+0x66>
    xmit_mmc(buff, 512);  /* Xmit the 512 byte data block to MMC */
    3c24:	60 e0       	ldi	r22, 0x00	; 0
    3c26:	72 e0       	ldi	r23, 0x02	; 2
    3c28:	c7 01       	movw	r24, r14
    3c2a:	0e 94 ed 1c 	call	0x39da	; 0x39da <xmit_mmc>
    rcvr_mmc(d, 2);      /* Xmit dummy CRC (0xFF,0xFF) */
    3c2e:	62 e0       	ldi	r22, 0x02	; 2
    3c30:	70 e0       	ldi	r23, 0x00	; 0
    3c32:	ce 01       	movw	r24, r28
    3c34:	01 96       	adiw	r24, 0x01	; 1
    3c36:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <rcvr_mmc>
    rcvr_mmc(d, 1);      /* Receive data response */
    3c3a:	61 e0       	ldi	r22, 0x01	; 1
    3c3c:	70 e0       	ldi	r23, 0x00	; 0
    3c3e:	ce 01       	movw	r24, r28
    3c40:	01 96       	adiw	r24, 0x01	; 1
    3c42:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <rcvr_mmc>
)
{
  BYTE d[2];


  if (!wait_ready()) return 0;
    3c46:	89 81       	ldd	r24, Y+1	; 0x01
    3c48:	8f 71       	andi	r24, 0x1F	; 31
    3c4a:	31 e0       	ldi	r19, 0x01	; 1
    3c4c:	20 e0       	ldi	r18, 0x00	; 0
    3c4e:	85 30       	cpi	r24, 0x05	; 5
    3c50:	09 f0       	breq	.+2      	; 0x3c54 <xmit_datablock+0x60>
    3c52:	30 e0       	ldi	r19, 0x00	; 0
    3c54:	83 2f       	mov	r24, r19
    3c56:	92 2f       	mov	r25, r18
    3c58:	02 c0       	rjmp	.+4      	; 0x3c5e <xmit_datablock+0x6a>
    rcvr_mmc(d, 1);      /* Receive data response */
    if ((d[0] & 0x1F) != 0x05)  /* If not accepted, return with error */
      return 0;
  }

  return 1;
    3c5a:	81 e0       	ldi	r24, 0x01	; 1
    3c5c:	90 e0       	ldi	r25, 0x00	; 0
}
    3c5e:	0f 90       	pop	r0
    3c60:	0f 90       	pop	r0
    3c62:	df 91       	pop	r29
    3c64:	cf 91       	pop	r28
    3c66:	1f 91       	pop	r17
    3c68:	ff 90       	pop	r15
    3c6a:	ef 90       	pop	r14
    3c6c:	08 95       	ret

00003c6e <rcvr_datablock>:
static
int rcvr_datablock (  /* 1:OK, 0:Failed */
  BYTE *buff,      /* Data buffer to store received data */
  UINT btr      /* Byte count */
)
{
    3c6e:	cf 92       	push	r12
    3c70:	df 92       	push	r13
    3c72:	ef 92       	push	r14
    3c74:	ff 92       	push	r15
    3c76:	0f 93       	push	r16
    3c78:	1f 93       	push	r17
    3c7a:	cf 93       	push	r28
    3c7c:	df 93       	push	r29
    3c7e:	1f 92       	push	r1
    3c80:	1f 92       	push	r1
    3c82:	cd b7       	in	r28, 0x3d	; 61
    3c84:	de b7       	in	r29, 0x3e	; 62
    3c86:	7c 01       	movw	r14, r24
    3c88:	6b 01       	movw	r12, r22
    3c8a:	08 ee       	ldi	r16, 0xE8	; 232
    3c8c:	13 e0       	ldi	r17, 0x03	; 3
  BYTE d[2];
  UINT tmr;


  for (tmr = 1000; tmr; tmr--) {  /* Wait for data packet in timeout of 100ms */
    rcvr_mmc(d, 1);
    3c8e:	61 e0       	ldi	r22, 0x01	; 1
    3c90:	70 e0       	ldi	r23, 0x00	; 0
    3c92:	ce 01       	movw	r24, r28
    3c94:	01 96       	adiw	r24, 0x01	; 1
    3c96:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <rcvr_mmc>
    if (d[0] != 0xFF) break;
    3c9a:	89 81       	ldd	r24, Y+1	; 0x01
    3c9c:	8f 3f       	cpi	r24, 0xFF	; 255
    3c9e:	39 f4       	brne	.+14     	; 0x3cae <rcvr_datablock+0x40>
    dly_us(100);
    3ca0:	84 e6       	ldi	r24, 0x64	; 100
    3ca2:	90 e0       	ldi	r25, 0x00	; 0
    3ca4:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <dly_us>
    3ca8:	01 50       	subi	r16, 0x01	; 1
    3caa:	11 09       	sbc	r17, r1
{
  BYTE d[2];
  UINT tmr;


  for (tmr = 1000; tmr; tmr--) {  /* Wait for data packet in timeout of 100ms */
    3cac:	81 f7       	brne	.-32     	; 0x3c8e <rcvr_datablock+0x20>
    rcvr_mmc(d, 1);
    if (d[0] != 0xFF) break;
    dly_us(100);
  }
  if (d[0] != 0xFE) return 0;    /* If not valid data token, return with error */
    3cae:	89 81       	ldd	r24, Y+1	; 0x01
    3cb0:	8e 3f       	cpi	r24, 0xFE	; 254
    3cb2:	69 f4       	brne	.+26     	; 0x3cce <rcvr_datablock+0x60>

  rcvr_mmc(buff, btr);      /* Receive the data block into buffer */
    3cb4:	b6 01       	movw	r22, r12
    3cb6:	c7 01       	movw	r24, r14
    3cb8:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <rcvr_mmc>
  rcvr_mmc(d, 2);          /* Discard CRC */
    3cbc:	62 e0       	ldi	r22, 0x02	; 2
    3cbe:	70 e0       	ldi	r23, 0x00	; 0
    3cc0:	ce 01       	movw	r24, r28
    3cc2:	01 96       	adiw	r24, 0x01	; 1
    3cc4:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <rcvr_mmc>

  return 1;            /* Return with success */
    3cc8:	81 e0       	ldi	r24, 0x01	; 1
    3cca:	90 e0       	ldi	r25, 0x00	; 0
    3ccc:	02 c0       	rjmp	.+4      	; 0x3cd2 <rcvr_datablock+0x64>
  for (tmr = 1000; tmr; tmr--) {  /* Wait for data packet in timeout of 100ms */
    rcvr_mmc(d, 1);
    if (d[0] != 0xFF) break;
    dly_us(100);
  }
  if (d[0] != 0xFE) return 0;    /* If not valid data token, return with error */
    3cce:	80 e0       	ldi	r24, 0x00	; 0
    3cd0:	90 e0       	ldi	r25, 0x00	; 0

  rcvr_mmc(buff, btr);      /* Receive the data block into buffer */
  rcvr_mmc(d, 2);          /* Discard CRC */

  return 1;            /* Return with success */
}
    3cd2:	0f 90       	pop	r0
    3cd4:	0f 90       	pop	r0
    3cd6:	df 91       	pop	r29
    3cd8:	cf 91       	pop	r28
    3cda:	1f 91       	pop	r17
    3cdc:	0f 91       	pop	r16
    3cde:	ff 90       	pop	r15
    3ce0:	ef 90       	pop	r14
    3ce2:	df 90       	pop	r13
    3ce4:	cf 90       	pop	r12
    3ce6:	08 95       	ret

00003ce8 <disk_status>:

DSTATUS disk_status (
  BYTE drv      /* Drive number (always 0) */
)
{
  if (drv) return STA_NOINIT;
    3ce8:	81 11       	cpse	r24, r1
    3cea:	03 c0       	rjmp	.+6      	; 0x3cf2 <disk_status+0xa>

  return Stat;
    3cec:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    3cf0:	08 95       	ret

DSTATUS disk_status (
  BYTE drv      /* Drive number (always 0) */
)
{
  if (drv) return STA_NOINIT;
    3cf2:	81 e0       	ldi	r24, 0x01	; 1

  return Stat;
}
    3cf4:	08 95       	ret

00003cf6 <disk_initialize>:
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (
  BYTE drv    /* Physical drive nmuber (0) */
)
{
    3cf6:	ef 92       	push	r14
    3cf8:	ff 92       	push	r15
    3cfa:	0f 93       	push	r16
    3cfc:	1f 93       	push	r17
    3cfe:	cf 93       	push	r28
    3d00:	df 93       	push	r29
    3d02:	00 d0       	rcall	.+0      	; 0x3d04 <disk_initialize+0xe>
    3d04:	1f 92       	push	r1
    3d06:	cd b7       	in	r28, 0x3d	; 61
    3d08:	de b7       	in	r29, 0x3e	; 62
  BYTE n, ty, cmd, buf[4];
  UINT tmr;
  DSTATUS s;


  if (drv) return RES_NOTRDY;
    3d0a:	81 11       	cpse	r24, r1
    3d0c:	bc c0       	rjmp	.+376    	; 0x3e86 <disk_initialize+0x190>

  dly_us(10000);      /* 10ms */
    3d0e:	80 e1       	ldi	r24, 0x10	; 16
    3d10:	97 e2       	ldi	r25, 0x27	; 39
    3d12:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <dly_us>
/* SPI Initialization for SD-card HvA-Xmegaboard version 2               */
/*-----------------------------------------------------------------------*/
static void sdspi_init(void)
{
  // port configuratie mmc/sd/sdhc card
  PORTC.REMAP    = PORT_SPI_bm;         // swap SCK and MOSI
    3d16:	e0 e4       	ldi	r30, 0x40	; 64
    3d18:	f6 e0       	ldi	r31, 0x06	; 6
    3d1a:	80 e2       	ldi	r24, 0x20	; 32
    3d1c:	86 87       	std	Z+14, r24	; 0x0e
  PORTC.DIRCLR   = PIN6_bm;             // MISO        input
    3d1e:	90 e4       	ldi	r25, 0x40	; 64
    3d20:	92 83       	std	Z+2, r25	; 0x02
  PORTC.DIRSET   = PIN5_bm;             // SCK         output
    3d22:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRSET   = PIN7_bm;             // MOSI        output
    3d24:	80 e8       	ldi	r24, 0x80	; 128
    3d26:	81 83       	std	Z+1, r24	; 0x01
  PORTC.DIRSET   = PIN4_bm;             // chip select output
    3d28:	80 e1       	ldi	r24, 0x10	; 16
    3d2a:	81 83       	std	Z+1, r24	; 0x01
  PORTC.PIN6CTRL = PORT_OPC_PULLUP_gc;  // MISO        pullup
    3d2c:	98 e1       	ldi	r25, 0x18	; 24
    3d2e:	96 8b       	std	Z+22, r25	; 0x16

  // fspi = fcpu/4 =  8MHz
  SPIC.CTRL      = SPI_ENABLE_bm |
    3d30:	a0 ec       	ldi	r26, 0xC0	; 192
    3d32:	b8 e0       	ldi	r27, 0x08	; 8
    3d34:	90 e5       	ldi	r25, 0x50	; 80
    3d36:	9c 93       	st	X, r25
                   SPI_MASTER_bm |
                   SPI_PRESCALER_DIV4_gc |
                   SPI_MODE_0_gc;
  SPIC.INTCTRL   = SPI_INTLVL_OFF_gc;
    3d38:	11 96       	adiw	r26, 0x01	; 1
    3d3a:	1c 92       	st	X, r1

  // disable card
  sdspi_CShigh();
    3d3c:	85 83       	std	Z+5, r24	; 0x05
    3d3e:	1a e0       	ldi	r17, 0x0A	; 10
  if (drv) return RES_NOTRDY;

  dly_us(10000);      /* 10ms */
  sdspi_init();       //! Changed: this function uses now sdspi_init() for initialization  

  for (n = 10; n; n--) rcvr_mmc(buf, 1);  /* Apply 80 dummy clocks and the card gets ready to receive command */
    3d40:	61 e0       	ldi	r22, 0x01	; 1
    3d42:	70 e0       	ldi	r23, 0x00	; 0
    3d44:	ce 01       	movw	r24, r28
    3d46:	01 96       	adiw	r24, 0x01	; 1
    3d48:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <rcvr_mmc>
    3d4c:	11 50       	subi	r17, 0x01	; 1
    3d4e:	c1 f7       	brne	.-16     	; 0x3d40 <disk_initialize+0x4a>

  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    3d50:	40 e0       	ldi	r20, 0x00	; 0
    3d52:	50 e0       	ldi	r21, 0x00	; 0
    3d54:	ba 01       	movw	r22, r20
    3d56:	80 e0       	ldi	r24, 0x00	; 0
    3d58:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <send_cmd>
    3d5c:	81 30       	cpi	r24, 0x01	; 1
    3d5e:	09 f0       	breq	.+2      	; 0x3d62 <disk_initialize+0x6c>
    3d60:	77 c0       	rjmp	.+238    	; 0x3e50 <disk_initialize+0x15a>
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDv2? */
    3d62:	4a ea       	ldi	r20, 0xAA	; 170
    3d64:	51 e0       	ldi	r21, 0x01	; 1
    3d66:	60 e0       	ldi	r22, 0x00	; 0
    3d68:	70 e0       	ldi	r23, 0x00	; 0
    3d6a:	88 e0       	ldi	r24, 0x08	; 8
    3d6c:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <send_cmd>
    3d70:	81 30       	cpi	r24, 0x01	; 1
    3d72:	d1 f5       	brne	.+116    	; 0x3de8 <disk_initialize+0xf2>
      rcvr_mmc(buf, 4);              /* Get trailing return value of R7 resp */
    3d74:	64 e0       	ldi	r22, 0x04	; 4
    3d76:	70 e0       	ldi	r23, 0x00	; 0
    3d78:	ce 01       	movw	r24, r28
    3d7a:	01 96       	adiw	r24, 0x01	; 1
    3d7c:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <rcvr_mmc>
      if (buf[2] == 0x01 && buf[3] == 0xAA) {    /* The card can work at vdd range of 2.7-3.6V */
    3d80:	8b 81       	ldd	r24, Y+3	; 0x03
    3d82:	81 30       	cpi	r24, 0x01	; 1
    3d84:	09 f0       	breq	.+2      	; 0x3d88 <disk_initialize+0x92>
    3d86:	66 c0       	rjmp	.+204    	; 0x3e54 <disk_initialize+0x15e>
    3d88:	8c 81       	ldd	r24, Y+4	; 0x04
    3d8a:	8a 3a       	cpi	r24, 0xAA	; 170
    3d8c:	09 f0       	breq	.+2      	; 0x3d90 <disk_initialize+0x9a>
    3d8e:	64 c0       	rjmp	.+200    	; 0x3e58 <disk_initialize+0x162>
    3d90:	08 ee       	ldi	r16, 0xE8	; 232
    3d92:	13 e0       	ldi	r17, 0x03	; 3
        for (tmr = 1000; tmr; tmr--) {      /* Wait for leaving idle state (ACMD41 with HCS bit) */
          if (send_cmd(ACMD41, 1UL << 30) == 0) break;
    3d94:	40 e0       	ldi	r20, 0x00	; 0
    3d96:	50 e0       	ldi	r21, 0x00	; 0
    3d98:	60 e0       	ldi	r22, 0x00	; 0
    3d9a:	70 e4       	ldi	r23, 0x40	; 64
    3d9c:	89 ea       	ldi	r24, 0xA9	; 169
    3d9e:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <send_cmd>
    3da2:	88 23       	and	r24, r24
    3da4:	49 f0       	breq	.+18     	; 0x3db8 <disk_initialize+0xc2>
          dly_us(1000);
    3da6:	88 ee       	ldi	r24, 0xE8	; 232
    3da8:	93 e0       	ldi	r25, 0x03	; 3
    3daa:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <dly_us>
  ty = 0;
  if (send_cmd(CMD0, 0) == 1) {      /* Enter Idle state */
    if (send_cmd(CMD8, 0x1AA) == 1) {  /* SDv2? */
      rcvr_mmc(buf, 4);              /* Get trailing return value of R7 resp */
      if (buf[2] == 0x01 && buf[3] == 0xAA) {    /* The card can work at vdd range of 2.7-3.6V */
        for (tmr = 1000; tmr; tmr--) {      /* Wait for leaving idle state (ACMD41 with HCS bit) */
    3dae:	01 50       	subi	r16, 0x01	; 1
    3db0:	11 09       	sbc	r17, r1
    3db2:	81 f7       	brne	.-32     	; 0x3d94 <disk_initialize+0x9e>
  dly_us(10000);      /* 10ms */
  sdspi_init();       //! Changed: this function uses now sdspi_init() for initialization  

  for (n = 10; n; n--) rcvr_mmc(buf, 1);  /* Apply 80 dummy clocks and the card gets ready to receive command */

  ty = 0;
    3db4:	f1 2c       	mov	r15, r1
    3db6:	5c c0       	rjmp	.+184    	; 0x3e70 <disk_initialize+0x17a>
      if (buf[2] == 0x01 && buf[3] == 0xAA) {    /* The card can work at vdd range of 2.7-3.6V */
        for (tmr = 1000; tmr; tmr--) {      /* Wait for leaving idle state (ACMD41 with HCS bit) */
          if (send_cmd(ACMD41, 1UL << 30) == 0) break;
          dly_us(1000);
        }
        if (tmr && send_cmd(CMD58, 0) == 0) {  /* Check CCS bit in the OCR */
    3db8:	01 2b       	or	r16, r17
    3dba:	09 f4       	brne	.+2      	; 0x3dbe <disk_initialize+0xc8>
    3dbc:	4f c0       	rjmp	.+158    	; 0x3e5c <disk_initialize+0x166>
    3dbe:	40 e0       	ldi	r20, 0x00	; 0
    3dc0:	50 e0       	ldi	r21, 0x00	; 0
    3dc2:	ba 01       	movw	r22, r20
    3dc4:	8a e3       	ldi	r24, 0x3A	; 58
    3dc6:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <send_cmd>
    3dca:	81 11       	cpse	r24, r1
    3dcc:	49 c0       	rjmp	.+146    	; 0x3e60 <disk_initialize+0x16a>
          rcvr_mmc(buf, 4);
    3dce:	64 e0       	ldi	r22, 0x04	; 4
    3dd0:	70 e0       	ldi	r23, 0x00	; 0
    3dd2:	ce 01       	movw	r24, r28
    3dd4:	01 96       	adiw	r24, 0x01	; 1
    3dd6:	0e 94 fb 1c 	call	0x39f6	; 0x39f6 <rcvr_mmc>
          ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* SDv2 */
    3dda:	89 81       	ldd	r24, Y+1	; 0x01
    3ddc:	86 fd       	sbrc	r24, 6
    3dde:	42 c0       	rjmp	.+132    	; 0x3e64 <disk_initialize+0x16e>
    3de0:	68 94       	set
    3de2:	ff 24       	eor	r15, r15
    3de4:	f2 f8       	bld	r15, 2
    3de6:	44 c0       	rjmp	.+136    	; 0x3e70 <disk_initialize+0x17a>
        }
      }
    } else {              /* SDv1 or MMCv3 */
      if (send_cmd(ACMD41, 0) <= 1)   {
    3de8:	40 e0       	ldi	r20, 0x00	; 0
    3dea:	50 e0       	ldi	r21, 0x00	; 0
    3dec:	ba 01       	movw	r22, r20
    3dee:	89 ea       	ldi	r24, 0xA9	; 169
    3df0:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <send_cmd>
    3df4:	82 30       	cpi	r24, 0x02	; 2
    3df6:	28 f0       	brcs	.+10     	; 0x3e02 <disk_initialize+0x10c>
        ty = CT_SD1; cmd = ACMD41;  /* SDv1 */
      } else {
        ty = CT_MMC; cmd = CMD1;  /* MMCv3 */
    3df8:	ee 24       	eor	r14, r14
    3dfa:	e3 94       	inc	r14
    3dfc:	ff 24       	eor	r15, r15
    3dfe:	f3 94       	inc	r15
    3e00:	07 c0       	rjmp	.+14     	; 0x3e10 <disk_initialize+0x11a>
          ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* SDv2 */
        }
      }
    } else {              /* SDv1 or MMCv3 */
      if (send_cmd(ACMD41, 0) <= 1)   {
        ty = CT_SD1; cmd = ACMD41;  /* SDv1 */
    3e02:	0f 2e       	mov	r0, r31
    3e04:	f9 ea       	ldi	r31, 0xA9	; 169
    3e06:	ef 2e       	mov	r14, r31
    3e08:	f0 2d       	mov	r31, r0
    3e0a:	68 94       	set
    3e0c:	ff 24       	eor	r15, r15
    3e0e:	f1 f8       	bld	r15, 1
      } else {
        ty = CT_MMC; cmd = CMD1;  /* MMCv3 */
      }
      for (tmr = 1000; tmr; tmr--) {      /* Wait for leaving idle state */
    3e10:	08 ee       	ldi	r16, 0xE8	; 232
    3e12:	13 e0       	ldi	r17, 0x03	; 3
        if (send_cmd(cmd, 0) == 0) break;
    3e14:	40 e0       	ldi	r20, 0x00	; 0
    3e16:	50 e0       	ldi	r21, 0x00	; 0
    3e18:	ba 01       	movw	r22, r20
    3e1a:	8e 2d       	mov	r24, r14
    3e1c:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <send_cmd>
    3e20:	88 23       	and	r24, r24
    3e22:	49 f0       	breq	.+18     	; 0x3e36 <disk_initialize+0x140>
        dly_us(1000);
    3e24:	88 ee       	ldi	r24, 0xE8	; 232
    3e26:	93 e0       	ldi	r25, 0x03	; 3
    3e28:	0e 94 1d 1d 	call	0x3a3a	; 0x3a3a <dly_us>
      if (send_cmd(ACMD41, 0) <= 1)   {
        ty = CT_SD1; cmd = ACMD41;  /* SDv1 */
      } else {
        ty = CT_MMC; cmd = CMD1;  /* MMCv3 */
      }
      for (tmr = 1000; tmr; tmr--) {      /* Wait for leaving idle state */
    3e2c:	01 50       	subi	r16, 0x01	; 1
    3e2e:	11 09       	sbc	r17, r1
    3e30:	89 f7       	brne	.-30     	; 0x3e14 <disk_initialize+0x11e>
        if (send_cmd(cmd, 0) == 0) break;
        dly_us(1000);
      }
      if (!tmr || send_cmd(CMD16, 512) != 0)  /* Set R/W block length to 512 */
        ty = 0;
    3e32:	f1 2c       	mov	r15, r1
    3e34:	1d c0       	rjmp	.+58     	; 0x3e70 <disk_initialize+0x17a>
      }
      for (tmr = 1000; tmr; tmr--) {      /* Wait for leaving idle state */
        if (send_cmd(cmd, 0) == 0) break;
        dly_us(1000);
      }
      if (!tmr || send_cmd(CMD16, 512) != 0)  /* Set R/W block length to 512 */
    3e36:	01 2b       	or	r16, r17
    3e38:	d1 f0       	breq	.+52     	; 0x3e6e <disk_initialize+0x178>
    3e3a:	40 e0       	ldi	r20, 0x00	; 0
    3e3c:	52 e0       	ldi	r21, 0x02	; 2
    3e3e:	60 e0       	ldi	r22, 0x00	; 0
    3e40:	70 e0       	ldi	r23, 0x00	; 0
    3e42:	80 e1       	ldi	r24, 0x10	; 16
    3e44:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <send_cmd>
    3e48:	88 23       	and	r24, r24
    3e4a:	91 f0       	breq	.+36     	; 0x3e70 <disk_initialize+0x17a>
        ty = 0;
    3e4c:	f1 2c       	mov	r15, r1
    3e4e:	10 c0       	rjmp	.+32     	; 0x3e70 <disk_initialize+0x17a>
  dly_us(10000);      /* 10ms */
  sdspi_init();       //! Changed: this function uses now sdspi_init() for initialization  

  for (n = 10; n; n--) rcvr_mmc(buf, 1);  /* Apply 80 dummy clocks and the card gets ready to receive command */

  ty = 0;
    3e50:	f1 2c       	mov	r15, r1
    3e52:	0e c0       	rjmp	.+28     	; 0x3e70 <disk_initialize+0x17a>
    3e54:	f1 2c       	mov	r15, r1
    3e56:	0c c0       	rjmp	.+24     	; 0x3e70 <disk_initialize+0x17a>
    3e58:	f1 2c       	mov	r15, r1
    3e5a:	0a c0       	rjmp	.+20     	; 0x3e70 <disk_initialize+0x17a>
    3e5c:	f1 2c       	mov	r15, r1
    3e5e:	08 c0       	rjmp	.+16     	; 0x3e70 <disk_initialize+0x17a>
    3e60:	f1 2c       	mov	r15, r1
    3e62:	06 c0       	rjmp	.+12     	; 0x3e70 <disk_initialize+0x17a>
          if (send_cmd(ACMD41, 1UL << 30) == 0) break;
          dly_us(1000);
        }
        if (tmr && send_cmd(CMD58, 0) == 0) {  /* Check CCS bit in the OCR */
          rcvr_mmc(buf, 4);
          ty = (buf[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;  /* SDv2 */
    3e64:	0f 2e       	mov	r0, r31
    3e66:	fc e0       	ldi	r31, 0x0C	; 12
    3e68:	ff 2e       	mov	r15, r31
    3e6a:	f0 2d       	mov	r31, r0
    3e6c:	01 c0       	rjmp	.+2      	; 0x3e70 <disk_initialize+0x17a>
      for (tmr = 1000; tmr; tmr--) {      /* Wait for leaving idle state */
        if (send_cmd(cmd, 0) == 0) break;
        dly_us(1000);
      }
      if (!tmr || send_cmd(CMD16, 512) != 0)  /* Set R/W block length to 512 */
        ty = 0;
    3e6e:	f1 2c       	mov	r15, r1
    }
  }
  CardType = ty;
    3e70:	f0 92 e1 20 	sts	0x20E1, r15	; 0x8020e1 <CardType>
  s = ty ? 0 : STA_NOINIT;
    3e74:	11 e0       	ldi	r17, 0x01	; 1
    3e76:	f1 10       	cpse	r15, r1
    3e78:	10 e0       	ldi	r17, 0x00	; 0
  Stat = s;
    3e7a:	10 93 00 20 	sts	0x2000, r17	; 0x802000 <__DATA_REGION_ORIGIN__>

  deselect();
    3e7e:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <deselect>

  return s;
    3e82:	81 2f       	mov	r24, r17
    3e84:	01 c0       	rjmp	.+2      	; 0x3e88 <disk_initialize+0x192>
  BYTE n, ty, cmd, buf[4];
  UINT tmr;
  DSTATUS s;


  if (drv) return RES_NOTRDY;
    3e86:	83 e0       	ldi	r24, 0x03	; 3
  Stat = s;

  deselect();

  return s;
}
    3e88:	24 96       	adiw	r28, 0x04	; 4
    3e8a:	cd bf       	out	0x3d, r28	; 61
    3e8c:	de bf       	out	0x3e, r29	; 62
    3e8e:	df 91       	pop	r29
    3e90:	cf 91       	pop	r28
    3e92:	1f 91       	pop	r17
    3e94:	0f 91       	pop	r16
    3e96:	ff 90       	pop	r15
    3e98:	ef 90       	pop	r14
    3e9a:	08 95       	ret

00003e9c <disk_read>:
  BYTE drv,      /* Physical drive nmuber (0) */
  BYTE *buff,      /* Pointer to the data buffer to store read data */
  DWORD sector,    /* Start sector number (LBA) */
  UINT count      /* Sector count (1..128) */
)
{
    3e9c:	ff 92       	push	r15
    3e9e:	0f 93       	push	r16
    3ea0:	1f 93       	push	r17
    3ea2:	cf 93       	push	r28
    3ea4:	df 93       	push	r29
    3ea6:	eb 01       	movw	r28, r22

DSTATUS disk_status (
  BYTE drv      /* Drive number (always 0) */
)
{
  if (drv) return STA_NOINIT;
    3ea8:	81 11       	cpse	r24, r1
    3eaa:	3f c0       	rjmp	.+126    	; 0x3f2a <disk_read+0x8e>
)
{
  BYTE cmd;


  if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3eac:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    3eb0:	80 fd       	sbrc	r24, 0
    3eb2:	3d c0       	rjmp	.+122    	; 0x3f2e <disk_read+0x92>
  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert LBA to byte address if needed */
    3eb4:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <CardType>
    3eb8:	83 fd       	sbrc	r24, 3
    3eba:	09 c0       	rjmp	.+18     	; 0x3ece <disk_read+0x32>
    3ebc:	01 2e       	mov	r0, r17
    3ebe:	19 e0       	ldi	r17, 0x09	; 9
    3ec0:	22 0f       	add	r18, r18
    3ec2:	33 1f       	adc	r19, r19
    3ec4:	44 1f       	adc	r20, r20
    3ec6:	55 1f       	adc	r21, r21
    3ec8:	1a 95       	dec	r17
    3eca:	d1 f7       	brne	.-12     	; 0x3ec0 <disk_read+0x24>
    3ecc:	10 2d       	mov	r17, r0

  cmd = count > 1 ? CMD18 : CMD17;      /*  READ_MULTIPLE_BLOCK : READ_SINGLE_BLOCK */
    3ece:	02 30       	cpi	r16, 0x02	; 2
    3ed0:	11 05       	cpc	r17, r1
    3ed2:	28 f4       	brcc	.+10     	; 0x3ede <disk_read+0x42>
    3ed4:	0f 2e       	mov	r0, r31
    3ed6:	f1 e1       	ldi	r31, 0x11	; 17
    3ed8:	ff 2e       	mov	r15, r31
    3eda:	f0 2d       	mov	r31, r0
    3edc:	04 c0       	rjmp	.+8      	; 0x3ee6 <disk_read+0x4a>
    3ede:	0f 2e       	mov	r0, r31
    3ee0:	f2 e1       	ldi	r31, 0x12	; 18
    3ee2:	ff 2e       	mov	r15, r31
    3ee4:	f0 2d       	mov	r31, r0
  if (send_cmd(cmd, sector) == 0) {
    3ee6:	ba 01       	movw	r22, r20
    3ee8:	a9 01       	movw	r20, r18
    3eea:	8f 2d       	mov	r24, r15
    3eec:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <send_cmd>
    3ef0:	81 11       	cpse	r24, r1
    3ef2:	14 c0       	rjmp	.+40     	; 0x3f1c <disk_read+0x80>
    do {
      if (!rcvr_datablock(buff, 512)) break;
    3ef4:	60 e0       	ldi	r22, 0x00	; 0
    3ef6:	72 e0       	ldi	r23, 0x02	; 2
    3ef8:	ce 01       	movw	r24, r28
    3efa:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <rcvr_datablock>
    3efe:	89 2b       	or	r24, r25
    3f00:	21 f0       	breq	.+8      	; 0x3f0a <disk_read+0x6e>
      buff += 512;
    3f02:	de 5f       	subi	r29, 0xFE	; 254
    } while (--count);
    3f04:	01 50       	subi	r16, 0x01	; 1
    3f06:	11 09       	sbc	r17, r1
    3f08:	a9 f7       	brne	.-22     	; 0x3ef4 <disk_read+0x58>
    if (cmd == CMD18) send_cmd(CMD12, 0);  /* STOP_TRANSMISSION */
    3f0a:	82 e1       	ldi	r24, 0x12	; 18
    3f0c:	f8 12       	cpse	r15, r24
    3f0e:	06 c0       	rjmp	.+12     	; 0x3f1c <disk_read+0x80>
    3f10:	40 e0       	ldi	r20, 0x00	; 0
    3f12:	50 e0       	ldi	r21, 0x00	; 0
    3f14:	ba 01       	movw	r22, r20
    3f16:	8c e0       	ldi	r24, 0x0C	; 12
    3f18:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <send_cmd>
  }
  deselect();
    3f1c:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <deselect>

  return count ? RES_ERROR : RES_OK;
    3f20:	81 e0       	ldi	r24, 0x01	; 1
    3f22:	01 2b       	or	r16, r17
    3f24:	29 f4       	brne	.+10     	; 0x3f30 <disk_read+0x94>
    3f26:	80 e0       	ldi	r24, 0x00	; 0
    3f28:	03 c0       	rjmp	.+6      	; 0x3f30 <disk_read+0x94>
)
{
  BYTE cmd;


  if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3f2a:	83 e0       	ldi	r24, 0x03	; 3
    3f2c:	01 c0       	rjmp	.+2      	; 0x3f30 <disk_read+0x94>
    3f2e:	83 e0       	ldi	r24, 0x03	; 3
    if (cmd == CMD18) send_cmd(CMD12, 0);  /* STOP_TRANSMISSION */
  }
  deselect();

  return count ? RES_ERROR : RES_OK;
}
    3f30:	df 91       	pop	r29
    3f32:	cf 91       	pop	r28
    3f34:	1f 91       	pop	r17
    3f36:	0f 91       	pop	r16
    3f38:	ff 90       	pop	r15
    3f3a:	08 95       	ret

00003f3c <disk_write>:
  BYTE drv,      /* Physical drive nmuber (0) */
  const BYTE *buff,  /* Pointer to the data to be written */
  DWORD sector,    /* Start sector number (LBA) */
  UINT count      /* Sector count (1..128) */
)
{
    3f3c:	cf 92       	push	r12
    3f3e:	df 92       	push	r13
    3f40:	ef 92       	push	r14
    3f42:	ff 92       	push	r15
    3f44:	0f 93       	push	r16
    3f46:	1f 93       	push	r17
    3f48:	cf 93       	push	r28
    3f4a:	df 93       	push	r29
    3f4c:	eb 01       	movw	r28, r22
    3f4e:	69 01       	movw	r12, r18
    3f50:	7a 01       	movw	r14, r20

DSTATUS disk_status (
  BYTE drv      /* Drive number (always 0) */
)
{
  if (drv) return STA_NOINIT;
    3f52:	81 11       	cpse	r24, r1
    3f54:	50 c0       	rjmp	.+160    	; 0x3ff6 <disk_write+0xba>
  const BYTE *buff,  /* Pointer to the data to be written */
  DWORD sector,    /* Start sector number (LBA) */
  UINT count      /* Sector count (1..128) */
)
{
  if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3f56:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    3f5a:	80 fd       	sbrc	r24, 0
    3f5c:	4e c0       	rjmp	.+156    	; 0x3ffa <disk_write+0xbe>
  if (!(CardType & CT_BLOCK)) sector *= 512;  /* Convert LBA to byte address if needed */
    3f5e:	80 91 e1 20 	lds	r24, 0x20E1	; 0x8020e1 <CardType>
    3f62:	83 fd       	sbrc	r24, 3
    3f64:	09 c0       	rjmp	.+18     	; 0x3f78 <disk_write+0x3c>
    3f66:	0b 2e       	mov	r0, r27
    3f68:	b9 e0       	ldi	r27, 0x09	; 9
    3f6a:	cc 0c       	add	r12, r12
    3f6c:	dd 1c       	adc	r13, r13
    3f6e:	ee 1c       	adc	r14, r14
    3f70:	ff 1c       	adc	r15, r15
    3f72:	ba 95       	dec	r27
    3f74:	d1 f7       	brne	.-12     	; 0x3f6a <disk_write+0x2e>
    3f76:	b0 2d       	mov	r27, r0

  if (count == 1) {  /* Single block write */
    3f78:	01 30       	cpi	r16, 0x01	; 1
    3f7a:	11 05       	cpc	r17, r1
    3f7c:	99 f4       	brne	.+38     	; 0x3fa4 <disk_write+0x68>
    if ((send_cmd(CMD24, sector) == 0)  /* WRITE_BLOCK */
    3f7e:	b7 01       	movw	r22, r14
    3f80:	a6 01       	movw	r20, r12
    3f82:	88 e1       	ldi	r24, 0x18	; 24
    3f84:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <send_cmd>
    3f88:	81 11       	cpse	r24, r1
    3f8a:	2e c0       	rjmp	.+92     	; 0x3fe8 <disk_write+0xac>
      && xmit_datablock(buff, 0xFE))
    3f8c:	6e ef       	ldi	r22, 0xFE	; 254
    3f8e:	ce 01       	movw	r24, r28
    3f90:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <xmit_datablock>
    3f94:	31 e0       	ldi	r19, 0x01	; 1
    3f96:	20 e0       	ldi	r18, 0x00	; 0
    3f98:	89 2b       	or	r24, r25
    3f9a:	09 f0       	breq	.+2      	; 0x3f9e <disk_write+0x62>
    3f9c:	30 e0       	ldi	r19, 0x00	; 0
    3f9e:	03 2f       	mov	r16, r19
    3fa0:	12 2f       	mov	r17, r18
    3fa2:	22 c0       	rjmp	.+68     	; 0x3fe8 <disk_write+0xac>
      count = 0;
  }
  else {        /* Multiple block write */
    if (CardType & CT_SDC) send_cmd(ACMD23, count);
    3fa4:	86 70       	andi	r24, 0x06	; 6
    3fa6:	31 f0       	breq	.+12     	; 0x3fb4 <disk_write+0x78>
    3fa8:	a8 01       	movw	r20, r16
    3faa:	60 e0       	ldi	r22, 0x00	; 0
    3fac:	70 e0       	ldi	r23, 0x00	; 0
    3fae:	87 e9       	ldi	r24, 0x97	; 151
    3fb0:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <send_cmd>
    if (send_cmd(CMD25, sector) == 0) {  /* WRITE_MULTIPLE_BLOCK */
    3fb4:	b7 01       	movw	r22, r14
    3fb6:	a6 01       	movw	r20, r12
    3fb8:	89 e1       	ldi	r24, 0x19	; 25
    3fba:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <send_cmd>
    3fbe:	81 11       	cpse	r24, r1
    3fc0:	13 c0       	rjmp	.+38     	; 0x3fe8 <disk_write+0xac>
      do {
        if (!xmit_datablock(buff, 0xFC)) break;
    3fc2:	6c ef       	ldi	r22, 0xFC	; 252
    3fc4:	ce 01       	movw	r24, r28
    3fc6:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <xmit_datablock>
    3fca:	89 2b       	or	r24, r25
    3fcc:	21 f0       	breq	.+8      	; 0x3fd6 <disk_write+0x9a>
        buff += 512;
    3fce:	de 5f       	subi	r29, 0xFE	; 254
      } while (--count);
    3fd0:	01 50       	subi	r16, 0x01	; 1
    3fd2:	11 09       	sbc	r17, r1
    3fd4:	b1 f7       	brne	.-20     	; 0x3fc2 <disk_write+0x86>
      if (!xmit_datablock(0, 0xFD))  /* STOP_TRAN token */
    3fd6:	6d ef       	ldi	r22, 0xFD	; 253
    3fd8:	80 e0       	ldi	r24, 0x00	; 0
    3fda:	90 e0       	ldi	r25, 0x00	; 0
    3fdc:	0e 94 fa 1d 	call	0x3bf4	; 0x3bf4 <xmit_datablock>
    3fe0:	89 2b       	or	r24, r25
    3fe2:	11 f4       	brne	.+4      	; 0x3fe8 <disk_write+0xac>
        count = 1;
    3fe4:	01 e0       	ldi	r16, 0x01	; 1
    3fe6:	10 e0       	ldi	r17, 0x00	; 0
    }
  }
  deselect();
    3fe8:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <deselect>

  return count ? RES_ERROR : RES_OK;
    3fec:	81 e0       	ldi	r24, 0x01	; 1
    3fee:	01 2b       	or	r16, r17
    3ff0:	29 f4       	brne	.+10     	; 0x3ffc <disk_write+0xc0>
    3ff2:	80 e0       	ldi	r24, 0x00	; 0
    3ff4:	03 c0       	rjmp	.+6      	; 0x3ffc <disk_write+0xc0>
  const BYTE *buff,  /* Pointer to the data to be written */
  DWORD sector,    /* Start sector number (LBA) */
  UINT count      /* Sector count (1..128) */
)
{
  if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;
    3ff6:	83 e0       	ldi	r24, 0x03	; 3
    3ff8:	01 c0       	rjmp	.+2      	; 0x3ffc <disk_write+0xc0>
    3ffa:	83 e0       	ldi	r24, 0x03	; 3
    }
  }
  deselect();

  return count ? RES_ERROR : RES_OK;
}
    3ffc:	df 91       	pop	r29
    3ffe:	cf 91       	pop	r28
    4000:	1f 91       	pop	r17
    4002:	0f 91       	pop	r16
    4004:	ff 90       	pop	r15
    4006:	ef 90       	pop	r14
    4008:	df 90       	pop	r13
    400a:	cf 90       	pop	r12
    400c:	08 95       	ret

0000400e <disk_ioctl>:
DRESULT disk_ioctl (
  BYTE drv,    /* Physical drive nmuber (0) */
  BYTE ctrl,    /* Control code */
  void *buff    /* Buffer to send/receive control data */
)
{
    400e:	0f 93       	push	r16
    4010:	1f 93       	push	r17
    4012:	cf 93       	push	r28
    4014:	df 93       	push	r29
    4016:	cd b7       	in	r28, 0x3d	; 61
    4018:	de b7       	in	r29, 0x3e	; 62
    401a:	60 97       	sbiw	r28, 0x10	; 16
    401c:	cd bf       	out	0x3d, r28	; 61
    401e:	de bf       	out	0x3e, r29	; 62

DSTATUS disk_status (
  BYTE drv      /* Drive number (always 0) */
)
{
  if (drv) return STA_NOINIT;
    4020:	81 11       	cpse	r24, r1
    4022:	9c c0       	rjmp	.+312    	; 0x415c <disk_ioctl+0x14e>
  DRESULT res;
  BYTE n, csd[16];
  DWORD cs;


  if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;  /* Check if card is in the socket */
    4024:	80 91 00 20 	lds	r24, 0x2000	; 0x802000 <__DATA_REGION_ORIGIN__>
    4028:	80 fd       	sbrc	r24, 0
    402a:	9a c0       	rjmp	.+308    	; 0x4160 <disk_ioctl+0x152>
    402c:	8a 01       	movw	r16, r20

  res = RES_ERROR;
  switch (ctrl) {
    402e:	61 30       	cpi	r22, 0x01	; 1
    4030:	69 f0       	breq	.+26     	; 0x404c <disk_ioctl+0x3e>
    4032:	20 f0       	brcs	.+8      	; 0x403c <disk_ioctl+0x2e>
    4034:	63 30       	cpi	r22, 0x03	; 3
    4036:	09 f4       	brne	.+2      	; 0x403a <disk_ioctl+0x2c>
    4038:	7d c0       	rjmp	.+250    	; 0x4134 <disk_ioctl+0x126>
    403a:	87 c0       	rjmp	.+270    	; 0x414a <disk_ioctl+0x13c>
    case CTRL_SYNC :    /* Make sure that no pending write process */
      if (select()) res = RES_OK;
    403c:	0e 94 5b 1d 	call	0x3ab6	; 0x3ab6 <select>
    4040:	11 e0       	ldi	r17, 0x01	; 1
    4042:	89 2b       	or	r24, r25
    4044:	09 f4       	brne	.+2      	; 0x4048 <disk_ioctl+0x3a>
    4046:	86 c0       	rjmp	.+268    	; 0x4154 <disk_ioctl+0x146>
    4048:	10 e0       	ldi	r17, 0x00	; 0
    404a:	84 c0       	rjmp	.+264    	; 0x4154 <disk_ioctl+0x146>
      break;

    case GET_SECTOR_COUNT :  /* Get number of sectors on the disk (DWORD) */
      if ((send_cmd(CMD9, 0) == 0) && rcvr_datablock(csd, 16)) {
    404c:	40 e0       	ldi	r20, 0x00	; 0
    404e:	50 e0       	ldi	r21, 0x00	; 0
    4050:	ba 01       	movw	r22, r20
    4052:	89 e0       	ldi	r24, 0x09	; 9
    4054:	0e 94 7c 1d 	call	0x3af8	; 0x3af8 <send_cmd>
    4058:	81 11       	cpse	r24, r1
    405a:	79 c0       	rjmp	.+242    	; 0x414e <disk_ioctl+0x140>
    405c:	60 e1       	ldi	r22, 0x10	; 16
    405e:	70 e0       	ldi	r23, 0x00	; 0
    4060:	ce 01       	movw	r24, r28
    4062:	01 96       	adiw	r24, 0x01	; 1
    4064:	0e 94 37 1e 	call	0x3c6e	; 0x3c6e <rcvr_datablock>
    4068:	89 2b       	or	r24, r25
    406a:	09 f4       	brne	.+2      	; 0x406e <disk_ioctl+0x60>
    406c:	72 c0       	rjmp	.+228    	; 0x4152 <disk_ioctl+0x144>
        if ((csd[0] >> 6) == 1) {  /* SDC ver 2.00 */
    406e:	89 81       	ldd	r24, Y+1	; 0x01
    4070:	82 95       	swap	r24
    4072:	86 95       	lsr	r24
    4074:	86 95       	lsr	r24
    4076:	83 70       	andi	r24, 0x03	; 3
    4078:	81 30       	cpi	r24, 0x01	; 1
    407a:	31 f5       	brne	.+76     	; 0x40c8 <disk_ioctl+0xba>
          cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
          *(DWORD*)buff = cs << 10;
    407c:	29 85       	ldd	r18, Y+9	; 0x09
    407e:	30 e0       	ldi	r19, 0x00	; 0
    4080:	32 2f       	mov	r19, r18
    4082:	22 27       	eor	r18, r18
    4084:	8a 85       	ldd	r24, Y+10	; 0x0a
    4086:	28 0f       	add	r18, r24
    4088:	31 1d       	adc	r19, r1
    408a:	88 85       	ldd	r24, Y+8	; 0x08
    408c:	8f 73       	andi	r24, 0x3F	; 63
    408e:	90 e0       	ldi	r25, 0x00	; 0
    4090:	a0 e0       	ldi	r26, 0x00	; 0
    4092:	b0 e0       	ldi	r27, 0x00	; 0
    4094:	dc 01       	movw	r26, r24
    4096:	99 27       	eor	r25, r25
    4098:	88 27       	eor	r24, r24
    409a:	01 96       	adiw	r24, 0x01	; 1
    409c:	a1 1d       	adc	r26, r1
    409e:	b1 1d       	adc	r27, r1
    40a0:	82 0f       	add	r24, r18
    40a2:	93 1f       	adc	r25, r19
    40a4:	a1 1d       	adc	r26, r1
    40a6:	b1 1d       	adc	r27, r1
    40a8:	07 2e       	mov	r0, r23
    40aa:	7a e0       	ldi	r23, 0x0A	; 10
    40ac:	88 0f       	add	r24, r24
    40ae:	99 1f       	adc	r25, r25
    40b0:	aa 1f       	adc	r26, r26
    40b2:	bb 1f       	adc	r27, r27
    40b4:	7a 95       	dec	r23
    40b6:	d1 f7       	brne	.-12     	; 0x40ac <disk_ioctl+0x9e>
    40b8:	70 2d       	mov	r23, r0
    40ba:	f8 01       	movw	r30, r16
    40bc:	80 83       	st	Z, r24
    40be:	91 83       	std	Z+1, r25	; 0x01
    40c0:	a2 83       	std	Z+2, r26	; 0x02
    40c2:	b3 83       	std	Z+3, r27	; 0x03
        } else {          /* SDC ver 1.XX or MMC */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
          cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
          *(DWORD*)buff = cs << (n - 9);
        }
        res = RES_OK;
    40c4:	10 e0       	ldi	r17, 0x00	; 0
    40c6:	46 c0       	rjmp	.+140    	; 0x4154 <disk_ioctl+0x146>
          cs = csd[9] + ((WORD)csd[8] << 8) + ((DWORD)(csd[7] & 63) << 16) + 1;
          *(DWORD*)buff = cs << 10;
        } else {          /* SDC ver 1.XX or MMC */
          n = (csd[5] & 15) + ((csd[10] & 128) >> 7) + ((csd[9] & 3) << 1) + 2;
          cs = (csd[8] >> 6) + ((WORD)csd[7] << 2) + ((WORD)(csd[6] & 3) << 10) + 1;
          *(DWORD*)buff = cs << (n - 9);
    40c8:	89 85       	ldd	r24, Y+9	; 0x09
    40ca:	82 95       	swap	r24
    40cc:	86 95       	lsr	r24
    40ce:	86 95       	lsr	r24
    40d0:	83 70       	andi	r24, 0x03	; 3
    40d2:	28 85       	ldd	r18, Y+8	; 0x08
    40d4:	90 e0       	ldi	r25, 0x00	; 0
    40d6:	f4 e0       	ldi	r31, 0x04	; 4
    40d8:	2f 9f       	mul	r18, r31
    40da:	80 0d       	add	r24, r0
    40dc:	91 1d       	adc	r25, r1
    40de:	11 24       	eor	r1, r1
    40e0:	9c 01       	movw	r18, r24
    40e2:	2f 5f       	subi	r18, 0xFF	; 255
    40e4:	3f 4f       	sbci	r19, 0xFF	; 255
    40e6:	9f 81       	ldd	r25, Y+7	; 0x07
    40e8:	93 70       	andi	r25, 0x03	; 3
    40ea:	89 2f       	mov	r24, r25
    40ec:	90 e0       	ldi	r25, 0x00	; 0
    40ee:	98 2f       	mov	r25, r24
    40f0:	88 27       	eor	r24, r24
    40f2:	99 0f       	add	r25, r25
    40f4:	99 0f       	add	r25, r25
    40f6:	82 0f       	add	r24, r18
    40f8:	93 1f       	adc	r25, r19
    40fa:	a0 e0       	ldi	r26, 0x00	; 0
    40fc:	b0 e0       	ldi	r27, 0x00	; 0
    40fe:	2e 81       	ldd	r18, Y+6	; 0x06
    4100:	32 2f       	mov	r19, r18
    4102:	3f 70       	andi	r19, 0x0F	; 15
    4104:	2b 85       	ldd	r18, Y+11	; 0x0b
    4106:	22 1f       	adc	r18, r18
    4108:	22 27       	eor	r18, r18
    410a:	22 1f       	adc	r18, r18
    410c:	23 0f       	add	r18, r19
    410e:	3a 85       	ldd	r19, Y+10	; 0x0a
    4110:	33 70       	andi	r19, 0x03	; 3
    4112:	33 0f       	add	r19, r19
    4114:	23 0f       	add	r18, r19
    4116:	27 50       	subi	r18, 0x07	; 7
    4118:	04 c0       	rjmp	.+8      	; 0x4122 <disk_ioctl+0x114>
    411a:	88 0f       	add	r24, r24
    411c:	99 1f       	adc	r25, r25
    411e:	aa 1f       	adc	r26, r26
    4120:	bb 1f       	adc	r27, r27
    4122:	2a 95       	dec	r18
    4124:	d2 f7       	brpl	.-12     	; 0x411a <disk_ioctl+0x10c>
    4126:	f8 01       	movw	r30, r16
    4128:	80 83       	st	Z, r24
    412a:	91 83       	std	Z+1, r25	; 0x01
    412c:	a2 83       	std	Z+2, r26	; 0x02
    412e:	b3 83       	std	Z+3, r27	; 0x03
        }
        res = RES_OK;
    4130:	10 e0       	ldi	r17, 0x00	; 0
    4132:	10 c0       	rjmp	.+32     	; 0x4154 <disk_ioctl+0x146>
      }
      break;

    case GET_BLOCK_SIZE :  /* Get erase block size in unit of sector (DWORD) */
      *(DWORD*)buff = 128;
    4134:	80 e8       	ldi	r24, 0x80	; 128
    4136:	90 e0       	ldi	r25, 0x00	; 0
    4138:	a0 e0       	ldi	r26, 0x00	; 0
    413a:	b0 e0       	ldi	r27, 0x00	; 0
    413c:	fa 01       	movw	r30, r20
    413e:	80 83       	st	Z, r24
    4140:	91 83       	std	Z+1, r25	; 0x01
    4142:	a2 83       	std	Z+2, r26	; 0x02
    4144:	b3 83       	std	Z+3, r27	; 0x03
      res = RES_OK;
    4146:	10 e0       	ldi	r17, 0x00	; 0
      break;
    4148:	05 c0       	rjmp	.+10     	; 0x4154 <disk_ioctl+0x146>

    default:
      res = RES_PARERR;
    414a:	14 e0       	ldi	r17, 0x04	; 4
    414c:	03 c0       	rjmp	.+6      	; 0x4154 <disk_ioctl+0x146>
  DWORD cs;


  if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;  /* Check if card is in the socket */

  res = RES_ERROR;
    414e:	11 e0       	ldi	r17, 0x01	; 1
    4150:	01 c0       	rjmp	.+2      	; 0x4154 <disk_ioctl+0x146>
    4152:	11 e0       	ldi	r17, 0x01	; 1

    default:
      res = RES_PARERR;
  }

  deselect();
    4154:	0e 94 0b 1d 	call	0x3a16	; 0x3a16 <deselect>

  return res;
    4158:	81 2f       	mov	r24, r17
    415a:	03 c0       	rjmp	.+6      	; 0x4162 <disk_ioctl+0x154>
  DRESULT res;
  BYTE n, csd[16];
  DWORD cs;


  if (disk_status(drv) & STA_NOINIT) return RES_NOTRDY;  /* Check if card is in the socket */
    415c:	83 e0       	ldi	r24, 0x03	; 3
    415e:	01 c0       	rjmp	.+2      	; 0x4162 <disk_ioctl+0x154>
    4160:	83 e0       	ldi	r24, 0x03	; 3
  }

  deselect();

  return res;
}
    4162:	60 96       	adiw	r28, 0x10	; 16
    4164:	cd bf       	out	0x3d, r28	; 61
    4166:	de bf       	out	0x3e, r29	; 62
    4168:	df 91       	pop	r29
    416a:	cf 91       	pop	r28
    416c:	1f 91       	pop	r17
    416e:	0f 91       	pop	r16
    4170:	08 95       	ret

00004172 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    4172:	0f 93       	push	r16
    4174:	cf 93       	push	r28
    4176:	df 93       	push	r29
    4178:	1f 92       	push	r1
    417a:	cd b7       	in	r28, 0x3d	; 61
    417c:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    417e:	2f b7       	in	r18, 0x3f	; 63
    4180:	29 83       	std	Y+1, r18	; 0x01
    4182:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    4184:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    4186:	fc 01       	movw	r30, r24
    4188:	08 ed       	ldi	r16, 0xD8	; 216
    418a:	04 bf       	out	0x34, r16	; 52
    418c:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    418e:	89 81       	ldd	r24, Y+1	; 0x01
    4190:	8f bf       	out	0x3f, r24	; 63
#endif
}
    4192:	0f 90       	pop	r0
    4194:	df 91       	pop	r29
    4196:	cf 91       	pop	r28
    4198:	0f 91       	pop	r16
    419a:	08 95       	ret

0000419c <ClockSrc_Sel>:



uint8_t ClockSrc_Sel( CLK_SCLKSEL_t clockSource )
{
    419c:	0f 93       	push	r16
    419e:	1f 93       	push	r17
    41a0:	cf 93       	push	r28
    41a2:	c8 2f       	mov	r28, r24
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    41a4:	00 e4       	ldi	r16, 0x40	; 64
    41a6:	10 e0       	ldi	r17, 0x00	; 0
    41a8:	f8 01       	movw	r30, r16
    41aa:	60 81       	ld	r22, Z
	CCPWrite( &CLK.CTRL, clkCtrl );
    41ac:	68 7f       	andi	r22, 0xF8	; 248
    41ae:	68 2b       	or	r22, r24
    41b0:	80 e4       	ldi	r24, 0x40	; 64
    41b2:	90 e0       	ldi	r25, 0x00	; 0
    41b4:	0e 94 b9 20 	call	0x4172	; 0x4172 <CCPWrite>
	clkCtrl = ( CLK.CTRL & clockSource );
    41b8:	f8 01       	movw	r30, r16
    41ba:	80 81       	ld	r24, Z
	return clkCtrl;
}
    41bc:	8c 23       	and	r24, r28
    41be:	cf 91       	pop	r28
    41c0:	1f 91       	pop	r17
    41c2:	0f 91       	pop	r16
    41c4:	08 95       	ret

000041c6 <set_32MHz_clk>:


void set_32MHz_clk(void)
{
	
	OSC.CTRL |= OSC_RC32MEN_bm;
    41c6:	e0 e5       	ldi	r30, 0x50	; 80
    41c8:	f0 e0       	ldi	r31, 0x00	; 0
    41ca:	80 81       	ld	r24, Z
    41cc:	82 60       	ori	r24, 0x02	; 2
    41ce:	80 83       	st	Z, r24
	while((OSC.STATUS & OSC_RC32MRDY_bm)==0);
    41d0:	81 81       	ldd	r24, Z+1	; 0x01
    41d2:	81 ff       	sbrs	r24, 1
    41d4:	fd cf       	rjmp	.-6      	; 0x41d0 <set_32MHz_clk+0xa>
	ClockSrc_Sel(CLK_SCLKSEL_RC32M_gc);
    41d6:	81 e0       	ldi	r24, 0x01	; 1
    41d8:	0e 94 ce 20 	call	0x419c	; 0x419c <ClockSrc_Sel>
    41dc:	08 95       	ret

000041de <uart_serial_init>:
		UART_SERIAL.DATA = '\0';
	}
	
	while((UART_SERIAL.STATUS & USART_DREIF_bm)==0); //wait before return
	return;
}
    41de:	10 92 e1 45 	sts	0x45E1, r1	; 0x8045e1 <tx_ptr>
    41e2:	10 92 e2 45 	sts	0x45E2, r1	; 0x8045e2 <tx_ptr+0x1>
    41e6:	81 e0       	ldi	r24, 0x01	; 1
    41e8:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <complete_flg>
    41ec:	84 e0       	ldi	r24, 0x04	; 4
    41ee:	80 93 42 06 	sts	0x0642, r24	; 0x800642 <__TEXT_REGION_LENGTH__+0x700642>
    41f2:	88 e0       	ldi	r24, 0x08	; 8
    41f4:	80 93 45 06 	sts	0x0645, r24	; 0x800645 <__TEXT_REGION_LENGTH__+0x700645>
    41f8:	80 93 41 06 	sts	0x0641, r24	; 0x800641 <__TEXT_REGION_LENGTH__+0x700641>
    41fc:	e0 ea       	ldi	r30, 0xA0	; 160
    41fe:	f8 e0       	ldi	r31, 0x08	; 8
    4200:	83 e0       	ldi	r24, 0x03	; 3
    4202:	85 83       	std	Z+5, r24	; 0x05
    4204:	87 ed       	ldi	r24, 0xD7	; 215
    4206:	86 83       	std	Z+6, r24	; 0x06
    4208:	83 e9       	ldi	r24, 0x93	; 147
    420a:	87 83       	std	Z+7, r24	; 0x07
    420c:	84 81       	ldd	r24, Z+4	; 0x04
    420e:	84 60       	ori	r24, 0x04	; 4
    4210:	84 83       	std	Z+4, r24	; 0x04
    4212:	80 e1       	ldi	r24, 0x10	; 16
    4214:	83 83       	std	Z+3, r24	; 0x03
    4216:	84 81       	ldd	r24, Z+4	; 0x04
    4218:	88 61       	ori	r24, 0x18	; 24
    421a:	84 83       	std	Z+4, r24	; 0x04
    421c:	10 92 39 43 	sts	0x4339, r1	; 0x804339 <SD_databuff_head>
    4220:	10 92 3a 43 	sts	0x433A, r1	; 0x80433a <SD_databuff_head+0x1>
    4224:	10 92 37 43 	sts	0x4337, r1	; 0x804337 <SD_databuff_tail>
    4228:	10 92 38 43 	sts	0x4338, r1	; 0x804338 <SD_databuff_tail+0x1>
    422c:	10 92 83 45 	sts	0x4583, r1	; 0x804583 <new_cmd_index>
    4230:	10 92 46 43 	sts	0x4346, r1	; 0x804346 <new_cmd_flg>
    4234:	08 95       	ret

00004236 <uart_bluetooth_init>:
    4236:	10 92 e1 45 	sts	0x45E1, r1	; 0x8045e1 <tx_ptr>
    423a:	10 92 e2 45 	sts	0x45E2, r1	; 0x8045e2 <tx_ptr+0x1>
    423e:	81 e0       	ldi	r24, 0x01	; 1
    4240:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <complete_flg>
    4244:	8f e0       	ldi	r24, 0x0F	; 15
    4246:	80 93 a2 06 	sts	0x06A2, r24	; 0x8006a2 <__TEXT_REGION_LENGTH__+0x7006a2>
    424a:	e0 eb       	ldi	r30, 0xB0	; 176
    424c:	f6 e0       	ldi	r31, 0x06	; 6
    424e:	80 81       	ld	r24, Z
    4250:	87 7c       	andi	r24, 0xC7	; 199
    4252:	80 83       	st	Z, r24
    4254:	e1 eb       	ldi	r30, 0xB1	; 177
    4256:	f6 e0       	ldi	r31, 0x06	; 6
    4258:	80 81       	ld	r24, Z
    425a:	87 7c       	andi	r24, 0xC7	; 199
    425c:	80 83       	st	Z, r24
    425e:	e2 eb       	ldi	r30, 0xB2	; 178
    4260:	f6 e0       	ldi	r31, 0x06	; 6
    4262:	80 81       	ld	r24, Z
    4264:	87 7c       	andi	r24, 0xC7	; 199
    4266:	80 83       	st	Z, r24
    4268:	e3 eb       	ldi	r30, 0xB3	; 179
    426a:	f6 e0       	ldi	r31, 0x06	; 6
    426c:	80 81       	ld	r24, Z
    426e:	87 7c       	andi	r24, 0xC7	; 199
    4270:	80 83       	st	Z, r24
    4272:	84 e0       	ldi	r24, 0x04	; 4
    4274:	80 93 82 06 	sts	0x0682, r24	; 0x800682 <__TEXT_REGION_LENGTH__+0x700682>
    4278:	88 e0       	ldi	r24, 0x08	; 8
    427a:	80 93 85 06 	sts	0x0685, r24	; 0x800685 <__TEXT_REGION_LENGTH__+0x700685>
    427e:	80 93 81 06 	sts	0x0681, r24	; 0x800681 <__TEXT_REGION_LENGTH__+0x700681>
    4282:	e0 ea       	ldi	r30, 0xA0	; 160
    4284:	fa e0       	ldi	r31, 0x0A	; 10
    4286:	83 e0       	ldi	r24, 0x03	; 3
    4288:	85 83       	std	Z+5, r24	; 0x05
    428a:	87 e3       	ldi	r24, 0x37	; 55
    428c:	86 83       	std	Z+6, r24	; 0x06
    428e:	84 eb       	ldi	r24, 0xB4	; 180
    4290:	87 83       	std	Z+7, r24	; 0x07
    4292:	84 81       	ldd	r24, Z+4	; 0x04
    4294:	84 60       	ori	r24, 0x04	; 4
    4296:	84 83       	std	Z+4, r24	; 0x04
    4298:	80 e1       	ldi	r24, 0x10	; 16
    429a:	83 83       	std	Z+3, r24	; 0x03
    429c:	84 81       	ldd	r24, Z+4	; 0x04
    429e:	88 61       	ori	r24, 0x18	; 24
    42a0:	84 83       	std	Z+4, r24	; 0x04
    42a2:	10 92 df 45 	sts	0x45DF, r1	; 0x8045df <BL_databuff_head>
    42a6:	10 92 e0 45 	sts	0x45E0, r1	; 0x8045e0 <BL_databuff_head+0x1>
    42aa:	10 92 84 45 	sts	0x4584, r1	; 0x804584 <BL_databuff_tail>
    42ae:	10 92 85 45 	sts	0x4585, r1	; 0x804585 <BL_databuff_tail+0x1>
    42b2:	10 92 34 43 	sts	0x4334, r1	; 0x804334 <new_bl_cmd_index>
    42b6:	10 92 e2 27 	sts	0x27E2, r1	; 0x8027e2 <new_bl_cmd_flg>
    42ba:	08 95       	ret

000042bc <uart_send_serial_str>:



void uart_send_serial_str(uint8_t* buff)
{
    42bc:	cf 93       	push	r28
    42be:	df 93       	push	r29
    42c0:	dc 01       	movw	r26, r24
	int i = 0;
	do 
	{
		while((UART_SERIAL.STATUS & USART_DREIF_bm)==0); //complete previous transmission
    42c2:	e0 ea       	ldi	r30, 0xA0	; 160
    42c4:	f8 e0       	ldi	r31, 0x08	; 8
    42c6:	91 81       	ldd	r25, Z+1	; 0x01
    42c8:	95 ff       	sbrs	r25, 5
    42ca:	fd cf       	rjmp	.-6      	; 0x42c6 <uart_send_serial_str+0xa>
    42cc:	ed 01       	movw	r28, r26
		UART_SERIAL.DATA = buff[i];
    42ce:	8d 91       	ld	r24, X+
    42d0:	80 83       	st	Z, r24
	} while (buff[i++] != '\0');
    42d2:	88 81       	ld	r24, Y
    42d4:	81 11       	cpse	r24, r1
    42d6:	f7 cf       	rjmp	.-18     	; 0x42c6 <uart_send_serial_str+0xa>
	
	while((UART_SERIAL.STATUS & USART_DREIF_bm)==0); //wait before return
    42d8:	e0 ea       	ldi	r30, 0xA0	; 160
    42da:	f8 e0       	ldi	r31, 0x08	; 8
    42dc:	81 81       	ldd	r24, Z+1	; 0x01
    42de:	85 ff       	sbrs	r24, 5
    42e0:	fd cf       	rjmp	.-6      	; 0x42dc <uart_send_serial_str+0x20>
	return;
}
    42e2:	df 91       	pop	r29
    42e4:	cf 91       	pop	r28
    42e6:	08 95       	ret

000042e8 <uart_send_char_serial>:



void uart_send_char_serial(uint8_t data){
	while((UART_SERIAL.STATUS & USART_DREIF_bm)==0); //complete previous transmission
    42e8:	e0 ea       	ldi	r30, 0xA0	; 160
    42ea:	f8 e0       	ldi	r31, 0x08	; 8
    42ec:	91 81       	ldd	r25, Z+1	; 0x01
    42ee:	95 ff       	sbrs	r25, 5
    42f0:	fd cf       	rjmp	.-6      	; 0x42ec <uart_send_char_serial+0x4>
	UART_SERIAL.DATA = data;
    42f2:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
    42f6:	08 95       	ret

000042f8 <uart_send_BT>:




void uart_send_BT(uint8_t* buff, int send_len){
	while(send_len > 0){
    42f8:	16 16       	cp	r1, r22
    42fa:	17 06       	cpc	r1, r23
    42fc:	6c f4       	brge	.+26     	; 0x4318 <uart_send_BT+0x20>
    42fe:	dc 01       	movw	r26, r24
    4300:	68 0f       	add	r22, r24
    4302:	79 1f       	adc	r23, r25
		while((UART_BT.STATUS & USART_DREIF_bm)==0); //complete previous transmission
    4304:	e0 ea       	ldi	r30, 0xA0	; 160
    4306:	fa e0       	ldi	r31, 0x0A	; 10
    4308:	91 81       	ldd	r25, Z+1	; 0x01
    430a:	95 ff       	sbrs	r25, 5
    430c:	fd cf       	rjmp	.-6      	; 0x4308 <uart_send_BT+0x10>
		UART_BT.DATA = *(buff++);
    430e:	9d 91       	ld	r25, X+
    4310:	90 83       	st	Z, r25




void uart_send_BT(uint8_t* buff, int send_len){
	while(send_len > 0){
    4312:	a6 17       	cp	r26, r22
    4314:	b7 07       	cpc	r27, r23
    4316:	c1 f7       	brne	.-16     	; 0x4308 <uart_send_BT+0x10>
    4318:	08 95       	ret

0000431a <uart_send_char_BT>:




void uart_send_char_BT(uint8_t data){
	while((UART_BT.STATUS & USART_DREIF_bm)==0); //complete previous transmission
    431a:	e0 ea       	ldi	r30, 0xA0	; 160
    431c:	fa e0       	ldi	r31, 0x0A	; 10
    431e:	91 81       	ldd	r25, Z+1	; 0x01
    4320:	95 ff       	sbrs	r25, 5
    4322:	fd cf       	rjmp	.-6      	; 0x431e <uart_send_char_BT+0x4>
	UART_BT.DATA = data;
    4324:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
    4328:	08 95       	ret

0000432a <__vector_59>:




//UART_BL ISR --- Not using it -- Tx interrupt is turned off
ISR(USARTE0_DRE_vect){
    432a:	1f 92       	push	r1
    432c:	0f 92       	push	r0
    432e:	0f b6       	in	r0, 0x3f	; 63
    4330:	0f 92       	push	r0
    4332:	11 24       	eor	r1, r1
    4334:	0b b6       	in	r0, 0x3b	; 59
    4336:	0f 92       	push	r0
    4338:	2f 93       	push	r18
    433a:	3f 93       	push	r19
    433c:	8f 93       	push	r24
    433e:	9f 93       	push	r25
    4340:	ef 93       	push	r30
    4342:	ff 93       	push	r31
	uint8_t CTRLA_temp1;
	if (tx_ptr == BUFFSIZE)
    4344:	80 91 e1 45 	lds	r24, 0x45E1	; 0x8045e1 <tx_ptr>
    4348:	90 91 e2 45 	lds	r25, 0x45E2	; 0x8045e2 <tx_ptr+0x1>
    434c:	8e 31       	cpi	r24, 0x1E	; 30
    434e:	91 05       	cpc	r25, r1
    4350:	49 f4       	brne	.+18     	; 0x4364 <__vector_59+0x3a>
	{
		complete_flg = true;
    4352:	81 e0       	ldi	r24, 0x01	; 1
    4354:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <complete_flg>
		CTRLA_temp1 = UART_BT.CTRLA;
    4358:	e0 ea       	ldi	r30, 0xA0	; 160
    435a:	fa e0       	ldi	r31, 0x0A	; 10
    435c:	83 81       	ldd	r24, Z+3	; 0x03
		CTRLA_temp1 = (CTRLA_temp1 & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    435e:	8c 7f       	andi	r24, 0xFC	; 252
		UART_BT.CTRLA = CTRLA_temp1;
    4360:	83 83       	std	Z+3, r24	; 0x03
    4362:	0d c0       	rjmp	.+26     	; 0x437e <__vector_59+0x54>
	}else{
		UART_BT.DATA = UART_buff[tx_ptr++];
    4364:	9c 01       	movw	r18, r24
    4366:	2f 5f       	subi	r18, 0xFF	; 255
    4368:	3f 4f       	sbci	r19, 0xFF	; 255
    436a:	20 93 e1 45 	sts	0x45E1, r18	; 0x8045e1 <tx_ptr>
    436e:	30 93 e2 45 	sts	0x45E2, r19	; 0x8045e2 <tx_ptr+0x1>
    4372:	fc 01       	movw	r30, r24
    4374:	ef 5f       	subi	r30, 0xFF	; 255
    4376:	ff 4d       	sbci	r31, 0xDF	; 223
    4378:	80 81       	ld	r24, Z
    437a:	80 93 a0 0a 	sts	0x0AA0, r24	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
	}
}
    437e:	ff 91       	pop	r31
    4380:	ef 91       	pop	r30
    4382:	9f 91       	pop	r25
    4384:	8f 91       	pop	r24
    4386:	3f 91       	pop	r19
    4388:	2f 91       	pop	r18
    438a:	0f 90       	pop	r0
    438c:	0b be       	out	0x3b, r0	; 59
    438e:	0f 90       	pop	r0
    4390:	0f be       	out	0x3f, r0	; 63
    4392:	0f 90       	pop	r0
    4394:	1f 90       	pop	r1
    4396:	18 95       	reti

00004398 <__vector_26>:

//UART_SERIAL ISR --- Not using it-- Tx interrupt is turned off
ISR(USARTC0_DRE_vect){
    4398:	1f 92       	push	r1
    439a:	0f 92       	push	r0
    439c:	0f b6       	in	r0, 0x3f	; 63
    439e:	0f 92       	push	r0
    43a0:	11 24       	eor	r1, r1
    43a2:	0b b6       	in	r0, 0x3b	; 59
    43a4:	0f 92       	push	r0
    43a6:	2f 93       	push	r18
    43a8:	3f 93       	push	r19
    43aa:	8f 93       	push	r24
    43ac:	9f 93       	push	r25
    43ae:	ef 93       	push	r30
    43b0:	ff 93       	push	r31
	uint8_t CTRLA_temp1;
	if (tx_ptr == BUFFSIZE)
    43b2:	80 91 e1 45 	lds	r24, 0x45E1	; 0x8045e1 <tx_ptr>
    43b6:	90 91 e2 45 	lds	r25, 0x45E2	; 0x8045e2 <tx_ptr+0x1>
    43ba:	8e 31       	cpi	r24, 0x1E	; 30
    43bc:	91 05       	cpc	r25, r1
    43be:	49 f4       	brne	.+18     	; 0x43d2 <__vector_26+0x3a>
	{
		complete_flg = true;
    43c0:	81 e0       	ldi	r24, 0x01	; 1
    43c2:	80 93 e4 45 	sts	0x45E4, r24	; 0x8045e4 <complete_flg>
		CTRLA_temp1 = UART_SERIAL.CTRLA;
    43c6:	e0 ea       	ldi	r30, 0xA0	; 160
    43c8:	f8 e0       	ldi	r31, 0x08	; 8
    43ca:	83 81       	ldd	r24, Z+3	; 0x03
		CTRLA_temp1 = (CTRLA_temp1 & ~USART_DREINTLVL_gm) | USART_DREINTLVL_OFF_gc;
    43cc:	8c 7f       	andi	r24, 0xFC	; 252
		UART_SERIAL.CTRLA = CTRLA_temp1;
    43ce:	83 83       	std	Z+3, r24	; 0x03
    43d0:	0d c0       	rjmp	.+26     	; 0x43ec <__vector_26+0x54>
		
	}else{
		UART_SERIAL.DATA = UART_buff[tx_ptr++];
    43d2:	9c 01       	movw	r18, r24
    43d4:	2f 5f       	subi	r18, 0xFF	; 255
    43d6:	3f 4f       	sbci	r19, 0xFF	; 255
    43d8:	20 93 e1 45 	sts	0x45E1, r18	; 0x8045e1 <tx_ptr>
    43dc:	30 93 e2 45 	sts	0x45E2, r19	; 0x8045e2 <tx_ptr+0x1>
    43e0:	fc 01       	movw	r30, r24
    43e2:	ef 5f       	subi	r30, 0xFF	; 255
    43e4:	ff 4d       	sbci	r31, 0xDF	; 223
    43e6:	80 81       	ld	r24, Z
    43e8:	80 93 a0 08 	sts	0x08A0, r24	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	}
}
    43ec:	ff 91       	pop	r31
    43ee:	ef 91       	pop	r30
    43f0:	9f 91       	pop	r25
    43f2:	8f 91       	pop	r24
    43f4:	3f 91       	pop	r19
    43f6:	2f 91       	pop	r18
    43f8:	0f 90       	pop	r0
    43fa:	0b be       	out	0x3b, r0	; 59
    43fc:	0f 90       	pop	r0
    43fe:	0f be       	out	0x3f, r0	; 63
    4400:	0f 90       	pop	r0
    4402:	1f 90       	pop	r1
    4404:	18 95       	reti

00004406 <__vector_25>:

//UART_SERIAL ISR for rx interrupt 
ISR(USARTC0_RXC_vect){
    4406:	1f 92       	push	r1
    4408:	0f 92       	push	r0
    440a:	0f b6       	in	r0, 0x3f	; 63
    440c:	0f 92       	push	r0
    440e:	11 24       	eor	r1, r1
    4410:	0b b6       	in	r0, 0x3b	; 59
    4412:	0f 92       	push	r0
    4414:	8f 93       	push	r24
    4416:	9f 93       	push	r25
    4418:	ef 93       	push	r30
    441a:	ff 93       	push	r31
	uint8_t c = UART_SERIAL.DATA;
    441c:	80 91 a0 08 	lds	r24, 0x08A0	; 0x8008a0 <__TEXT_REGION_LENGTH__+0x7008a0>
	if (c=='\r')
    4420:	8d 30       	cpi	r24, 0x0D	; 13
    4422:	21 f4       	brne	.+8      	; 0x442c <__vector_25+0x26>
	{
		new_cmd_flg = true;
    4424:	81 e0       	ldi	r24, 0x01	; 1
    4426:	80 93 46 43 	sts	0x4346, r24	; 0x804346 <new_cmd_flg>
    442a:	10 c0       	rjmp	.+32     	; 0x444c <__vector_25+0x46>
	} 
	else
	{
		new_cmd[new_cmd_index++] = c;
    442c:	e0 91 83 45 	lds	r30, 0x4583	; 0x804583 <new_cmd_index>
    4430:	91 e0       	ldi	r25, 0x01	; 1
    4432:	9e 0f       	add	r25, r30
    4434:	90 93 83 45 	sts	0x4583, r25	; 0x804583 <new_cmd_index>
    4438:	f0 e0       	ldi	r31, 0x00	; 0
    443a:	ea 57       	subi	r30, 0x7A	; 122
    443c:	fa 4b       	sbci	r31, 0xBA	; 186
    443e:	80 83       	st	Z, r24
		new_cmd[new_cmd_index] = '\0';
    4440:	e0 91 83 45 	lds	r30, 0x4583	; 0x804583 <new_cmd_index>
    4444:	f0 e0       	ldi	r31, 0x00	; 0
    4446:	ea 57       	subi	r30, 0x7A	; 122
    4448:	fa 4b       	sbci	r31, 0xBA	; 186
    444a:	10 82       	st	Z, r1
	}
	
	if (new_cmd_index == (COMMAND_WIDTH_MAX -1))
    444c:	80 91 83 45 	lds	r24, 0x4583	; 0x804583 <new_cmd_index>
    4450:	83 31       	cpi	r24, 0x13	; 19
    4452:	11 f4       	brne	.+4      	; 0x4458 <__vector_25+0x52>
	{
		//it is an error but this line is to make sure always last character in buffer is '\0'
		new_cmd_index = 0; 
    4454:	10 92 83 45 	sts	0x4583, r1	; 0x804583 <new_cmd_index>
	}
}
    4458:	ff 91       	pop	r31
    445a:	ef 91       	pop	r30
    445c:	9f 91       	pop	r25
    445e:	8f 91       	pop	r24
    4460:	0f 90       	pop	r0
    4462:	0b be       	out	0x3b, r0	; 59
    4464:	0f 90       	pop	r0
    4466:	0f be       	out	0x3f, r0	; 63
    4468:	0f 90       	pop	r0
    446a:	1f 90       	pop	r1
    446c:	18 95       	reti

0000446e <__vector_58>:

//UART_BL ISR for rx interrupt
ISR(USARTE0_RXC_vect){
    446e:	1f 92       	push	r1
    4470:	0f 92       	push	r0
    4472:	0f b6       	in	r0, 0x3f	; 63
    4474:	0f 92       	push	r0
    4476:	11 24       	eor	r1, r1
    4478:	0b b6       	in	r0, 0x3b	; 59
    447a:	0f 92       	push	r0
    447c:	8f 93       	push	r24
    447e:	9f 93       	push	r25
    4480:	ef 93       	push	r30
    4482:	ff 93       	push	r31
	uint8_t c = UART_BT.DATA;
    4484:	80 91 a0 0a 	lds	r24, 0x0AA0	; 0x800aa0 <__TEXT_REGION_LENGTH__+0x700aa0>
	if (c=='\r')
    4488:	8d 30       	cpi	r24, 0x0D	; 13
    448a:	21 f4       	brne	.+8      	; 0x4494 <__vector_58+0x26>
	{
		new_bl_cmd_flg = true;
    448c:	81 e0       	ldi	r24, 0x01	; 1
    448e:	80 93 e2 27 	sts	0x27E2, r24	; 0x8027e2 <new_bl_cmd_flg>
    4492:	10 c0       	rjmp	.+32     	; 0x44b4 <__vector_58+0x46>
	}
	else
	{
		new_bl_cmd[new_bl_cmd_index++] = c;
    4494:	e0 91 34 43 	lds	r30, 0x4334	; 0x804334 <new_bl_cmd_index>
    4498:	91 e0       	ldi	r25, 0x01	; 1
    449a:	9e 0f       	add	r25, r30
    449c:	90 93 34 43 	sts	0x4334, r25	; 0x804334 <new_bl_cmd_index>
    44a0:	f0 e0       	ldi	r31, 0x00	; 0
    44a2:	e1 59       	subi	r30, 0x91	; 145
    44a4:	fa 4b       	sbci	r31, 0xBA	; 186
    44a6:	80 83       	st	Z, r24
		new_bl_cmd[new_bl_cmd_index] = '\0';
    44a8:	e0 91 34 43 	lds	r30, 0x4334	; 0x804334 <new_bl_cmd_index>
    44ac:	f0 e0       	ldi	r31, 0x00	; 0
    44ae:	e1 59       	subi	r30, 0x91	; 145
    44b0:	fa 4b       	sbci	r31, 0xBA	; 186
    44b2:	10 82       	st	Z, r1
	}
	
	if (new_bl_cmd_index == (COMMAND_WIDTH_MAX -1))
    44b4:	80 91 34 43 	lds	r24, 0x4334	; 0x804334 <new_bl_cmd_index>
    44b8:	83 31       	cpi	r24, 0x13	; 19
    44ba:	11 f4       	brne	.+4      	; 0x44c0 <__vector_58+0x52>
	{
		//it is an error but this line is to make sure always last character in buffer is '\0'
		new_bl_cmd_index = 0;
    44bc:	10 92 34 43 	sts	0x4334, r1	; 0x804334 <new_bl_cmd_index>
	}
    44c0:	ff 91       	pop	r31
    44c2:	ef 91       	pop	r30
    44c4:	9f 91       	pop	r25
    44c6:	8f 91       	pop	r24
    44c8:	0f 90       	pop	r0
    44ca:	0b be       	out	0x3b, r0	; 59
    44cc:	0f 90       	pop	r0
    44ce:	0f be       	out	0x3f, r0	; 63
    44d0:	0f 90       	pop	r0
    44d2:	1f 90       	pop	r1
    44d4:	18 95       	reti

000044d6 <__subsf3>:
    44d6:	50 58       	subi	r21, 0x80	; 128

000044d8 <__addsf3>:
    44d8:	bb 27       	eor	r27, r27
    44da:	aa 27       	eor	r26, r26
    44dc:	0e 94 83 22 	call	0x4506	; 0x4506 <__addsf3x>
    44e0:	0c 94 18 23 	jmp	0x4630	; 0x4630 <__fp_round>
    44e4:	0e 94 0a 23 	call	0x4614	; 0x4614 <__fp_pscA>
    44e8:	38 f0       	brcs	.+14     	; 0x44f8 <__addsf3+0x20>
    44ea:	0e 94 11 23 	call	0x4622	; 0x4622 <__fp_pscB>
    44ee:	20 f0       	brcs	.+8      	; 0x44f8 <__addsf3+0x20>
    44f0:	39 f4       	brne	.+14     	; 0x4500 <__addsf3+0x28>
    44f2:	9f 3f       	cpi	r25, 0xFF	; 255
    44f4:	19 f4       	brne	.+6      	; 0x44fc <__addsf3+0x24>
    44f6:	26 f4       	brtc	.+8      	; 0x4500 <__addsf3+0x28>
    44f8:	0c 94 07 23 	jmp	0x460e	; 0x460e <__fp_nan>
    44fc:	0e f4       	brtc	.+2      	; 0x4500 <__addsf3+0x28>
    44fe:	e0 95       	com	r30
    4500:	e7 fb       	bst	r30, 7
    4502:	0c 94 01 23 	jmp	0x4602	; 0x4602 <__fp_inf>

00004506 <__addsf3x>:
    4506:	e9 2f       	mov	r30, r25
    4508:	0e 94 29 23 	call	0x4652	; 0x4652 <__fp_split3>
    450c:	58 f3       	brcs	.-42     	; 0x44e4 <__addsf3+0xc>
    450e:	ba 17       	cp	r27, r26
    4510:	62 07       	cpc	r22, r18
    4512:	73 07       	cpc	r23, r19
    4514:	84 07       	cpc	r24, r20
    4516:	95 07       	cpc	r25, r21
    4518:	20 f0       	brcs	.+8      	; 0x4522 <__addsf3x+0x1c>
    451a:	79 f4       	brne	.+30     	; 0x453a <__addsf3x+0x34>
    451c:	a6 f5       	brtc	.+104    	; 0x4586 <__addsf3x+0x80>
    451e:	0c 94 4b 23 	jmp	0x4696	; 0x4696 <__fp_zero>
    4522:	0e f4       	brtc	.+2      	; 0x4526 <__addsf3x+0x20>
    4524:	e0 95       	com	r30
    4526:	0b 2e       	mov	r0, r27
    4528:	ba 2f       	mov	r27, r26
    452a:	a0 2d       	mov	r26, r0
    452c:	0b 01       	movw	r0, r22
    452e:	b9 01       	movw	r22, r18
    4530:	90 01       	movw	r18, r0
    4532:	0c 01       	movw	r0, r24
    4534:	ca 01       	movw	r24, r20
    4536:	a0 01       	movw	r20, r0
    4538:	11 24       	eor	r1, r1
    453a:	ff 27       	eor	r31, r31
    453c:	59 1b       	sub	r21, r25
    453e:	99 f0       	breq	.+38     	; 0x4566 <__addsf3x+0x60>
    4540:	59 3f       	cpi	r21, 0xF9	; 249
    4542:	50 f4       	brcc	.+20     	; 0x4558 <__addsf3x+0x52>
    4544:	50 3e       	cpi	r21, 0xE0	; 224
    4546:	68 f1       	brcs	.+90     	; 0x45a2 <__addsf3x+0x9c>
    4548:	1a 16       	cp	r1, r26
    454a:	f0 40       	sbci	r31, 0x00	; 0
    454c:	a2 2f       	mov	r26, r18
    454e:	23 2f       	mov	r18, r19
    4550:	34 2f       	mov	r19, r20
    4552:	44 27       	eor	r20, r20
    4554:	58 5f       	subi	r21, 0xF8	; 248
    4556:	f3 cf       	rjmp	.-26     	; 0x453e <__addsf3x+0x38>
    4558:	46 95       	lsr	r20
    455a:	37 95       	ror	r19
    455c:	27 95       	ror	r18
    455e:	a7 95       	ror	r26
    4560:	f0 40       	sbci	r31, 0x00	; 0
    4562:	53 95       	inc	r21
    4564:	c9 f7       	brne	.-14     	; 0x4558 <__addsf3x+0x52>
    4566:	7e f4       	brtc	.+30     	; 0x4586 <__addsf3x+0x80>
    4568:	1f 16       	cp	r1, r31
    456a:	ba 0b       	sbc	r27, r26
    456c:	62 0b       	sbc	r22, r18
    456e:	73 0b       	sbc	r23, r19
    4570:	84 0b       	sbc	r24, r20
    4572:	ba f0       	brmi	.+46     	; 0x45a2 <__addsf3x+0x9c>
    4574:	91 50       	subi	r25, 0x01	; 1
    4576:	a1 f0       	breq	.+40     	; 0x45a0 <__addsf3x+0x9a>
    4578:	ff 0f       	add	r31, r31
    457a:	bb 1f       	adc	r27, r27
    457c:	66 1f       	adc	r22, r22
    457e:	77 1f       	adc	r23, r23
    4580:	88 1f       	adc	r24, r24
    4582:	c2 f7       	brpl	.-16     	; 0x4574 <__addsf3x+0x6e>
    4584:	0e c0       	rjmp	.+28     	; 0x45a2 <__addsf3x+0x9c>
    4586:	ba 0f       	add	r27, r26
    4588:	62 1f       	adc	r22, r18
    458a:	73 1f       	adc	r23, r19
    458c:	84 1f       	adc	r24, r20
    458e:	48 f4       	brcc	.+18     	; 0x45a2 <__addsf3x+0x9c>
    4590:	87 95       	ror	r24
    4592:	77 95       	ror	r23
    4594:	67 95       	ror	r22
    4596:	b7 95       	ror	r27
    4598:	f7 95       	ror	r31
    459a:	9e 3f       	cpi	r25, 0xFE	; 254
    459c:	08 f0       	brcs	.+2      	; 0x45a0 <__addsf3x+0x9a>
    459e:	b0 cf       	rjmp	.-160    	; 0x4500 <__addsf3+0x28>
    45a0:	93 95       	inc	r25
    45a2:	88 0f       	add	r24, r24
    45a4:	08 f0       	brcs	.+2      	; 0x45a8 <__addsf3x+0xa2>
    45a6:	99 27       	eor	r25, r25
    45a8:	ee 0f       	add	r30, r30
    45aa:	97 95       	ror	r25
    45ac:	87 95       	ror	r24
    45ae:	08 95       	ret

000045b0 <__cmpsf2>:
    45b0:	0e 94 dd 22 	call	0x45ba	; 0x45ba <__fp_cmp>
    45b4:	08 f4       	brcc	.+2      	; 0x45b8 <__cmpsf2+0x8>
    45b6:	81 e0       	ldi	r24, 0x01	; 1
    45b8:	08 95       	ret

000045ba <__fp_cmp>:
    45ba:	99 0f       	add	r25, r25
    45bc:	00 08       	sbc	r0, r0
    45be:	55 0f       	add	r21, r21
    45c0:	aa 0b       	sbc	r26, r26
    45c2:	e0 e8       	ldi	r30, 0x80	; 128
    45c4:	fe ef       	ldi	r31, 0xFE	; 254
    45c6:	16 16       	cp	r1, r22
    45c8:	17 06       	cpc	r1, r23
    45ca:	e8 07       	cpc	r30, r24
    45cc:	f9 07       	cpc	r31, r25
    45ce:	c0 f0       	brcs	.+48     	; 0x4600 <__fp_cmp+0x46>
    45d0:	12 16       	cp	r1, r18
    45d2:	13 06       	cpc	r1, r19
    45d4:	e4 07       	cpc	r30, r20
    45d6:	f5 07       	cpc	r31, r21
    45d8:	98 f0       	brcs	.+38     	; 0x4600 <__fp_cmp+0x46>
    45da:	62 1b       	sub	r22, r18
    45dc:	73 0b       	sbc	r23, r19
    45de:	84 0b       	sbc	r24, r20
    45e0:	95 0b       	sbc	r25, r21
    45e2:	39 f4       	brne	.+14     	; 0x45f2 <__fp_cmp+0x38>
    45e4:	0a 26       	eor	r0, r26
    45e6:	61 f0       	breq	.+24     	; 0x4600 <__fp_cmp+0x46>
    45e8:	23 2b       	or	r18, r19
    45ea:	24 2b       	or	r18, r20
    45ec:	25 2b       	or	r18, r21
    45ee:	21 f4       	brne	.+8      	; 0x45f8 <__fp_cmp+0x3e>
    45f0:	08 95       	ret
    45f2:	0a 26       	eor	r0, r26
    45f4:	09 f4       	brne	.+2      	; 0x45f8 <__fp_cmp+0x3e>
    45f6:	a1 40       	sbci	r26, 0x01	; 1
    45f8:	a6 95       	lsr	r26
    45fa:	8f ef       	ldi	r24, 0xFF	; 255
    45fc:	81 1d       	adc	r24, r1
    45fe:	81 1d       	adc	r24, r1
    4600:	08 95       	ret

00004602 <__fp_inf>:
    4602:	97 f9       	bld	r25, 7
    4604:	9f 67       	ori	r25, 0x7F	; 127
    4606:	80 e8       	ldi	r24, 0x80	; 128
    4608:	70 e0       	ldi	r23, 0x00	; 0
    460a:	60 e0       	ldi	r22, 0x00	; 0
    460c:	08 95       	ret

0000460e <__fp_nan>:
    460e:	9f ef       	ldi	r25, 0xFF	; 255
    4610:	80 ec       	ldi	r24, 0xC0	; 192
    4612:	08 95       	ret

00004614 <__fp_pscA>:
    4614:	00 24       	eor	r0, r0
    4616:	0a 94       	dec	r0
    4618:	16 16       	cp	r1, r22
    461a:	17 06       	cpc	r1, r23
    461c:	18 06       	cpc	r1, r24
    461e:	09 06       	cpc	r0, r25
    4620:	08 95       	ret

00004622 <__fp_pscB>:
    4622:	00 24       	eor	r0, r0
    4624:	0a 94       	dec	r0
    4626:	12 16       	cp	r1, r18
    4628:	13 06       	cpc	r1, r19
    462a:	14 06       	cpc	r1, r20
    462c:	05 06       	cpc	r0, r21
    462e:	08 95       	ret

00004630 <__fp_round>:
    4630:	09 2e       	mov	r0, r25
    4632:	03 94       	inc	r0
    4634:	00 0c       	add	r0, r0
    4636:	11 f4       	brne	.+4      	; 0x463c <__fp_round+0xc>
    4638:	88 23       	and	r24, r24
    463a:	52 f0       	brmi	.+20     	; 0x4650 <__fp_round+0x20>
    463c:	bb 0f       	add	r27, r27
    463e:	40 f4       	brcc	.+16     	; 0x4650 <__fp_round+0x20>
    4640:	bf 2b       	or	r27, r31
    4642:	11 f4       	brne	.+4      	; 0x4648 <__fp_round+0x18>
    4644:	60 ff       	sbrs	r22, 0
    4646:	04 c0       	rjmp	.+8      	; 0x4650 <__fp_round+0x20>
    4648:	6f 5f       	subi	r22, 0xFF	; 255
    464a:	7f 4f       	sbci	r23, 0xFF	; 255
    464c:	8f 4f       	sbci	r24, 0xFF	; 255
    464e:	9f 4f       	sbci	r25, 0xFF	; 255
    4650:	08 95       	ret

00004652 <__fp_split3>:
    4652:	57 fd       	sbrc	r21, 7
    4654:	90 58       	subi	r25, 0x80	; 128
    4656:	44 0f       	add	r20, r20
    4658:	55 1f       	adc	r21, r21
    465a:	59 f0       	breq	.+22     	; 0x4672 <__fp_splitA+0x10>
    465c:	5f 3f       	cpi	r21, 0xFF	; 255
    465e:	71 f0       	breq	.+28     	; 0x467c <__fp_splitA+0x1a>
    4660:	47 95       	ror	r20

00004662 <__fp_splitA>:
    4662:	88 0f       	add	r24, r24
    4664:	97 fb       	bst	r25, 7
    4666:	99 1f       	adc	r25, r25
    4668:	61 f0       	breq	.+24     	; 0x4682 <__fp_splitA+0x20>
    466a:	9f 3f       	cpi	r25, 0xFF	; 255
    466c:	79 f0       	breq	.+30     	; 0x468c <__fp_splitA+0x2a>
    466e:	87 95       	ror	r24
    4670:	08 95       	ret
    4672:	12 16       	cp	r1, r18
    4674:	13 06       	cpc	r1, r19
    4676:	14 06       	cpc	r1, r20
    4678:	55 1f       	adc	r21, r21
    467a:	f2 cf       	rjmp	.-28     	; 0x4660 <__fp_split3+0xe>
    467c:	46 95       	lsr	r20
    467e:	f1 df       	rcall	.-30     	; 0x4662 <__fp_splitA>
    4680:	08 c0       	rjmp	.+16     	; 0x4692 <__fp_splitA+0x30>
    4682:	16 16       	cp	r1, r22
    4684:	17 06       	cpc	r1, r23
    4686:	18 06       	cpc	r1, r24
    4688:	99 1f       	adc	r25, r25
    468a:	f1 cf       	rjmp	.-30     	; 0x466e <__fp_splitA+0xc>
    468c:	86 95       	lsr	r24
    468e:	71 05       	cpc	r23, r1
    4690:	61 05       	cpc	r22, r1
    4692:	08 94       	sec
    4694:	08 95       	ret

00004696 <__fp_zero>:
    4696:	e8 94       	clt

00004698 <__fp_szero>:
    4698:	bb 27       	eor	r27, r27
    469a:	66 27       	eor	r22, r22
    469c:	77 27       	eor	r23, r23
    469e:	cb 01       	movw	r24, r22
    46a0:	97 f9       	bld	r25, 7
    46a2:	08 95       	ret

000046a4 <__udivmodsi4>:
    46a4:	a1 e2       	ldi	r26, 0x21	; 33
    46a6:	1a 2e       	mov	r1, r26
    46a8:	aa 1b       	sub	r26, r26
    46aa:	bb 1b       	sub	r27, r27
    46ac:	fd 01       	movw	r30, r26
    46ae:	0d c0       	rjmp	.+26     	; 0x46ca <__udivmodsi4_ep>

000046b0 <__udivmodsi4_loop>:
    46b0:	aa 1f       	adc	r26, r26
    46b2:	bb 1f       	adc	r27, r27
    46b4:	ee 1f       	adc	r30, r30
    46b6:	ff 1f       	adc	r31, r31
    46b8:	a2 17       	cp	r26, r18
    46ba:	b3 07       	cpc	r27, r19
    46bc:	e4 07       	cpc	r30, r20
    46be:	f5 07       	cpc	r31, r21
    46c0:	20 f0       	brcs	.+8      	; 0x46ca <__udivmodsi4_ep>
    46c2:	a2 1b       	sub	r26, r18
    46c4:	b3 0b       	sbc	r27, r19
    46c6:	e4 0b       	sbc	r30, r20
    46c8:	f5 0b       	sbc	r31, r21

000046ca <__udivmodsi4_ep>:
    46ca:	66 1f       	adc	r22, r22
    46cc:	77 1f       	adc	r23, r23
    46ce:	88 1f       	adc	r24, r24
    46d0:	99 1f       	adc	r25, r25
    46d2:	1a 94       	dec	r1
    46d4:	69 f7       	brne	.-38     	; 0x46b0 <__udivmodsi4_loop>
    46d6:	60 95       	com	r22
    46d8:	70 95       	com	r23
    46da:	80 95       	com	r24
    46dc:	90 95       	com	r25
    46de:	9b 01       	movw	r18, r22
    46e0:	ac 01       	movw	r20, r24
    46e2:	bd 01       	movw	r22, r26
    46e4:	cf 01       	movw	r24, r30
    46e6:	08 95       	ret

000046e8 <__tablejump2__>:
    46e8:	ee 0f       	add	r30, r30
    46ea:	ff 1f       	adc	r31, r31
    46ec:	88 1f       	adc	r24, r24
    46ee:	8b bf       	out	0x3b, r24	; 59
    46f0:	07 90       	elpm	r0, Z+
    46f2:	f6 91       	elpm	r31, Z
    46f4:	e0 2d       	mov	r30, r0
    46f6:	19 94       	eijmp

000046f8 <__umulhisi3>:
    46f8:	a2 9f       	mul	r26, r18
    46fa:	b0 01       	movw	r22, r0
    46fc:	b3 9f       	mul	r27, r19
    46fe:	c0 01       	movw	r24, r0
    4700:	a3 9f       	mul	r26, r19
    4702:	70 0d       	add	r23, r0
    4704:	81 1d       	adc	r24, r1
    4706:	11 24       	eor	r1, r1
    4708:	91 1d       	adc	r25, r1
    470a:	b2 9f       	mul	r27, r18
    470c:	70 0d       	add	r23, r0
    470e:	81 1d       	adc	r24, r1
    4710:	11 24       	eor	r1, r1
    4712:	91 1d       	adc	r25, r1
    4714:	08 95       	ret

00004716 <__muluhisi3>:
    4716:	0e 94 7c 23 	call	0x46f8	; 0x46f8 <__umulhisi3>
    471a:	a5 9f       	mul	r26, r21
    471c:	90 0d       	add	r25, r0
    471e:	b4 9f       	mul	r27, r20
    4720:	90 0d       	add	r25, r0
    4722:	a4 9f       	mul	r26, r20
    4724:	80 0d       	add	r24, r0
    4726:	91 1d       	adc	r25, r1
    4728:	11 24       	eor	r1, r1
    472a:	08 95       	ret

0000472c <strchr>:
    472c:	fc 01       	movw	r30, r24
    472e:	81 91       	ld	r24, Z+
    4730:	86 17       	cp	r24, r22
    4732:	21 f0       	breq	.+8      	; 0x473c <strchr+0x10>
    4734:	88 23       	and	r24, r24
    4736:	d9 f7       	brne	.-10     	; 0x472e <strchr+0x2>
    4738:	99 27       	eor	r25, r25
    473a:	08 95       	ret
    473c:	31 97       	sbiw	r30, 0x01	; 1
    473e:	cf 01       	movw	r24, r30
    4740:	08 95       	ret

00004742 <__ltoa_ncheck>:
    4742:	bb 27       	eor	r27, r27
    4744:	2a 30       	cpi	r18, 0x0A	; 10
    4746:	51 f4       	brne	.+20     	; 0x475c <__ltoa_ncheck+0x1a>
    4748:	99 23       	and	r25, r25
    474a:	42 f4       	brpl	.+16     	; 0x475c <__ltoa_ncheck+0x1a>
    474c:	bd e2       	ldi	r27, 0x2D	; 45
    474e:	90 95       	com	r25
    4750:	80 95       	com	r24
    4752:	70 95       	com	r23
    4754:	61 95       	neg	r22
    4756:	7f 4f       	sbci	r23, 0xFF	; 255
    4758:	8f 4f       	sbci	r24, 0xFF	; 255
    475a:	9f 4f       	sbci	r25, 0xFF	; 255
    475c:	0c 94 b1 23 	jmp	0x4762	; 0x4762 <__ultoa_common>

00004760 <__ultoa_ncheck>:
    4760:	bb 27       	eor	r27, r27

00004762 <__ultoa_common>:
    4762:	fa 01       	movw	r30, r20
    4764:	a6 2f       	mov	r26, r22
    4766:	62 17       	cp	r22, r18
    4768:	71 05       	cpc	r23, r1
    476a:	81 05       	cpc	r24, r1
    476c:	91 05       	cpc	r25, r1
    476e:	33 0b       	sbc	r19, r19
    4770:	30 fb       	bst	r19, 0
    4772:	66 f0       	brts	.+24     	; 0x478c <__ultoa_common+0x2a>
    4774:	aa 27       	eor	r26, r26
    4776:	66 0f       	add	r22, r22
    4778:	77 1f       	adc	r23, r23
    477a:	88 1f       	adc	r24, r24
    477c:	99 1f       	adc	r25, r25
    477e:	aa 1f       	adc	r26, r26
    4780:	a2 17       	cp	r26, r18
    4782:	10 f0       	brcs	.+4      	; 0x4788 <__ultoa_common+0x26>
    4784:	a2 1b       	sub	r26, r18
    4786:	63 95       	inc	r22
    4788:	38 50       	subi	r19, 0x08	; 8
    478a:	a9 f7       	brne	.-22     	; 0x4776 <__ultoa_common+0x14>
    478c:	a0 5d       	subi	r26, 0xD0	; 208
    478e:	aa 33       	cpi	r26, 0x3A	; 58
    4790:	08 f0       	brcs	.+2      	; 0x4794 <__ultoa_common+0x32>
    4792:	a9 5d       	subi	r26, 0xD9	; 217
    4794:	a1 93       	st	Z+, r26
    4796:	36 f7       	brtc	.-52     	; 0x4764 <__ultoa_common+0x2>
    4798:	b1 11       	cpse	r27, r1
    479a:	b1 93       	st	Z+, r27
    479c:	10 82       	st	Z, r1
    479e:	ca 01       	movw	r24, r20
    47a0:	0c 94 d2 23 	jmp	0x47a4	; 0x47a4 <strrev>

000047a4 <strrev>:
    47a4:	dc 01       	movw	r26, r24
    47a6:	fc 01       	movw	r30, r24
    47a8:	67 2f       	mov	r22, r23
    47aa:	71 91       	ld	r23, Z+
    47ac:	77 23       	and	r23, r23
    47ae:	e1 f7       	brne	.-8      	; 0x47a8 <strrev+0x4>
    47b0:	32 97       	sbiw	r30, 0x02	; 2
    47b2:	04 c0       	rjmp	.+8      	; 0x47bc <strrev+0x18>
    47b4:	7c 91       	ld	r23, X
    47b6:	6d 93       	st	X+, r22
    47b8:	70 83       	st	Z, r23
    47ba:	62 91       	ld	r22, -Z
    47bc:	ae 17       	cp	r26, r30
    47be:	bf 07       	cpc	r27, r31
    47c0:	c8 f3       	brcs	.-14     	; 0x47b4 <strrev+0x10>
    47c2:	08 95       	ret

000047c4 <_exit>:
    47c4:	f8 94       	cli

000047c6 <__stop_program>:
    47c6:	ff cf       	rjmp	.-2      	; 0x47c6 <__stop_program>
